%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 01.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: Vet
%%CreationDate: 11/24/2016
%%BoundingBox: 0 0 631 398
%%HiResBoundingBox: 0 0 630.0400 397.2331
%%CropBox: 0 0 630.0400 397.2331
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">ПОД РАЗМЕР</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2016-11-24T20:58:28+06:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-11-24T20:58:28+06:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-11-24T20:58:28+06:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>164</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgApAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FUPqOoWWm2M9/fTLb2dshlnmc0VUUVJOKvnX83vM2u6hYW/mG5u7rRrWa4RvKGlLzSSVbZv&#xA;317cAFRG37xPSqSaHYb8sVei/lH+b8PmyzFprHo2OsKVjtwXCi84p8bRK1KuGBLKtaAjFXpuKuxV&#xA;2KuxV2KuxVKPNOvw6JpUk4ZGv5v3GmWjMA1xdyfDFEgrVqsRWnQVPbFVLyR5li8zeVNM1tOIa8hV&#xA;p0Q1VJl+GVB/quCMVTzFXYq7FXYq7FXYqluu61HpVoriM3F5cOILCzQ0eedgSqA9hsWZuiqCT0xV&#xA;iug/mtpralHoPmb0tI11kRkqxFrMWr/dSSBSDUEUbauwYmoCrPMVdirsVdiqRa15hmju/wBDaLGl&#xA;5rroGZHJEFrGwPGa5Zdwu3woPifttVgqw3TBq/ljzZrk8t1dapaxLa3GsGfdnhniKtdW6LsBbyxP&#xA;yjX9hqCpVRiqfeevPTaRpca6H6N7q15D9ZtAf3kSwFlRZmCFeQkkkSOMchyZh2BxVW0/z9ZJHf2m&#xA;vBdP1zSEVr+zQlxKr0Ec1ptyljlZgqinIMeJFeqqH0f8zbC4uHtdb0+58v3KSCP/AEwKYgXYiMPK&#xA;hIjL0PHnRW/ZZsVZmDXcdMVdirsVeffmb+bVt5PV7WytP0lqkMaXN1Dy4RwW7yrEGkYVPJmcBVHz&#xA;6dVXn+u+b/L35n/mFbeVv0pfWfl5oQtq1s4jS4vFIlb1Y2Ugii8UJ6MNvtYq9N/Nnyxea/8Al9fa&#xA;RYW73l8RC1onqKrc4pFPIvId/hBr3OKvnD8vV1DzAbHyppois9dtLyTVdF1d+dY5UjVpIZKBwEb0&#xA;VYHjswpvyxV7N+Xn52i51J/K3nQLY+ZILl7NZ1ULBLIrcODEEhH5Cn8p2pir1e2vrK69X6rcRz+i&#xA;5im9J1fhIOqNxJowr0OKq2KuxVivnXzjNpUD2GjRx32vyRs4ty4VbWLif9LuKBuMaNTY/a7dyFWN&#xA;/l3+cGn3uh6ZbebLhdO124QGOSZSkVzEWZI7gSKPSjDshWjEfENuoxVB+W/Mmo+aPMGpeZ1vJEi0&#xA;GOQ2vlpol9QQzQxSRTqyjk5uI1fZhUE0GKpHo2i/mL+X3m3UI/L+mTX3ky+mjukgRDMViZ1LBFZ4&#xA;pI5VjDIfhbtVTsQq9r0vVtO1WyS90+dbi2kqA61FGU0ZWU0ZWU7FWFQeuKpHoH5h+X9b8x6noFrI&#xA;Re6aSQWrxmjUrG8kZpSiysU96V6HFWT4q7FVskkcUbSSMEjQFndiAqqBUkk9AMVY5Y/mL5Su9Pvr&#xA;8Xv1e309GmufrCNE/oqSomRGHJ43I+ArWvTrtirxjTPz0s7zzrfeYtXRodLs4JodDtQW9TkQCqkL&#xA;UcpONZDXiPhrWi4qlv5v+c/y+81eVNLutPkY+Y4ZG5p6RjYLL+9nD9V4eo/w/ETWtO9VXoP5B/md&#xA;HrmgtoWrThdV0eKqTSMB61omwck/tRfZb2ofHFWZp+ZvlHisl1cS2FvLKIbe7u4JYbeUsodCszL6&#xA;YDxsHXkwJU1pirKga7jpirzD85fzfh8n2n6L0srN5jukqlaMttG3SRx3Y/sKfmdtiq8b0r89tc0K&#xA;0eDRdPtxPcOZr/Ub9pLq6uJj9p3cGFQPBeO3zqSqlHmL83/OmuXxvnnjsbqSzbTp5LINH6lu0nql&#xA;TyZ6Hl3Wm22KoHyn+YOs+W51lhjhvfTMbRJdqZAhgWT0QpqCER5fUCg05AHtiqXJ5s19PMR8x/Wi&#xA;+tGRpxeOFciRqjkFYFdq7ClB2xVbf+avMuoXU91e6rdz3FzEbeeR5nJeEmpiO/8Ad1/Z6Yq9L/KL&#xA;8873y/JBonmOR7rQiQkF01WltR0HiXiH8vVe3hir6dt7iC5gjuLeRZoJlDxSoQysrCqsrDYgjFWE&#xA;/nB5mi0TylLGZ3t3vj6Uk0IJlS329Zkp9lm5LErfsu6nFXknk+DTrTyDq1t5qJlh17R5NZlvJEb6&#xA;xH9XuVtbKJZSX58n4ulR+1TpXFXlPlTVtU0jzHp2oaXIkV/BOvoPKQI6ueBEhJHwEMQ2/TFX1z54&#xA;84toPkV75riNtbvLcwacLQNKkt88R4+gKMWUNVhXsMVfH6XWr6NrP1iKd7bVbSTl68b/ABpKPtfE&#xA;p69m+7FU687+aLXzJ5x/TXAW0U6Whn9NQWDrDGJiagc2D8hUjemKvUbzzBpX5W/mTBeaPyk8leZr&#xA;WK7mijo0Sh2Yepb0PSPZgPBivhir3zS9V03VbGK/025ju7Occop4mDKR9Hcdx2xViX5mea5rGxOg&#xA;aVBNd67qsUixwwF0kjt/SlaSZHAoZFWJuCBg7H7PTFVXyt5RvtC0+0s7eaLUbO4kvDq01wz+vPFc&#xA;ycreQuVPqPHCAjBu1aHoMVSPTfLc+m3dh5EutJjufK1/bmQXC0E8QsJFkpduKrKJnZdlpx58RUCu&#xA;KsgXyBFb+fbjzfY3JgnvLP6pcQUPDmiqkclFIDqFQVRvAEEdCqxHzLp2qeTPzB0HXLK51K40HVph&#xA;a6+ok9VGuZKRwyyqfhHJnHRQAF4rTYYqn+q+UdabztqGpWV1cWOg3GnQtfW1iwSe8vVllPGNif3T&#xA;cAgZ14kggV6kKsZtPyo0LzDr9zqtvJe6He6e9taXNo1ZZbee2KTF7e5k58vUT0ysm5oSSPipirNf&#xA;LnmPVrO9m0LzYwXUfXppd6qExXdvIT6RLoiRiZSpDrRexAocVZdirwX84fzhsH1yHytZSc9ItZ0P&#xA;mKeP4mmWJqvaR7jwo2+7bGihqqsB/Nf8ytC86WmnNY6fLZX0DSPdl+BU+oFXgjLuV/dBt+5OKvN8&#xA;VdiqpBNLC/KKRomIKsyEg8WFGGxGxBpTFWV+Y/zS83a9YTaXc3CRaVMYq2cUaAUgXjGC5BkagArV&#xA;uoxV7j/zj9+Zf6d0j/DeqTctX0xB9Vkc/FParsN+7xdD7UO++Kplqf8Azj15J1TULjUNQu9SuLy6&#xA;cyTzPcIWZj/zy+4dsVQv/Qs/5df791D/AJHx/wDVLFXf9Cz/AJdf791D/kfH/wBUsVd/0LP+XX+/&#xA;dQ/5Hx/9UsVd/wBCz/l1/v3UP+R8f/VLFXf9Cz/l1/v3UP8AkfH/ANUsVd/0LP8Al1/v3UP+R8f/&#xA;AFSxVnnk/wAo2HlTSBpOn3FzPZI5eFLp1kMfLcqhCpRSd6YqlPnj8qvLfnS9t7vV5rtXtojDHHby&#xA;hI+JbmSVZX3JpU+w8MVSm7/IfyteQiC61TV5oFhithE12CnoQEmKPj6dOKE1UdsVS/8A6Fn/AC6/&#xA;37qH/I+P/qliqeaH+T+kaDAbfR9b1myty5kMEV0ojLsAC3Ax8a0A7Yqk8/8Azjd+X9xPJPNPqDyy&#xA;sXkczx7sxqTtF44qp/8AQs/5df791D/kfH/1SxVM7r8jfLF3pMOkXepapc6dbEG1t5riOQQ8RQCI&#xA;vEWjFNqKQMVT3yL+XWheSoLuDR5bl4r1keVLmUSKGQEVQBUAJB38aDwxVlHEVLU+I7E96D/bxV2K&#xA;tcV5BqDkAQG7gGlR+GKt4q4qCKEVFQd/EbjFXYq7FXFQRQioqDv4jcYqhtTsfr+n3FkZ5bYXCGNp&#xA;7dgsqhtiUYhqGnemKvMP+haPy6P+7dQ/5Hp/1SxV3/Qs/wCXX+/dQ/5Hx/8AVLFXf9Cz/l1/v3UP&#xA;+R8f/VLFXf8AQs/5df791D/kfH/1SxV3/Qs/5df791D/AJHx/wDVLFXf9Cz/AJdf791D/kfH/wBU&#xA;sVR+hfkH5L0PV7XVtNutRhvbOQSQv66UqNirD091YbMO4xV6TirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirG7Xz/oNz54u/J0bn&#xA;9J2cCzuxoEZiAzRp4sqMrH+w4qyFLiB5ZIkkVpYaeqgIJXkKryHaoxVfirsVdirsVdirsVczBQWY&#xA;0UbknoBiqCTW9Ge2tbpL63a2vnWKymWVCkztXisbA0djQ7DFUbirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirzDzj+YNjrOvaX5H8uaqqXWqzTwarewoJTBBEkiSRrWgEjMpCne&#xA;lK+FVXzatvreja/f3Eckg1Hy3MCbmhPCS2uEgTly7cqCn0Yqzby1+cHmzQdTv/M+p2319td9CCZy&#xA;DHF6liVR14iirJ6JPToWrSmKvRfyZ/N2bzN5o1vT9VnaN7+X61odo/xenGqt6kKsAB8KKp9/iPji&#xA;r2bFXYq7FWmdVIDEAsaLU0qetB92KsU/Mjz/AKd5N8vXN7JNCdUaNjptjI3xTSVC1CghiqFwWp2x&#xA;V4V54/P3U/NHlG30OytHstQvD6eryRGqyKKBY4KEvxlP2gd/2dwTirzjU7LzFpDWNldPNF+6j1Gy&#xA;gV3pGtwgkWVANlYqoLEeG/TFX1P+Vn5raJ5p0PT7e7vYo/MnH0LmydgskskScmljXurqOW3TcYq9&#xA;BxV2KuxV2KoTVdW07SbCW/1Cdbe1hA5yN4k0VVA3ZmOyqNydhirBZfzRvrGZ73VdN9HSrxTFpFqh&#xA;5XxuVjWWOK4QVCtcJIvHjUJsGNW2VTyf8wtIj8tWutJDNPNeN6NvpcYBujcrX1YCpICmLi3NieIA&#xA;rWmKpzoWv6XrliL3TpfUjDGOaNgUlilX7cUsbUZHXurDFUwxV2KuxV2KuJpuemKsU88+bp9LtbXT&#xA;tEVLzzLrTGDSLfkCq7Etcydf3UI+JvHpirxvyx+ZnmP8vfPGoeWPNV3Nq+lif99dvzeSEuA3rx8i&#xA;zemQ1WT6RvUFV9GQzQzwxzQuskMqh45EIZWVhUMCOoIxVfirsVQ2pajZaZp9xqF9KIbO0jaaeVui&#xA;ogqTirwXzDpn5m+aPLup+cBqk2n2WqtaJo2gxEozxNeLFbBmqOJIl5gj7RPhTFVH/nH7yZYf4n1i&#xA;e5Uz3mizPbPyHFoXWVDDIo68pPRmVvACn7WKsz85fle15deY47O242vmebS5JLmI1eOWK7Auqqa/&#xA;CYnMtRtUGvbFUb5q8i6XpthrN9BYS3VnfT2TXWn2ymRhEitb3U6Jv+8ME7liASStcVef+YvyR8x6&#xA;dp+j6l5Qtp08xWE1zDcyQyQw84oJnS2uv3ksfF5IVUsqA8q70P2lXqn5Uef083+XFe6ZU16w/cav&#xA;agcSsgJVX4kCgkC126Go7YqzXFVss0UMTSzOscSCryOQqgeJJ2GKvmL8/vzGv9V8yyeXNOm46Zo8&#xA;quXiqHa8iVubchv+75FfYgnFUm8q6J5s/NzzEseranzbTLWJXuZl39ATAcaIBycq7mp6kbnvir2K&#xA;7/I7RYPNkGtabaQw2FiLSW0s0LhjOt809yzVNCPRbjGK+A2C7qvSbvQ9HvHkkubOGWSWEW7yOilv&#xA;SBLBKkdAzEj3xV8p+afy88z+TfM9nf6LDI6m8uX0gRh5JUTT5Qokn+FV+MDnttxxV6x+UP53XHmj&#xA;V7nSPMKxWl7dMZtIMalI3jAo0I5EksvEsDXfcdgMVew4q7FUt17zBp+iWqz3RZ5ZmEVpZwjnPPKe&#xA;kcMY3ZvwA3NBirxn8xvzIk0GdLu/9C883xyA2OjV9Wz0pOKsZHKkCa5YHjz/AGTXjQD4lXidn5z1&#xA;+11mDWFuPUvLZQkBmHqKkYUJwUNWlUHGoNad8VR+hfmR5g0zV5dRlcXn1iGS2uElCkmKSJYW4Gnw&#xA;NwjT4l3PEcqjFXsehfmNpHmPzFJc6VdQ6D5lW2hmW4uCFs9RVYx6lveLtRkavB1+IL06UKr0/wAn&#xA;+d9L8yQvGg+q6rbD/TdNdlZ03480ZdpIy2wdduxodsVZHirsVS3zJ5i0ny5o1zrGqzejZ2y1Yjdm&#xA;Y7KiDuzHYDFWAzeYfMv5lWn1PyqJtC8tTK6X2v3Ua+tMPs+laxB6gEV5OafR3VYH5cn0b8qvziuN&#xA;CmmgbRL2NVOo3Kgz2wlj5orSqooDIArfs0IY0piqf/8AORWgwWMOl+ebBCdTtrmO1uKLzhkgZXZT&#xA;MNxxqPTNdmDUPbFUhT8xp9Lks/KHkfWUvtF1e7jh0y8MchvdNilkAlt/TmUcwOf7p26Co8CFUdb+&#xA;ffMP5Z+fb7S/NE2o6l5YvnJsby8f15hxoPWjJoCu9HRadiB2Kr2/Rdc0jW9Pj1HSbuO8spfsTRGo&#xA;r3UjqrDup3GKsc84WF15pvE8rRKBo0bwz+YrrkQSisJI7OML1eXiGkNfhSn8wxVkt/pNneWUVm68&#xA;LeCa2niSOigNaTJPEAB25RLt4Yqg9C8qaPol5qt7YxEXes3Ju76Zt2ZzXio8FXkaD3PjiqcYq7FX&#xA;Yq871HyxdeUfN115z0OFJdIvYki8waVGvB0SMj/SrcIKMyAcmQ9fipudlXocciSIskbB43AZHU1B&#xA;B3BBGKvGP+chdb1O9gsvJ2lRS/6Y6z6ndBJPRSNT+7jdlVti3xt3HEeOKsO8u+W/y90L6u15Pfaj&#xA;fT2t1Y6vJb2F56Si6DJ6ts0kUbBljJiNQQQxYUOKvV9M82flfpc7anYevbSPbRWpijsLwH0odo14&#xA;CGvwjbFUbF+cHkp2IZ76IDoz6dekH/gYWxVGWf5neTLuRo4ruZCu9ZrO7hUinZpYkGKqN1+avkiJ&#xA;/Ree5lqeL8LC9dQD3JEJBHyriryr85dP0HzDNp2teVr0wappkfpLbLa3UBdEf1IjFIIlVHRiaVp1&#xA;6im6r1H8qfOt75p8spJqdtJa6zZ8Yb9JI2jDtT4ZkBC7SAVIHQ1HhiqY+efOtp5U0g3kltNfXclV&#xA;s7G3RneVx4lQwRRXdj+J2xV82eZfPn5javdvdw2d9aXzmhv4Y545o46/3NsVH7iLpyCnk53djsAq&#xA;wq70nzVeXMl1d2d9c3MzF5p5Y5nkdj1LMwJJ+eKqP+Htf/6tl3/yIk/5pxV3+Htf/wCrZd/8iJP+&#xA;acVbHl/zAOmm3Y/54Sd/9jiqYaMPPGi3cN5plvfW1xbv6kLpDL8LGgag40owFGHRhscVfTv5Xfmh&#xA;N5ot1sNasJtN16NasHikSC4CjdomYbN3KE/KorRVmeu61ZaLpVxqV5zMNupb04lLyu3ZI0H2mbt/&#xA;TFXg/mX8xrbXfMI1PUvLuo6hpWmSRro+hywOsUhavrXdxsylwBxjTcb/ADxVC/l/+bGseWZtUtpf&#xA;Kdyuj313cX9tbWscgeB5gvGEFwFMY4eAp2HbFXleqWPmzVNSudRvbC8mu7qRpZnaGU1ZjXuCadhi&#xA;rKfPHnf8yvONna2WpWFxDaWoPKC3gnVZXrUPLWvJlAFO3fvirH/LQ84eXdctNZ07T7pLu0YlGNu7&#xA;bOpRxRlI3RiMVemfmD+alz5t0GHTpfI00k4/eNNdCciGXcVhMIic/DQ7sK9CppiqR/kr5k8weT/M&#xA;yx3lheDQ9SKw3wMMvGNq/u56cf2Ds3+ST7Yq+qYYIYQ4iQL6jGRyOpZtyTiq/FXYq7FXYq7FXYqo&#xA;2VnBZ2yWtuvCCKoij7KtSQq+Cr0UdhtiqtirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVWyyxwxPLKwSKNS7u2wCqKkn5YqlflfzDBr+jxajFE1uzMyS20m&#xA;0kboaUYEAioow9iMVTbFXYq7FXYq7FXYqlk/mby9b6wmiz6jbw6rJGJY7OSRVkZGJA4g0qSQdhvi&#xA;rEb787/JlhcXH1ozDTY3khttUjVZYLiaEAyRxBGMmxNA5XgTX4sVZF5N85af5p05ru2jktp4mC3F&#xA;lPx9WMOOcTHiSCskZDKQafccVT/FXYq7FXYq7FUNqeo2emadc6jeyelaWcTzzyHskalmP3DFW7PU&#xA;bG9ijktZ0mWWKO4TgwJMUwJjenXi/E0PemKqF7r2j2OoWen3l3HBeX4la0ic0MggUNJSu3wqa4qi&#xA;LG+tL+yt76zlE1pdRrNbzL0aNwGVhXxBxVXxV2KuxV2KuxVp5EjXk7BVqBVjQVY0A38SaYq3irsV&#xA;dirsVdirSsrCqkEVIqN9waEffirAfzc84WukaBd2nH16RJLqMYYL/o7vwWEkkb3TAx0G/D1GH2d1&#xA;Xln5G/mdfP59vbDVbkm18wyNJEJXJ4XYP7sAn+ZP3fvRcVe93fmS2tvMFpoxjZnuVPO4qAkbsrvD&#xA;G1erSrBIRTpx3+0Kqpo08CzJC0irNKGaOMkBmCU5FR1PHkK4qvxV2KuxVJvOHmnTvK3l671q/P7q&#xA;3X93EDRpZW2SNfdm+7rir5W84fmTNqNjc2FrHE02qP8AWPMGoSIkr3E/7EcJcMYobdfgj4703rvi&#xA;rAsVZj5C/M3WvKmtWV4Ga5tIALee3J+3aElmiHb4WYung1exNVXv2vfnZoNzPZ6P5X1GzOoaiiud&#xA;UvXEdnZo4BrJyK85t6CMdD9rpTFWY+SNeudY0NTfcRq9jI1nqipTj9YipWRKbcJUKypT9lhiqf4q&#xA;7FVK4u7a2tJbyeVY7WGNppZmPwrGg5MxPgAK4q8c/wCcgvNr3WjWXlTQ3F1c6wHurr0WDUtLWrnp&#xA;2Lxkn/UOKsB8jap5m/Lfz1aP5gZjpN9FBa3UpfnELWRnS0mB3oq+izL/AJFRtXFVLzgPNP5l+dX1&#xA;TSBx036w2m6HI7+mrCJHkqh/y+BZj25AYq9G/Ivz/p9t5P8A0Hrt0tte6VfLp0CyndvrLMYUr7Ms&#xA;i+wXFXsBu7URRymaMRSgGKTkOLAqWHE1ofhFfliqrirsVdirRdQwQkcyCQtdyBSpp7VGKvCfzw1q&#xA;88y6Xfw6VK48v+X3BvLqKnp3N8CP3XOoXhbq3xGu8jKoFaYqmn/OPv5mz69p8vl3WrszavZDnZzS&#xA;msk9vShBY7u8Z6nqQfYnFWXaj+cfkCw8xW2hS6krzzs0clzHRreCQEAJNLXipJNNq8f2qYqzUGu4&#xA;6Yq7FUo816/Foeiz3pKfWSrJZxyNxV5uJZQx7IoUu7fsoCe2KvGPJH5+6Bomk6jpupCa5NkXn025&#xA;Xk7Xckrc5UcsPgZpnZwx24/IAqvNPPHnabzDb/W472YPfuzarp8lPTMw9N1kjAJ+BBxhTlvxTr8T&#xA;YqwpHdHV0Yq6kMrKaEEbggjFWVat+YevXdlYwC5P1u2nXUZ9QH9/JfBpKSmQjl8ETpGB9kcNhir0&#xA;GH8757rVvLer6pEkFzFPAl2ybqtpxlhmlTeoaV3dnSlAFjoSd8Ve5az5vttP1bTrJOEkNxJEL65L&#xA;gLDHc8o7Wni001Ao/lDHwxVkOKpR5m8xwaDZQzvby3lxczpbWllBw9WWR6khObIvworOasBQYq+X&#xA;/wA6vzQPnPVoLWxWWDRdPH7qGYBZHuGFJHkUFhVfsLue574q82xV2KuxV2Ksu8o/mJ5i0QTWMWqT&#xA;2dhfpFBdXMIDzxRxcghiLdCobjUb8dh0GKvrfyR5ij8x+UtL1pCC15ArTAdBMvwTL/sZFYYqu85a&#xA;rPpflm/u7X/e30jFZ/8AGeX93ET7KzBm9gcVfO1rafmrZeV9T8mNE1xa6gvqvclmc28NtAsrpuKh&#xA;ZohGFB9x1rir0L8qvyav/Ldtql3rLQz6zLHJa6YQTJHFEyMGYVH+7HkNR4fPFWYeZvIem64LnTrh&#xA;QLW+0sWQkoC0b2kvO3kHTdGmY/h0xVU0ryNa6SfK9pZill5fhuPj2BeaWMRliPFy8jn3xV5/+YX5&#xA;DW2saxHqOn3H1GS8Z4XjCl19YvJJHK5G/HgArd+hxVi83lr8wvM66d5Kvpvq1l5ae4sob9WNLq4i&#xA;jd46D4TRLcCMeFffFXt35e61qWpeXbePVxx1m0jjS8/4tVkDQ3C/5M0dG9m5L1BxVk2KsP8AzG/M&#xA;zSPI1vZS3sEl3JeSlRbwECRYUH7yWjbUUlRQkVJxV4x+aGvv5t8u/wCOka5sbKG4/Rvl2zqEk4n4&#xA;rq6k4MaciBH8JI2odyDiqnrVvrXk38mpvLvmOWYXutypJZ6eeMiW8SSLIE5GQcDyQuwRW7VpU4q8&#xA;n0Yau2q2qaOZl1R5FSzNsWWX1H+EBCpBBNcVemfnj5aHl3TfKumC3tofq9oySzRczNNMFjErSMUV&#xA;eIcEqFJ3Yk05Yqmf5dfn9qOieWotN1bT5dSgsJYYE1FWIENs5I4yni9WRVPp+I27bqvpC2ube6t4&#xA;rm3kWW3mRZIpUNVZGFVYEdQRirw7z/5d/PLzJrV5LaWMVtpTRS2dpb/WLckW0oKSE8nPF5VPxFd6&#xA;fDWlaqvPP+he/wA0v+rbF/0kwf8ANeKu/wChe/zS/wCrbF/0kwf814q7/oXv80v+rbF/0kwf814q&#xA;7/oXv80v+rbF/wBJMH/NeKrn/wCcfvzVc1bTomIAFTdQdFFAPt9gMVR0/wCTH5zT6dDp8lqptoSW&#xA;4/W4PiJCKOXx/FxWJQtegFOmKvoX8v8A/FieVrS381QiLWLYejLIJEl9ZUpwlLIW+Jhs1e4J74q8&#xA;3/O7yR+ZPm7XbSPRrNTo+nxFYZDcRRmSWYfvW4lgacaJuPHscVeZf9C9/ml/1bYv+kmD/mvFXf8A&#xA;Qvf5pf8AVti/6SYP+a8Vd/0L3+aX/Vti/wCkmD/mvFXf9C9/ml/1bYv+kmD/AJrxV3/Qvf5pf9W2&#xA;L/pJg/5rxV3/AEL3+aX/AFbYv+kmD/mvFXt35GeWPOPljQL3R/MVssESTiawZZY5aiUfvE+AtQKy&#xA;g7/zYqzzU9Ji1F4VuDW3iEp9MbEySRmINX/JSR/pIPbFXWej2trf313EKNf+kJUoOI9FPTWn+xxV&#xA;HYq7FXYq4gGlR03GKoR9LsnvYrwxgTwu8isKfbeMRMf+AUDFVi6VFDe291bfuzHGbeUEk84d2Rak&#xA;1qj/AGa9AWHfFV+q3V9a2Es1hZNqF2o/c2qukXJj0q8hCqPE/gcVeFeY/J35xa9baq15oUB1TVyk&#xA;U979eiKxWcTB47WCLl8CBxyYljyO5xVJtV/LH87tT0HTvL01jBHoWmcGt7GKe2UeqqsGlZyxcu5k&#xA;cmppvsMVTDz/AOSfzz86SQR32m28GnWdfqdlHcW54kjjyeQtydyBuengBiqC8gflT+aHlHzTa683&#xA;l+DUDarIFt2vII95IygZXq9COX8v9cVVPPv5afnB5x1VNSvNIhilROHAXVoRSu1CojY/7IscVU1/&#xA;Kj8zh5HbyufLtsXN010NQF1bBtwnwlepI4EBufQ0+arLvyo0f84/JyjS9S0lb/QGaqRrd2/rW5Jq&#xA;TFyehU90JG+4I3qq9oxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KrJ54YIXmndYoowWeRyFVQO5JxV&#xA;j+p+etFg0GDVNOkGqSX6oNJsrc/vbmWWojRVPxLurcyR8IVq9MVeexf85DwDTLeWbTwLu2kKawwc&#xA;CB1hkSKf6keTPI49dJQrgDjXckYq9fs7y1vbSG8tJVmtbhFlglQ1VkcclYfMHFVbFXYq7FXYq7FV&#xA;G9vbSxtJry7lWC1t0aWeZzRURBVmJ8AMVYRpv56flhfuqLrAt5Hk9JFuIpYgT2YsV4Kp8WIxVniO&#xA;jorowZGAZWU1BB3BBGKt4q7FXYq7FUKdV0sGQG8grESso9RPhI6ht9qYq838zfmJrmu6frafl+6f&#xA;VtEhklv9edQyM8aF/QtA44O1B8TtsB0rUHFWAWX5z/mLqnlq71y3vraO60B7cXGmQ2vIXMMvJXnn&#xA;JJZVUgV9MqB7bYqzXyt/zkLYapYeve+X9SjMXw3VzZQ/WrZGC8jVgVZfh+KnE7Yq9Q0bWNN1nS7b&#xA;VNNnFxY3aCSCZaioO24NCCDsQdwcVRmKuxVK77zR5dsNWtNIvdQgt9SvgWtbWRwruAabV23Oy169&#xA;q4qx7zD+cXkLQNeh0TUL4/WXr68sK+rFbmtAs7KSVY+ABp+1TFU+vvN/lex0VdbudUtk0l/7q8Ei&#xA;vG58IyvLmdui1OKvPfNX56aXcxpo/kTlrOv3zCCGUI8cEDSMI1dmlCcjyccf2fE9iqwDyL+c+veQ&#xA;zP5d822FxdpHMzh2kpcwcmPqDi9RIrN8Q+Id+tcVfR2lapYatp1vqWnzLcWV0glgmXoyn9R8R2xV&#xA;FYq7FWH/AJg+eX0C2S10kQ3vmFz66aazgP8AVoUkuJ3Kj4gGit3RD/ORiry/8wPzBi88+UtSa0UW&#xA;WnaTaR3dzbzyr6k090/p2wQITzESnkw7SEDqm6rCNU823GkataebNJjET6mI9QtbsIAy3Sr6WoW8&#xA;gqKxSy8mIP8ArL3xVItcuNN/xHqaaJM82gAvfRq458XeD7L0C7epJ6bU2+Y3xV6F+Tv5nDyxHa6b&#xA;r91ONDlsTPEzL6i27teGJSAoLrGwJJr7UGKvefLXnDy/5lju30e59f6jO1tdIyPG6SL4pIFah7Gn&#xA;Y+GKpzirsVdirzj8yPzu8veTbhdPih/S2r1Bms4pBGsK/wDFsnGSjHsvEnxptiryD8z/AM4tQ882&#xA;B07SYJbDRbaJLjUEYgyTSllRUPE0MayOKDv9o9AAqxP8xfJ/+FJ9C06VeN/NpUV3qK9xcTTzkqfd&#xA;ECp9GKqtvqnnjRfKmlaymtXtpatdPHodmJpBGywCs8gjJ48FdkTpQ1b6VX1b5D83WfmzyvZazbsv&#xA;qSoFu4VP91cKKSIR1FDuK9qHFWQYq7FWD+dvPVrHLB5X0G+il8z6tcCxRYWEr2at/fXEqKaqYowW&#xA;APf2rir5g/M3QJNB866jpxtDaQRsptULFy8PABJS5+0z05P/AJVcVe9flR5q8uah+UV3Zwacskuj&#xA;2k0eqaREeJnBjYl6san1xWp8ajwxV4B5a80XOn+Zri9tpU0qDVVntLowKTHBb3lVbglQaQ1DqK/s&#xA;jFWa/l9e6h+W35jXPlrX2jSx1NBZ3klQ8BEorb3HxUBT46GvRWNemKph+TX5gT+RdfvfKHmpzaac&#xA;ZXAeWvG2uU2bf/fclOvStD3JxV9F6ZrOkarB6+mXsF9CKVktpUlUV8ShOKsc88fmTpHlnjYQq2pe&#xA;ZLoKun6Lb1aaRnNELUB4L7n6MVeY/wDKldU81xw6z5tv5oPNGrXcou4ECsltbxq4RQAWFB6QCmvG&#xA;jAddyqyby5+WPk61/LT9G6ra2kOpywXMF1qF0Iw63SyOhdXam0Un2D/KBiqHi/J3yNN5ntYiskvl&#xA;u8tHutN05Lh5LVLtGjW4KOGNfUi4U33ox7CirJ/Lv5c+X9Ia8FhpkUJivLf6lckVkNtG1vckB2LE&#xA;gTB8VUfzJ/LrR/NcNnAkUcNxfX6PeagihpCsFpOqciCrMqmg48hirzjyZd+ffyvvNcs7yzk1TyZp&#xA;Nyi3cyCjxrOvJLi3BO44lTKnQV6jc4q9/sb20v7OC9s5VntLmNZYJkNVdHFVYfMHFWB/m/8AmFJ5&#xA;U0+0hs7mG31C7MknKZWcejEtCAEIbk8jooPYVPbFXzXqvnDUn1CC8a+nvpoCk9rJdSfWHVJogk9v&#xA;LLy5MtAEoe1elTiqXfWFsoNT/R88f1S752cfJmFxJAZY5RVV40/uxUsKHcb9lUy89X+nz/oS306W&#xA;JtPg0+B/qcDl1t7iVQ11ErOC4rKC3Es1CSR1xVSvtQGs+b7650awiT9KCUQ2grEkZli/eMCz0Wnx&#xA;E1PH5Doqpotpp1jrEV3cwXlzEiWFnBExZCZX9Z5w68OQi9Kn+sVrVdiqyXyr+Zs+iefrPWLNy1re&#xA;21naavDORHG7iCOOVyyhvsyqXDca9Rv3VfTvkzzhpPm3QINZ0xj6UtUlhenqRSr9qNwCdx19xQ4q&#xA;oee/Nb+XtHVrOH63rV/Ktno9j3luZPs16fAg+Jz4fPFXyrr2q/mHFq9veXetXhvtUVrm1kjnliJt&#xA;2dkSUKpURxuEYqB+zv0piqM8x+S7ny3+XenanqMTnV/MdyJXZxvBaxoXSNyejzswkPsvscVZx+T3&#xA;5bm60/Q7i9irDfXTaxdhh/x72IMVlEf+Ms8zyU6Mq4qzHzz+TsvnPz/Lqd9KbfSYbCG3iZSOckxd&#xA;+dPD00bkK9Wp2riryr/nIW9s4/Ntl5d09BDp/l+xitooF6I0g9Q/8kzHiqY+WPyf826Z5YuvM15q&#xA;lzo1rHp9xqEtnayPFO/pRM8CPxK8fs8mr0BAG9eKr078ivzHPmry7+jtQmMmu6UoS4dzV54TtHNU&#xA;7lv2X99/2sVZp5z8yQ+W/LGoazIObWsR9CLrzmchIkoN/ikYDFXyr5ih8x/l359sdQM5fWxFDqFz&#xA;I9SHmuVJuEbpVSzOh8fniqb/AJsTDzxFb+fNEAls4bWG11mzBrPZTqzEGRdi0Tc6LINvGmKsL8ke&#xA;ctS8o6/Dq1kBIo/d3dqxok8Dfbjbr17Hsd8VTn8wfKWkwW1v5r8sSCbytqshRI61ks7mnN7aVaDj&#xA;Tfh7D5EqoDzfrVz5h0zQtTlHKTT7JNIvJK1b1IJJXiZ+/wAcLrQnqVbwxVR1fUL7zJFFqryerqth&#xA;bxw3wY1kligHGO4Fd24oAsnhTn0J4qvVfJnmnTtN/MTy9rtm0UGleb7JbK9s4Y44o7e9iIjMYSNE&#xA;WglCcSd+L77UxV6HJ/ypr/EN7X0P0/WX6/w+s/Wf+LfU4/FTx7Yqlj/9C7fW/j/R/wBcqOvrepWm&#xA;3X4umKq2rf8AKg/XT9L/AFP1+A9P636/Ph2p6m/HFVaD/lR/6J/cfV/0Rzb7H1n6tz4nn0+Dlw5V&#xA;9q4qr2n/ACpz9FSfU+H6J4/vfR+t/V+P+Vx+CmKrYf8AlS/6Hj9D0v0N6g9Hh9a+rerXbjT93y5e&#xA;G+KptJ/gT9F3PqfWv0V6TfW+X6Q+r+jx+L1K/Bw49a7UxVOfKX+G/wBAW3+GuH6F+P6p6PL06czy&#xA;4cu3OvTvirHPPn/Ko/0rD/jP6n+kfQHofW+fL0ebU402py5Yqxr/AKxo/wC1V/yUxV3/AFjR/wBq&#xA;r/kpirv+saP+1V/yUxV3/WNH/aq/5KYq7/rGj/tVf8lMVd/1jR/2qv8AkpirM/y//wCVc+le/wCC&#xA;vq/o8k+u/VefDlQ8OXLatK4qmupf4Y/T2m/pH0P0x6dx+i/W+1w4j6x6XL4a8Kcqb09sVY/rP/Kp&#xA;P8UD9LfUf0/9XNPWry+r+i1evwcPR5e1MVR3n/8A5V79TtP8a/VvqvqN9U+tcuPqcd6ce/HFU+0n&#xA;9E/ULX9F+l9T+rw/VPRpx+rcf3PGn7HH7OKozFXnmqf8qT/xe36T/R/+JvrEfP1+Xq+v8Pp8uXw/&#xA;y07YqzXXf0R+hb39M8P0V6L/AF71a8PR4nnyp249cVYb5I/5U1+m/wDnUPqX6W9J6/VefP0tuda7&#xA;ca064qzHW/0L9Uj/AEx6P1X6xB6fr04ev6q+h1/a9XjT3xViXnz/AJVB+mIf8Z/Uv0p9XX0frXLn&#xA;9X5vxpTtz54qlmjf8qE9S6/RH1Dl9Vm+u+j6tPqvA+t6tNvT49eW304ql3/WNH/aq/5KYqjLf/oX&#xA;39G3n1f6h+jaxfXuPq+jyqfS9T9nlWvGu/WnfFUPH/0Lf6Uvp/oz0qD1uPq8aV+HlTbr0riq2P8A&#xA;6Fr5j0/0Xz7cfUr+GKphpf8AyoT1LL6h+juX1tfqFOfH638NPT5fDz+xX/Y17Yq//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:a7339cf7-7653-a649-841a-fc1a8c68c0da</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:a7339cf7-7653-a649-841a-fc1a8c68c0da</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:bdcfdbee-c5b3-4207-a16f-5e958a80bf5b</stRef:instanceID>
            <stRef:documentID>xmp.did:5478965a-fd6d-2549-a603-dcd78f5f25b2</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c3e413eb-a56b-3943-8fc2-4a423b0fee48</stEvt:instanceID>
                  <stEvt:when>2016-03-25T15:31:10+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a7339cf7-7653-a649-841a-fc1a8c68c0da</stEvt:instanceID>
                  <stEvt:when>2016-11-24T20:58:28+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>650.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>32</xmpG:red>
                           <xmpG:green>22</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>32</xmpG:red>
                           <xmpG:green>22</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -397.233 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 397.233 li
630.04 397.233 li
630.04 0 li
cp
clp
44.2968 24.3935 mo
46.4895 37.9749 li
45.7549 22.9165 li
45.8256 22.8415 45.901 22.7722 45.9715 22.697 cv
46.1184 22.5403 46.2679 22.5074 46.3675 22.5074 cv
46.5664 22.5074 46.7541 22.6326 46.8823 22.8509 cv
50.5936 29.1704 55.0892 34.68 59.5695 39.706 cv
57.1199 41.8617 54.6245 43.9493 52.0994 45.8803 cv
50.734 40.4656 li
50.9338 44.5512 li
46.6759 25.5976 li
48.1582 47.871 li
40.0048 44.6489 31.1576 46.8853 22.8186 49.3958 cv
20.9386 49.9617 19.0664 50.5699 17.1904 51.157 cv
30.2619 39.3227 li
15.8377 50.0395 li
20.2123 45.6962 24.8728 41.7285 29.4359 37.8592 cv
34.4243 33.6291 39.5432 29.2425 44.2968 24.3935 cv
cp
45.6412 20.8738 mo
45.4501 20.9718 45.2636 21.097 45.0943 21.277 cv
45.2638 21.0973 45.4499 20.9714 45.6412 20.8738 cv
cp
46.313 20.6917 mo
46.1231 20.6985 45.9337 20.739 45.7495 20.8176 cv
45.9341 20.7391 46.1228 20.6984 46.313 20.6917 cv
cp
46.7177 20.7319 mo
46.6401 20.7139 46.5619 20.7029 46.4833 20.6969 cv
46.5622 20.7028 46.6398 20.7138 46.7177 20.7319 cv
cp
47.135 20.893 mo
47.0599 20.8525 46.9841 20.8152 46.9063 20.7869 cv
46.9844 20.8152 47.0597 20.8524 47.135 20.893 cv
cp
47.5361 21.1844 mo
47.4615 21.115 47.3865 21.0472 47.3067 20.9923 cv
47.3866 21.0473 47.4614 21.115 47.5361 21.1844 cv
cp
47.9772 21.7219 mo
47.885 21.567 47.7818 21.431 47.6719 21.31 cv
47.782 21.4308 47.8847 21.5673 47.9772 21.7219 cv
cp
76.3397 29.3219 mo
76.5117 29.0832 76.8204 28.9349 77.1455 28.9349 cv
77.3878 28.9349 77.6164 29.0179 77.7923 29.1666 cv
75.2945 41.9079 li
79.1639 30.3716 li
81.3603 32.2902 83.5354 34.2426 85.6856 36.2315 cv
85.6261 36.2008 85.567 36.1712 85.5074 36.1397 cv
84.3559 35.5442 83.2276 34.8292 83.2276 34.8292 cv
83.2276 34.8292 84.1071 35.9965 85.0618 37.0873 cv
85.4589 37.5481 85.8646 37.9887 86.2069 38.3513 cv
85.0709 39.2946 83.9111 40.2114 82.88 41.2858 cv
80.4767 43.7901 78.569 47.39 75.3014 48.038 cv
74.2469 48.2471 73.2059 48.1025 72.2053 47.734 cv
76.7913 31.6773 li
70.9368 47.1294 li
69.8047 46.4891 68.7433 45.6176 67.8079 44.6886 cv
67.6146 44.4967 67.4235 44.2954 67.2322 44.0987 cv
71.2831 38.2168 li
68.2143 40.5996 li
76.3397 29.3219 li
cp
78.629 27.4927 mo
78.4319 27.3247 78.2153 27.2054 77.9926 27.1139 cv
78.2154 27.2058 78.4319 27.324 78.629 27.4927 cv
cp
101.271 30.5829 mo
101.087 30.5877 100.907 30.6515 100.726 30.7121 cv
100.903 30.6375 101.085 30.5913 101.271 30.5829 cv
cp
101.786 30.6506 mo
101.637 30.6053 101.483 30.5741 101.325 30.5733 cv
101.479 30.572 101.633 30.6037 101.786 30.6506 cv
cp
85.558 47.5279 mo
85.9428 47.1526 86.3209 46.7653 86.7024 46.3839 cv
86.3223 46.7677 85.9415 47.1503 85.558 47.5279 cv
cp
113.951 40.8681 mo
114.246 42.4335 li
113.102 42.2498 112.015 41.8035 110.926 41.2944 cv
110.696 41.1868 110.494 41.1262 110.292 41.067 cv
102.169 33.5251 li
107.444 40.0952 li
105.597 39.1109 li
107.255 41.2675 li
104.766 41.8046 102.297 42.4871 99.8441 43.2571 cv
97.2237 44.0798 94.6208 44.9929 92.0168 45.8998 cv
91.5888 46.049 91.16 46.194 90.7318 46.3427 cv
95.3225 41.3882 li
88.7741 46.5828 li
92.3477 42.8758 95.9615 38.6958 99.6529 34.027 cv
103.88 37.625 li
100.704 32.7056 li
100.72 32.6848 100.736 32.666 100.752 32.6452 cv
100.844 32.5262 101.074 32.3998 101.317 32.3998 cv
101.398 32.3998 101.454 32.414 101.488 32.4258 cv
106.344 34.1565 111.251 36.7389 116.406 40.2444 cv
115.981 40.8054 115.553 41.3633 115.145 41.9451 cv
113.951 40.8681 li
cp
146.253 65.3689 mo
141.237 59.7931 136.106 54.4081 130.698 49.5079 cv
129.582 48.4968 128.458 47.5024 127.324 46.5287 cv
125.057 44.5814 122.753 42.7176 120.404 40.9726 cv
116.882 38.3551 113.259 36.005 109.515 34.0407 cv
107.018 32.7312 104.467 31.5933 101.854 30.6621 cv
101.853 30.6618 101.852 30.6619 101.851 30.6616 cv
101.677 30.6 101.5 30.5718 101.325 30.5733 cv
101.322 30.5733 101.32 30.572 101.317 30.572 cv
101.302 30.572 101.288 30.582 101.273 30.5824 cv
101.086 30.5905 100.904 30.6371 100.726 30.7122 cv
100.366 30.833 100.024 31.0204 99.7746 31.3407 cv
97.4041 34.3899 94.9698 37.3455 92.4683 40.1909 cv
87.974 35.8139 83.365 31.5772 78.6406 27.4996 cv
78.64 27.4993 li
78.4397 27.3263 78.2188 27.2066 77.9917 27.1135 cv
77.9516 27.097 77.9138 27.0779 77.8731 27.064 cv
77.8417 27.053 77.8122 27.0347 77.7805 27.0254 cv
77.812 27.0347 77.8416 27.0531 77.8728 27.064 cv
77.6353 26.9821 77.3906 26.9331 77.1455 26.9331 cv
76.4238 26.9331 75.7083 27.2822 75.2288 27.9477 cv
71.8653 32.6161 68.5018 37.2846 65.1382 41.953 cv
65.1382 41.9529 li
64.9386 42.2299 64.739 42.507 64.5393 42.7842 cv
63.9502 42.1426 63.359 41.5038 62.7712 40.861 cv
60.1076 37.9481 57.4675 34.965 54.9656 31.811 cv
52.4636 28.6569 50.0996 25.3321 47.9878 21.7362 cv
47.8921 21.5732 47.7839 21.4321 47.669 21.306 cv
47.6313 21.2647 47.59 21.2338 47.5506 21.1965 cv
47.4696 21.1198 47.3878 21.0468 47.3006 20.9873 cv
47.251 20.9533 47.2 20.9276 47.1487 20.8994 cv
47.0658 20.8536 46.9825 20.813 46.8963 20.7822 cv
46.8411 20.7626 46.7864 20.7473 46.7303 20.7338 cv
46.6434 20.7129 46.5567 20.7004 46.4685 20.6946 cv
46.4346 20.6924 46.4015 20.6796 46.3675 20.6796 cv
46.3515 20.6796 46.3358 20.6897 46.3197 20.6903 cv
46.1259 20.6963 45.9337 20.7377 45.7457 20.8185 cv
45.7117 20.8331 45.6798 20.8531 45.6461 20.8702 cv
45.4519 20.9689 45.2629 21.0961 45.0909 21.2795 cv
45.0906 21.2798 li
42.2245 24.3386 39.205 27.1773 36.1175 29.9185 cv
34.5738 31.289 33.0131 32.6352 31.4461 33.9725 cv
28.3121 36.6469 25.1527 39.2854 22.0535 42.0107 cv
17.4047 46.0988 12.8912 50.3824 8.80114 55.2764 cv
5.92203 58.7214 2.98341 62.08 0 65.3689 cv
146.253 65.3689 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.247059 .247059 .247059 rgb
f
285.793 63.8366 mo
285.215 63.5517 284.858 62.9659 284.532 62.4102 cv
283.699 62.2306 282.652 62.4132 281.801 62.3648 cv
280.95 62.3165 280.08 62.2023 279.328 61.8013 cv
278.575 61.4004 277.956 60.6612 277.905 59.8102 cv
278.538 59.546 278.469 58.3656 278.198 57.7348 cv
277.927 57.1041 277.35 56.6669 276.793 56.2656 cv
276.237 55.8642 275.653 55.4422 275.356 54.8233 cv
275.173 54.2514 li
274.727 53.1362 273.862 52.1683 273.995 50.9748 cv
274.167 49.4187 274.736 47.9375 275.096 46.4138 cv
275.456 44.89 275.594 43.2285 274.937 41.8076 cv
275.007 41.1709 275.953 40.9352 276.514 41.2454 cv
277.074 41.5556 277.374 42.1747 277.673 42.7412 cv
278.959 45.1779 280.856 47.2843 283.132 48.8362 cv
284.042 47.7827 li
282.663 53.1417 li
282.57 53.0933 li
282.896 53.6678 283.468 54.0657 283.923 54.5524 cv
284.957 55.6603 285.309 57.3596 284.799 58.7871 cv
284.905 58.6868 285.252 59.0108 285.358 58.9105 cv
286.818 60.4291 288.391 62.0156 290.436 62.5217 cv
289.635 62.7113 288.901 63.2419 288.163 63.6062 cv
287.425 63.9706 286.531 64.2005 285.793 63.8366 cv
cp
181.577 47.3391 mo
182.247 49.0515 li
182.406 48.8873 182.649 48.78 182.902 48.7579 cv
183.378 48.7163 183.851 48.9066 184.237 49.1882 cv
184.623 49.4698 184.935 49.8385 185.243 50.2035 cv
185.687 49.7152 185.879 49.0632 185.856 48.4035 cv
185.805 46.8927 184.452 45.644 184.46 44.1323 cv
184.463 43.4474 184.681 42.5505 185.113 42.0192 cv
185.545 41.4878 186.121 41.0965 186.689 40.7132 cv
186.525 39.8412 186.598 38.7873 187.019 38.0062 cv
187.108 37.8409 187.222 37.6708 187.4 37.6096 cv
187.703 37.505 188.007 37.7642 188.187 38.0293 cv
188.438 38.3999 188.605 38.8276 188.67 39.2707 cv
188.693 39.4268 188.705 39.5876 188.767 39.7327 cv
188.829 39.8779 188.956 40.0081 189.114 40.0202 cv
189.935 38.4129 188.893 36.1438 189.648 34.5045 cv
189.915 33.9254 190.379 33.4641 190.833 33.0163 cv
191.206 32.6484 191.467 32.5158 191.987 32.4532 cv
191.265 34.5817 191.047 36.8798 191.357 39.1061 cv
191.809 42.3477 194.556 45.0331 196.244 47.8909 cv
198.137 49.9461 li
196.233 48.9905 li
195.839 50.2386 196.32 51.9722 195.604 53.0491 cv
194.981 53.9843 193.564 54.3108 193.258 55.3917 cv
192.856 56.8134 192.472 58.2273 191.984 59.6217 cv
191.809 60.1198 191.637 60.6828 191.869 61.1572 cv
190.701 62.5021 188.455 63.3081 186.756 62.775 cv
186.653 61.8935 187.3 61.089 187.862 60.469 cv
188.995 59.2189 189.015 57.8713 189.06 56.2271 cv
189.098 54.897 188.74 53.672 188.831 52.3443 cv
188.921 51.0167 188.942 49.5917 188.227 48.4691 cv
187.898 47.9518 187.416 47.491 187.227 46.9272 cv
187.458 47.9957 187.512 49.1177 187.091 50.1208 cv
186.868 50.6529 186.487 51.1017 186.199 51.602 cv
185.618 52.6123 185.433 53.8114 185.476 54.9761 cv
185.519 56.1407 185.778 57.2853 186.036 58.4219 cv
185.017 59.5824 184.156 61.1277 184.047 62.6685 cv
182.55 62.6807 180.831 62.6271 179.334 62.6393 cv
179.087 62.6413 178.821 62.6375 178.622 62.4917 cv
178.357 62.2971 178.306 61.9062 178.408 61.593 cv
178.509 61.2797 178.728 61.0213 178.926 60.7585 cv
179.884 59.4882 180.446 57.923 180.514 56.3332 cv
180.55 55.4882 181.126 54.8468 181.617 54.1538 cv
181.577 47.3391 li
cp
231.225 3.60523 mo
231.09 5.39975 230.377 7.14624 229.217 8.52213 cv
229.268 8.99866 229.668 9.07494 230.135 9.18046 cv
230.603 9.28603 231.122 9.32384 231.473 9.65077 cv
231.893 10.0429 231.903 10.7337 231.65 11.2502 cv
231.398 11.7667 230.942 12.1488 230.497 12.5125 cv
230.052 12.8763 229.592 13.2531 229.33 13.7645 cv
228.815 14.7692 227.31 15.1185 226.686 16.0594 cv
226.062 17.0004 225.848 18.301 226.456 19.2521 cv
227.814 18.6944 229.599 18.6118 230.544 19.7338 cv
231.489 20.8558 231.611 22.5969 230.831 23.8396 cv
230.014 25.1412 231.454 27.3926 232.716 28.2695 cv
232.874 28.3789 233.05 28.4909 233.112 28.6722 cv
233.225 28.9987 232.917 29.3035 232.659 29.5332 cv
231.537 30.5318 230.798 31.9506 230.623 33.4424 cv
232.017 33.4038 233.481 33.5592 234.87 33.6824 cv
235.229 33.7142 235.61 33.7602 235.891 33.986 cv
236.484 34.4633 236.3 35.3838 236.177 36.1349 cv
235.844 38.1628 236.426 40.3229 237.731 41.91 cv
237.731 41.91 234.98 43.9747 234.169 45.8891 cv
233.559 47.3309 233.747 48.9817 233.622 50.5425 cv
233.496 52.1033 233.158 53.7376 232.106 54.8975 cv
231.255 54.8503 230.184 55.0355 229.395 55.3614 cv
228.607 55.6873 227.948 56.4962 228.087 57.338 cv
228.202 58.039 228.804 58.5429 229.371 58.9706 cv
230.567 59.8726 232.855 58.7708 234.112 57.9549 cv
235.553 57.019 237.025 56.0553 238.062 54.6855 cv
239.254 53.1121 239.96 50.9463 241.796 50.2233 cv
241.722 52.0758 241.406 54.7789 239.982 55.9663 cv
239.272 56.5588 238.287 56.8881 237.86 57.7086 cv
237.037 59.2891 238.915 61.267 238.211 62.9042 cv
234.157 64.3462 229.554 61.7876 225.408 62.8155 cv
225.609 63.6573 225.813 64.2877 225.813 64.2877 cv
225.813 64.2877 224.795 63.17 223.952 61.8582 cv
223.432 61.0765 222.989 60.2368 222.718 59.6906 cv
221.842 59.0331 220.367 58.7351 219.34 58.5424 cv
218.14 58.3171 216.955 58.7185 215.79 58.1163 cv
214.739 57.5725 213.987 56.4513 213.968 55.2678 cv
213.951 54.2051 214.498 53.1939 215.246 52.439 cv
215.995 51.6842 216.933 51.15 217.871 50.65 cv
218.724 50.1952 218.449 48.9082 217.965 48.0712 cv
217.754 47.7055 217.46 47.4051 217.131 47.142 cv
211.494 45.8701 li
214.139 45.6397 li
213.897 45.5033 213.666 45.3515 213.47 45.1516 cv
212.271 43.9313 212.595 41.7054 211.312 40.5747 cv
212.264 40.4664 212.784 38.9179 212.719 37.9619 cv
212.653 37.0059 212.111 36.157 211.578 35.3607 cv
211.236 34.8496 210.897 34.3191 210.661 33.7556 cv
207.637 30.3038 li
209.324 31.1135 li
209 30.5192 208.675 29.925 208.267 29.4543 cv
207.955 29.0944 207.637 28.7233 207.475 28.2753 cv
207.314 27.8273 207.341 27.2784 207.669 26.9322 cv
207.996 26.586 208.656 26.5752 208.903 26.9824 cv
209.967 27.4429 211.315 27.6272 212.467 27.7535 cv
213.62 27.8797 214.873 27.6171 215.69 26.7943 cv
216.41 26.0696 216.36 24.8578 217.159 24.2214 cv
217.445 23.9935 217.368 23.4645 217.204 23.1377 cv
217.039 22.811 216.675 22.6427 216.329 22.5222 cv
215.984 22.4017 215.612 22.2929 215.367 22.0212 cv
215.122 21.7495 215.091 21.2494 215.406 21.0637 cv
215.699 20.0081 216.803 18.8155 217.725 18.2229 cv
218.646 17.6302 219.663 17.182 220.523 16.5033 cv
221.383 15.8245 222.095 14.8343 222.075 13.7388 cv
223.564 13.5499 225.288 12.5724 226.029 11.2663 cv
226.671 10.1336 226.834 8.79158 227.367 7.6036 cv
231.225 3.60523 li
cp
242.832 20.0282 mo
243.01 18.8865 243.289 17.7314 243.116 16.589 cv
242.941 15.4428 242.326 14.4182 241.724 13.4275 cv
242.937 13.9571 243.93 14.7342 244.386 15.9769 cv
244.722 16.8911 244.779 17.8807 244.983 18.8331 cv
245.572 21.5839 248.133 23.5218 249.128 26.1533 cv
249.456 27.0213 249.52 27.9871 249.311 28.8911 cv
249.247 29.1667 249.165 29.4823 249.331 29.7117 cv
249.477 29.9146 249.755 29.9592 250.003 29.9932 cv
251.902 30.2538 253.852 31.0265 255.53 31.9534 cv
255.889 33.2873 257.604 33.7956 258.224 35.0227 cv
258.736 33.4802 li
259.079 38.7924 li
259.319 39.0223 259.589 39.2317 259.851 39.4304 cv
260.444 39.881 261.064 40.4562 261.084 41.2012 cv
261.09 41.4144 261.045 41.6312 261.092 41.8393 cv
261.18 42.2297 261.558 42.4735 261.903 42.6752 cv
262.647 43.1089 263.553 43.5946 264.296 44.0283 cv
263.756 44.7295 263.009 45.2689 262.173 45.5602 cv
261.768 45.7015 261.311 45.8067 261.051 46.1486 cv
260.685 46.6312 260.681 47.4947 260.822 48.0842 cv
261.453 50.7261 260.896 53.6285 259.331 55.8491 cv
259.094 56.1859 258.942 56.4629 259.04 56.863 cv
258.533 56.579 258.445 55.8899 258.49 55.3107 cv
258.555 54.4841 258.77 53.6771 258.889 52.8565 cv
259.008 52.036 259.025 51.1723 258.708 50.406 cv
258.462 49.811 257.932 49.2516 257.32 49.0131 cv
257.292 49.5012 257.287 49.9622 257.302 50.359 cv
257.329 51.1704 257.404 51.716 257.404 51.716 cv
257.404 51.716 257.177 51.218 256.914 50.4288 cv
256.646 49.6414 256.374 48.551 256.228 47.4202 cv
256.084 46.2915 256.069 45.1296 256.133 44.255 cv
256.146 44.0621 256.161 43.8861 256.177 43.7244 cv
256.074 43.5137 255.929 43.3315 255.726 43.2148 cv
255.317 42.9796 254.421 43.2083 254.393 43.6792 cv
252.718 42.1286 251.137 40.4776 249.66 38.7381 cv
249.525 38.5791 249.386 38.4119 249.336 38.2096 cv
249.247 37.8567 249.456 37.483 249.75 37.2684 cv
250.044 37.0539 250.476 36.9283 250.83 36.8434 cv
250.402 33.6025 248.626 30.582 246.069 28.5617 cv
245.522 28.2822 244.661 27.8707 243.732 27.5444 cv
242.196 26.9742 240.529 26.6777 240.529 26.6777 cv
240.529 26.6777 241.779 26.4206 243.248 26.3266 cv
242.542 24.3321 242.506 22.1286 242.832 20.0282 cv
cp
171.424 54.9049 mo
171.705 53.6986 171.933 52.4543 172.868 51.5701 cv
174.382 50.1389 175.329 48.2084 175.494 46.2184 cv
175.551 45.527 175.517 44.8297 175.617 44.1424 cv
175.718 43.455 175.971 42.7574 176.507 42.2694 cv
176.51 43.2375 176.503 44.0456 176.507 45.0137 cv
176.511 46.1331 176.712 47.3032 177.359 48.2478 cv
176.756 48.6456 176.351 49.289 176.276 49.9681 cv
176.2 50.6471 176.581 51.3824 177.085 51.88 cv
176.679 52.1474 176.152 52.2056 175.645 52.2843 cv
174.387 55.2742 li
173.931 53.4358 li
173.5 54.233 173.12 55.1342 172.557 55.8419 cv
172.267 56.2067 172.273 56.7061 172.388 57.1446 cv
172.503 57.583 172.713 57.9988 172.792 58.444 cv
172.901 59.0543 172.757 59.6856 172.496 60.2568 cv
172.235 60.828 172.016 61.1356 171.644 61.6524 cv
171.89 61.2625 171.749 60.7505 171.457 60.3912 cv
171.165 60.0319 170.747 59.7813 170.369 59.4983 cv
169.991 59.2153 169.81 58.6137 169.71 58.1736 cv
170.747 57.3916 171.143 56.1112 171.424 54.9049 cv
cp
303.167 60.4023 mo
302.244 59.4032 301 58.7133 299.902 58.1046 cv
299.756 58.0233 299.61 57.9429 299.468 57.8627 cv
298.654 55.82 296.778 54.4145 294.505 54.1413 cv
293.24 51.7164 290.365 48.858 289.405 47.9395 cv
288.056 45.6711 287.019 44.3448 286.015 43.0609 cv
285.004 41.7679 284.049 40.5466 282.753 38.3433 cv
282.439 37.8102 281.877 37.5133 281.3 37.5132 cv
281.011 37.5132 280.718 37.5879 280.45 37.7449 cv
279.129 38.5199 278.082 38.9955 276.973 39.499 cv
276.272 39.8172 275.557 40.142 274.767 40.5461 cv
274.053 39.1226 273.233 37.6367 272.16 36.5269 cv
270.243 34.5428 267.801 33.1357 265.056 32.424 cv
264.093 30.262 262.525 28.373 260.568 27.0389 cv
258.514 25.6383 256.478 24.883 254.366 24.7417 cv
253.527 23.0814 252.811 21.2794 252.115 19.528 cv
251.753 18.619 li
251.497 17.9784 250.877 17.5614 250.191 17.5614 cv
250.169 17.5614 250.146 17.5618 250.124 17.5627 cv
249.445 17.5895 248.766 17.6441 248.11 17.6969 cv
247.843 17.7184 247.581 17.7394 247.324 17.7584 cv
246.08 15.2205 244.59 12.3654 242.786 9.61435 cv
242.47 9.13114 241.936 8.85374 241.378 8.85368 cv
241.221 8.85368 241.062 8.87583 240.905 8.9217 cv
240.316 9.09426 239.709 9.22968 239.067 9.37305 cv
238.917 9.40634 238.767 9.43989 238.615 9.47426 cv
238.132 7.98874 237.577 6.4931 236.781 5.06701 cv
235.832 3.36717 234.435 1.27289 232.038 .157352 cv
231.809 .0510636 231.567 0 231.328 0 cv
230.8 0 230.285 .249102 229.96 .701226 cv
229.413 1.46297 228.938 2.30922 228.511 3.1793 cv
228.327 3.05329 228.117 2.96328 227.89 2.91823 cv
227.781 2.89645 227.671 2.88576 227.562 2.88576 cv
227.09 2.88576 226.635 3.0838 226.312 3.44089 cv
224.995 4.89939 223.823 6.5586 222.689 8.1632 cv
221.159 10.3282 219.714 12.3731 217.961 13.9475 cv
215.126 16.4952 212.411 19.6027 209.872 23.2059 cv
209.784 23.0814 209.696 22.9621 209.61 22.8512 cv
209.29 22.4384 208.798 22.2003 208.281 22.2003 cv
208.229 22.2003 208.176 22.2027 208.124 22.2076 cv
207.551 22.2612 207.045 22.6039 206.782 23.1161 cv
206.151 24.3488 205.731 25.6517 205.325 26.9116 cv
204.68 28.9148 204.07 30.8068 202.724 31.9632 cv
201.118 33.3436 199.64 35.1853 198.433 37.2749 cv
198.231 36.6405 198.031 36.0056 197.833 35.3775 cv
197.208 33.3901 196.562 31.3349 195.857 29.4016 cv
195.686 28.932 195.315 28.5628 194.845 28.3938 cv
194.66 28.3275 194.468 28.2948 194.276 28.2948 cv
193.979 28.2948 193.684 28.3732 193.422 28.5271 cv
191.121 29.8808 189.181 31.7513 187.306 33.5603 cv
187.049 33.8083 li
185.104 35.6815 183.546 38.0559 182.256 41.1395 cv
181.957 40.8876 181.575 40.7428 181.17 40.7428 cv
181.167 40.7428 181.164 40.7428 181.161 40.7428 cv
180.53 40.7466 179.954 41.1025 179.669 41.6651 cv
179.579 41.8423 179.498 42.0196 179.423 42.1967 cv
179.271 41.8819 179.12 41.5769 178.976 41.2845 cv
178.7 40.7259 178.137 40.3654 177.514 40.3479 cv
177.498 40.3474 177.482 40.3472 177.467 40.3472 cv
176.862 40.3472 176.302 40.672 176.002 41.2004 cv
173.241 46.0724 170.95 51.239 169.192 56.5564 cv
168.519 58.5911 167.397 60.5153 165.661 62.6119 cv
165.245 63.1142 165.156 63.8117 165.434 64.4019 cv
165.711 64.9921 166.305 65.3689 166.957 65.3689 cv
303.234 65.3689 li
303.778 65.3689 304.289 65.1059 304.605 64.663 cv
304.921 64.2201 305.003 63.6517 304.826 63.1374 cv
304.489 62.1578 303.915 61.212 303.167 60.4023 cv
cp
f
406.009 29.7938 mo
406.025 29.8111 li
406.477 29.7048 li
407.35 29.4995 408.141 29.2043 408.891 28.9773 cv
409.458 30.6888 410.08 32.3458 410.624 33.9999 cv
409.152 32.9925 407.33 31.7963 406.444 31.1054 cv
406.267 30.6624 406.142 30.2229 406.009 29.7938 cv
cp
333.561 43.4133 mo
333.572 43.4124 li
333.541 43.4166 333.527 43.4172 333.561 43.4133 cv
cp
467.624 55.8667 mo
462.349 55.2563 li
458.363 47.0582 li
458.223 46.77 li
457.92 46.6402 li
455.151 45.4513 li
453.766 44.8568 li
453.074 44.5595 li
452.728 44.4109 li
452.478 44.2893 li
451.836 43.9343 451.263 43.1524 450.73 42.3117 cv
450.182 41.4651 449.69 40.5187 448.924 39.6098 cv
448.648 39.2826 li
448.225 39.3222 li
447.574 39.3831 446.971 39.5932 446.464 39.7773 cv
446.178 39.8817 445.918 39.9654 445.668 40.0317 cv
445.436 39.41 445.262 38.7393 445.089 38.0247 cv
444.857 37.0743 444.592 36.0372 444.13 35.0579 cv
443.755 34.2642 li
442.993 34.6539 li
442.602 34.8543 442.283 35.185 442.055 35.468 cv
440.697 31.6433 li
440.101 29.9653 li
439.181 31.4713 li
435.006 38.2995 li
434.878 38.5097 li
434.878 38.7782 li
434.88 39.8782 435.021 40.8907 435.075 41.8378 cv
434.375 42.0224 433.609 42.1341 432.803 42.2916 cv
432.543 42.3433 432.278 42.4003 432.01 42.471 cv
431.878 42.5039 431.738 42.5444 431.594 42.5888 cv
431.201 42.7214 li
430.673 42.9177 430.165 43.1619 429.68 43.4373 cv
428.064 44.3727 426.765 45.6008 425.446 46.6507 cv
424.706 44.9049 424.071 43.0439 423.218 41.213 cv
423.016 40.7785 li
422.571 40.7218 li
421.426 40.5755 420.416 40.7337 419.535 40.7194 cv
419.521 40.5862 419.507 40.4538 419.496 40.3012 cv
419.467 39.897 419.422 39.4071 419.302 38.9344 cv
419.217 38.5989 li
418.948 38.41 li
412.35 33.7844 li
411.671 31.6674 410.871 29.6455 410.236 27.6115 cv
409.994 26.8386 li
409.256 27.0121 li
408.277 27.2421 407.404 27.5787 406.575 27.8119 cv
405.375 26.4868 404.211 25.1149 403.04 23.7294 cv
401.101 21.4628 li
400.105 20.3401 li
399.614 19.7935 li
399.194 19.282 li
398.814 18.7268 li
398.474 18.1317 li
398.264 17.7186 398.067 17.2935 397.891 16.8489 cv
397.54 15.9594 397.252 15.0142 396.964 14.0474 cv
396.675 13.0803 396.386 12.0884 396.024 11.0987 cv
395.845 10.6035 395.64 10.1109 395.415 9.62394 cv
395.187 9.1366 394.922 8.66385 394.637 8.19972 cv
393.81 6.85472 li
393.176 8.31569 li
389.22 17.4354 li
386.749 17.6723 li
386.18 17.7269 li
386.034 18.3448 li
385.595 20.1995 385.394 22.0202 385.025 23.7259 cv
384.308 24.0404 383.53 24.2984 382.723 24.5504 cv
381.777 24.8486 380.796 25.1404 379.81 25.6239 cv
379.425 25.8122 li
379.342 26.2368 li
378.473 30.7017 li
378.299 30.6471 li
377.731 30.4687 li
377.52 30.414 377.311 30.3496 376.97 30.3403 cv
376.376 30.3242 li
376.176 30.9298 li
373.653 38.5453 li
373.378 38.7074 373.064 38.8541 372.699 39.004 cv
372.52 39.0789 372.329 39.1597 372.134 39.2482 cv
372.088 39.0951 372.043 38.9432 371.998 38.7877 cv
371.849 38.2862 371.72 37.7852 371.479 37.2039 cv
371.171 36.4606 li
370.451 36.7211 li
370.045 36.868 369.768 37.034 369.49 37.182 cv
369.464 37.1963 369.44 37.2083 369.414 37.2225 cv
369.11 36.587 368.812 35.9048 368.443 35.2147 cv
368.154 34.6756 li
367.581 34.7735 li
366.163 35.0153 364.877 35.4532 363.635 35.7104 cv
360.951 32.2572 358.524 28.5146 355.747 24.9915 cv
354.968 24.0029 li
354.372 25.113 li
352.3 28.9732 li
352.038 29.4566 li
351.786 29.8928 li
351.704 30.0267 351.62 30.1533 351.551 30.2333 cv
351.476 30.3327 351.437 30.3417 351.431 30.3504 cv
351.433 30.3555 351.411 30.3606 351.314 30.3567 cv
351.229 30.3555 351.081 30.3245 350.937 30.2911 cv
350.637 30.219 350.298 30.1192 349.96 30.0251 cv
349.35 29.8549 li
349.022 30.4297 li
345.722 36.2159 li
344.296 36.7368 342.9 37.404 341.604 38.2726 cv
340.318 39.1314 339.145 40.1919 338.123 41.3902 cv
336.98 41.4844 335.807 41.4717 334.578 41.5278 cv
334.251 41.5429 333.897 41.5658 333.573 41.5955 cv
333.451 41.6063 li
333.421 41.609 li
333.517 41.593 333.128 41.6291 332.951 41.8033 cv
332.902 41.8432 332.858 41.8871 332.821 41.9314 cv
332.781 41.9849 li
332.733 42.0609 li
332.703 42.11 332.672 42.1742 332.655 42.2157 cv
332.573 42.433 332.562 42.5271 332.537 42.6397 cv
332.496 42.8506 332.471 43.0325 332.446 43.2162 cv
332.354 43.9393 332.293 44.6318 332.23 45.3281 cv
332.043 47.3885 li
331.986 47.8733 li
331.977 47.9499 331.96 48.0288 331.968 48.0099 cv
331.975 48.0045 331.924 48.1514 331.905 48.2147 cv
331.753 48.6777 li
331.75 48.6869 331.748 48.6913 331.744 48.6996 cv
331.416 48.893 li
330.994 49.174 li
330.76 49.3252 330.498 49.4633 330.222 49.5953 cv
329.666 49.8601 329.055 50.0926 328.414 50.4028 cv
328.036 50.5859 li
327.941 51.0216 li
327.263 54.1467 li
323.971 55.2138 li
323.561 55.3471 li
323.453 55.7702 li
323.452 55.7732 li
323.24 57.4042 323.453 58.807 323.314 60.2802 cv
323.9 59.1599 324.293 57.879 324.819 56.8294 cv
324.954 56.7853 li
329.686 59.0124 li
328.918 54.5371 li
329.49 51.9015 li
335.404 57.4281 li
333.028 49.9093 li
333.087 49.8385 333.142 49.766 333.17 49.7032 cv
333.261 49.536 333.3 49.4205 333.336 49.3234 cv
333.507 48.8034 li
333.538 48.7014 333.549 48.6875 333.596 48.5133 cv
333.639 48.3248 333.649 48.2323 333.663 48.137 cv
333.726 47.5877 li
333.917 45.4996 li
333.979 44.8131 334.04 44.1219 334.124 43.4682 cv
334.128 43.4337 334.134 43.4054 334.139 43.3712 cv
334.171 43.3689 334.205 43.3666 334.237 43.3646 cv
339.181 51.1666 li
339.906 42.0051 li
340.693 41.173 341.564 40.4351 342.504 39.8066 cv
343.756 38.9675 345.126 38.3194 346.552 37.8212 cv
346.85 37.7174 li
347.012 37.4318 li
350.142 31.9462 li
350.221 31.968 350.304 31.9892 350.387 32.0106 cv
352.206 38.0401 li
352.472 31.7725 li
352.611 31.6615 352.731 31.5454 352.815 31.4392 cv
352.978 31.2436 353.092 31.0637 353.201 30.8886 cv
353.308 30.714 353.405 30.5438 353.496 30.3782 cv
353.756 29.899 li
354.852 27.8565 li
354.6 29.6714 354.476 32.0881 353.984 32.7743 cv
354.37 33.4467 354.86 34.1002 355.246 34.7726 cv
354.566 36.1125 353.876 37.7968 353.196 39.1367 cv
353.951 41.9027 355.057 45.001 355.812 47.767 cv
356.677 46.128 357.636 44.1821 358.501 42.543 cv
358.181 40.5591 358.026 38.3387 357.706 36.3548 cv
358.479 35.4951 359.251 34.6355 360.023 33.7758 cv
360.877 34.9579 361.741 36.1353 362.649 37.2873 cv
362.757 37.4246 li
360.551 41.3269 li
362.889 39.9911 365.225 38.6552 367.563 37.3194 cv
367.793 37.8138 368.03 38.3275 368.308 38.8468 cv
368.652 39.4897 li
369.3 39.2553 li
369.611 39.1425 369.847 39.0185 370.065 38.9 cv
370.065 46.3008 li
373.886 40.4437 li
374.188 40.3064 374.501 40.1459 374.813 39.9258 cv
375.048 39.7599 li
375.138 39.4875 li
377.429 32.5716 li
380.727 46.3008 li
387.028 50.6008 li
384.063 43.8112 li
388.351 45.0689 li
379.991 31.793 li
380.866 27.297 li
386.622 30.7601 li
387.265 20.895 li
387.35 20.3924 387.445 19.8984 387.547 19.4126 cv
389.888 19.1881 li
390.346 19.1443 li
390.545 18.6861 li
393.878 11.002 li
393.86 14.5219 393.955 19.6654 393.896 22.5894 cv
395.265 24.1454 396.757 25.9916 398.127 27.5476 cv
397.794 27.8901 397.567 28.4463 397.234 28.7889 cv
397.393 29.5992 397.776 30.4207 397.936 31.2311 cv
399.341 32.5505 400.831 34.0136 402.236 35.333 cv
404.72 34.8408 408.398 35.1153 411.241 35.1723 cv
417.723 39.7172 li
417.76 39.9395 417.788 40.1719 417.807 40.4473 cv
417.836 40.8514 417.881 41.3413 418.001 41.8141 cv
418.152 42.4073 li
418.709 42.4786 li
419.729 42.6087 420.642 42.4918 421.452 42.4739 cv
421.343 54.7841 li
425.497 48.8413 li
425.583 48.779 li
427.354 47.5032 428.819 45.9783 430.48 45.0334 cv
430.894 44.7987 431.317 44.5957 431.752 44.4334 cv
432.088 44.3211 li
432.411 44.23 li
432.637 44.1702 432.872 44.1194 433.112 44.0717 cv
434.071 43.8789 435.132 43.7592 436.22 43.3691 cv
436.794 43.163 li
436.793 42.5122 li
436.791 41.2474 436.604 40.0979 436.582 39.0322 cv
439.698 33.9343 li
439.718 33.9897 li
439.373 37.1017 438.943 41.4635 438.618 44.2868 cv
440.004 46.1142 441.377 48.092 442.764 49.9194 cv
443.864 47.4553 444.963 44.3119 446.062 41.7952 cv
446.4 41.7063 446.718 41.5972 447.004 41.4935 cv
447.319 41.3785 447.601 41.292 447.875 41.2244 cv
447.549 43.7812 446.782 46.9772 447.043 49.4384 cv
448.424 48.1325 449.837 46.8551 451.226 45.5559 cv
451.376 45.6705 451.517 45.7914 451.689 45.8918 cv
452.118 46.1003 li
452.464 46.249 li
453.157 46.5462 li
454.541 47.1407 li
456.647 48.0447 li
455.844 48.9742 455.04 49.9037 454.237 50.8332 cv
455.909 51.6299 457.829 52.553 459.516 53.3572 cv
461.059 56.5309 li
461.264 56.952 li
461.715 57.0041 li
467.035 57.6198 li
468.185 60.2802 li
468.406 56.5944 li
468.444 55.9652 li
467.668 55.872 li
467.624 55.8667 li
cp
f
409.55 44.4882 mo
407.124 44.1431 401.47 40.6684 399.336 39.9505 cv
391.634 48.1371 li
399.763 42.2384 li
400.364 43.9664 401.297 46.0524 401.034 46.8454 cv
401.86 47.3035 402.807 47.7011 403.633 48.1593 cv
403.445 49.6765 403.417 51.515 403.228 53.0322 cv
405.571 55.2645 408.524 57.6562 410.866 59.8885 cv
411.138 58.0188 411.376 55.827 411.648 53.9574 cv
410.249 52.2639 408.939 50.284 407.539 48.5905 cv
408.21 47.2231 408.88 45.8556 409.55 44.4882 cv
cp
f
355.673 54.0168 mo
362.168 47.5409 li
365.612 60.2965 li
365.612 53.8087 li
367.342 55.4683 li
369.142 51.5455 li
361.278 45.8302 li
355.673 54.0168 li
cp
f
433.878 49.9194 mo
430.267 55.6176 li
434.451 51.6302 li
440.028 59.0313 li
441.157 54.7841 li
437.557 52.9017 li
433.878 49.9194 li
cp
f
396.096 36.0032 mo
393.126 35.7754 li
390.628 25.5233 li
392.16 37.4169 li
392.16 37.4169 396.046 36.0032 396.096 36.0032 cv
cp
f
348.112 48.2622 mo
346.637 48.2622 li
345.269 42.1903 li
345.686 50.0659 li
351.536 51.9588 li
349.171 50.299 li
348.112 48.2622 li
cp
f
594.942 34.7818 mo
598.438 42.1284 li
596.158 35.0367 li
607.334 37.9152 li
602.853 37.5246 li
606.584 41.3963 li
607.78 44.6362 li
605.857 42.5762 li
606.448 46.115 li
606.435 46.1206 606.422 46.1269 606.409 46.1324 cv
604.288 42.6983 li
604.624 45.3945 li
603.019 42.9984 li
603.182 46.7056 li
601.728 44.7516 li
601.571 46.8478 li
599.83 43.7372 li
599.674 47.168 li
598.41 44.7533 li
598.02 46.8901 li
597.025 43.3826 li
595.897 47.3594 li
595.31 45.5585 li
594.589 47.117 li
594.093 45.7812 li
592.993 47.508 li
592.917 46.5701 li
587.131 56.6402 li
591.221 45.7352 li
590.439 46.2185 li
592.087 43.269 li
588.951 45.319 li
592.54 40.6341 li
586.752 44.2642 li
587.4 43.5146 li
594.942 34.7818 li
cp
613.029 55.4442 mo
612.737 54.9857 612.398 54.4507 612.033 53.8776 cv
611.684 53.2959 611.312 52.6754 610.939 52.0549 cv
610.585 51.4234 610.232 50.7919 609.9 50.1998 cv
609.583 49.5993 609.287 49.0387 609.034 48.5582 cv
608.56 47.5781 608.245 46.9245 608.245 46.9245 cv
608.245 46.9245 608.655 47.5229 609.271 48.4206 cv
609.563 48.8791 609.903 49.414 610.267 49.9872 cv
610.616 50.5688 610.989 51.1892 611.362 51.8097 cv
611.715 52.441 612.069 53.0725 612.401 53.6646 cv
612.718 54.2651 613.013 54.8255 613.267 55.306 cv
613.74 56.2864 614.056 56.94 614.056 56.94 cv
614.056 56.94 613.645 56.3416 613.029 55.4442 cv
cp
597.29 48.6895 mo
597.313 48.983 597.338 49.2961 597.363 49.6091 cv
597.366 49.9232 597.369 50.2372 597.372 50.5316 cv
597.357 50.8267 597.344 51.1022 597.333 51.3384 cv
597.271 51.8123 597.23 52.1283 597.23 52.1283 cv
597.23 52.1283 597.161 51.8172 597.058 51.3505 cv
597.025 51.1163 596.988 50.8431 596.948 50.5504 cv
596.924 50.2568 596.9 49.9438 596.875 49.6307 cv
596.872 49.3167 596.869 49.0027 596.867 48.7082 cv
596.881 48.4131 596.894 48.1376 596.906 47.9015 cv
596.967 47.4276 597.008 47.1116 597.008 47.1116 cv
597.008 47.1116 597.077 47.4227 597.18 47.8894 cv
597.212 48.1236 597.25 48.3968 597.29 48.6895 cv
cp
504.137 49.7454 mo
503.882 50.0174 503.645 50.2713 503.441 50.4888 cv
503.003 50.8997 502.711 51.1737 502.711 51.1737 cv
502.711 51.1737 502.918 50.8308 503.227 50.3164 cv
503.397 50.0714 503.595 49.7855 503.808 49.4792 cv
504.033 49.1835 504.273 48.868 504.514 48.5527 cv
504.772 48.2511 505.029 47.9496 505.271 47.6669 cv
505.525 47.3948 505.763 47.141 505.967 46.9233 cv
506.405 46.5126 506.697 46.2387 506.697 46.2387 cv
506.697 46.2387 506.491 46.5818 506.181 47.0964 cv
506.011 47.3414 505.813 47.6273 505.601 47.9336 cv
505.375 48.2292 505.135 48.5444 504.894 48.8598 cv
504.636 49.1613 504.379 49.4628 504.137 49.7454 cv
cp
546.461 48.0162 mo
546.601 47.3786 546.764 46.6348 546.939 45.8379 cv
547.13 45.0452 547.334 44.1996 547.538 43.354 cv
547.763 42.5139 547.989 41.6737 548.2 40.8861 cv
548.427 40.1027 548.64 39.3715 548.822 38.7448 cv
549.224 37.5009 549.492 36.6716 549.492 36.6716 cv
549.492 36.6716 549.331 37.528 549.089 38.8127 cv
548.949 39.4502 548.786 40.194 548.611 40.9909 cv
548.42 41.7836 548.216 42.6292 548.012 43.4747 cv
547.786 44.3148 547.561 45.1549 547.35 45.9425 cv
547.122 46.7259 546.909 47.4572 546.727 48.0838 cv
546.326 49.3278 546.058 50.1571 546.058 50.1571 cv
546.058 50.1571 546.219 49.3007 546.461 48.0162 cv
cp
570.507 23.2822 mo
570.272 23.1693 569.998 23.0374 569.705 22.8961 cv
569.42 22.7401 569.116 22.5738 568.812 22.4075 cv
568.52 22.2222 568.227 22.037 567.953 21.8633 cv
567.687 21.6749 567.439 21.4992 567.226 21.3485 cv
566.821 21.014 566.55 20.7909 566.55 20.7909 cv
566.55 20.7909 566.876 20.9194 567.366 21.1121 cv
567.6 21.2251 567.874 21.357 568.168 21.4982 cv
568.453 21.654 568.757 21.8201 569.06 21.9864 cv
569.353 22.1715 569.646 22.3568 569.92 22.5304 cv
570.186 22.7186 570.434 22.8943 570.647 23.045 cv
571.052 23.3797 571.322 23.6029 571.322 23.6029 cv
571.322 23.6029 570.996 23.4746 570.507 23.2822 cv
cp
535.411 46.2995 mo
544.725 29.8445 li
539.763 34.7054 li
544.158 28.1392 li
536.869 34.4513 li
546.947 21.7912 li
534.091 33.2009 li
552.348 10.6392 li
555.005 25.672 li
553.519 10.5219 li
569.816 21.012 li
569.314 20.7513 568.658 20.4105 567.877 20.0052 cv
566.092 19.0974 563.691 17.933 561.281 16.7751 cv
559.268 15.808 557.259 14.834 555.601 14.0046 cv
563.327 26.0511 li
570.05 29.9082 li
562.788 28.0371 li
570.583 32.4899 li
563.558 30.266 li
568.743 34.2385 li
563.78 32.408 li
566.123 35.1072 li
564.759 34.4272 563.374 33.911 563.374 33.911 cv
563.374 33.911 563.969 34.8157 564.556 35.8782 cv
561.955 33.6742 li
562.574 36.6334 li
560.847 34.6288 li
560.551 37.0369 li
559.558 35.8481 li
558.904 36.9164 li
558.043 35.3383 li
557.443 36.7371 li
556.584 32.1148 li
554.969 37.5902 li
554.443 33.3447 li
553.138 36.4401 li
553.316 31.5694 li
550.953 37.0927 li
552.225 26.3453 li
548.103 36.6074 li
548.331 34.3272 li
545.914 37.2164 li
547.151 33.1988 li
543.581 37.1377 li
545.144 33.2929 li
535.411 46.2995 li
cp
539.045 35.6527 mo
538.867 35.9379 538.678 36.2422 538.488 36.5465 cv
538.28 36.8384 538.072 37.1305 537.877 37.4043 cv
537.668 37.6686 537.473 37.9154 537.305 38.1268 cv
536.938 38.5285 536.694 38.7961 536.694 38.7961 cv
536.694 38.7961 536.847 38.4675 537.077 37.9747 cv
537.208 37.7389 537.361 37.4639 537.524 37.1692 cv
537.702 36.8839 537.892 36.5795 538.081 36.2753 cv
538.289 35.9832 538.497 35.6911 538.692 35.4173 cv
538.901 35.1528 539.096 34.9061 539.264 34.6945 cv
539.631 34.2931 539.875 34.0255 539.875 34.0255 cv
539.875 34.0255 539.722 34.3542 539.493 34.8473 cv
539.362 35.0831 539.209 35.3581 539.045 35.6527 cv
cp
533.128 35.7988 mo
533.611 35.2641 534.095 34.7294 534.548 34.2281 cv
535.014 33.7381 535.448 33.2807 535.821 32.8887 cv
536.596 32.1302 537.113 31.6247 537.113 31.6247 cv
537.113 31.6247 536.679 32.2029 536.028 33.0702 cv
535.688 33.491 535.292 33.982 534.867 34.508 cv
534.429 35.0228 533.962 35.5719 533.495 36.121 cv
533.012 36.6556 532.528 37.1903 532.075 37.6914 cv
531.609 38.1814 531.174 38.6389 530.801 39.0308 cv
530.027 39.7894 529.51 40.2951 529.51 40.2951 cv
529.51 40.2951 529.944 39.717 530.595 38.85 cv
530.935 38.4291 531.332 37.9381 531.756 37.412 cv
532.194 36.8972 532.661 36.348 533.128 35.7988 cv
cp
529.038 48.7094 mo
528.346 47.5525 527.885 46.7811 527.885 46.7811 cv
527.885 46.7811 528.437 47.4905 529.265 48.5545 cv
529.663 49.0974 530.127 49.7309 530.624 50.4094 cv
531.108 51.0977 531.623 51.8318 532.139 52.5659 cv
532.636 53.3124 533.134 54.059 533.6 54.7588 cv
534.053 55.4683 534.475 56.1305 534.837 56.6981 cv
535.528 57.8552 535.99 58.6267 535.99 58.6267 cv
535.99 58.6267 535.438 57.9174 534.61 56.8535 cv
534.212 56.3107 533.747 55.6772 533.25 54.9985 cv
532.767 54.3102 532.251 53.576 531.736 52.8419 cv
531.238 52.0952 530.741 51.3487 530.275 50.6487 cv
529.822 49.9392 529.4 49.277 529.038 48.7094 cv
cp
584.745 48.5504 mo
585.145 48.1152 585.518 47.709 585.837 47.3608 cv
586.506 46.6894 586.952 46.2418 586.952 46.2418 cv
586.952 46.2418 586.591 46.76 586.049 47.5375 cv
585.763 47.9137 585.429 48.3525 585.071 48.8227 cv
584.701 49.282 584.305 49.7719 583.91 50.2619 cv
583.497 50.7377 583.085 51.2135 582.699 51.6596 cv
582.299 52.0948 581.926 52.501 581.607 52.8491 cv
580.938 53.5207 580.492 53.9684 580.492 53.9684 cv
580.492 53.9684 580.854 53.4503 581.396 52.6731 cv
581.682 52.2969 582.016 51.858 582.374 51.3878 cv
582.744 50.9284 583.139 50.4384 583.535 49.9484 cv
583.947 49.4725 584.359 48.9966 584.745 48.5504 cv
cp
526.103 42.7462 mo
526.181 42.8235 li
520.013 39.1512 li
527.97 49.1205 li
527.966 49.1521 527.961 49.1776 527.957 49.2089 cv
522.017 43.7451 li
526.226 50.8429 li
522.605 46.6839 li
524.807 52.3712 li
522.773 49.6037 li
523.528 53.9825 li
522.423 52.5005 li
522.09 54.3724 li
520.564 49.9818 li
520.111 53.9359 li
519.375 52.2154 li
518.745 54.4657 li
517.798 51.3654 li
516.861 55.069 li
516.168 50.8215 li
515.017 54.515 li
515.105 50.1399 li
513.052 54.5356 li
513.927 48.4102 li
511.361 52.969 li
511.734 51.0195 li
509.118 54.0339 li
509.641 52.2538 li
503.905 59.1013 li
509.754 48.3112 li
507.342 50.662 li
510.489 45.4358 li
505.512 50.0073 li
511.274 41.6719 li
506.166 46.4811 li
515.638 35.2189 li
517.618 45.6296 li
516.629 35.4433 li
525.13 41.996 li
526.103 42.7462 li
cp
608.672 36.744 mo
608.672 36.744 li
596.878 33.7061 li
596.878 33.7061 li
594.467 33.0852 li
586.289 42.5551 li
571.223 20.1717 li
552.499 8.11913 li
526.026 40.8333 li
515.695 32.87 li
515.695 32.87 li
515.695 32.87 li
488.362 65.3689 li
488.362 65.3689 li
628.258 65.3689 li
608.672 36.744 li
608.672 36.744 li
cp
f
133.993 396.332 mo
125.645 396.459 116.971 395.886 115.115 394.169 cv
115.115 394.169 110.081 396.207 107.473 396.311 cv
104.865 396.415 101.076 393.239 101.076 393.239 cv
101.076 393.239 95.1998 395.895 91.4413 395.895 cv
87.6828 395.895 81.3131 394.681 79.3188 393.648 cv
79.3188 393.648 75.5289 395.574 73.3445 395.952 cv
71.8244 392.025 68.9412 384.44 68.9412 383.405 cv
68.9412 381.998 69.7594 381.17 70.4754 381.253 cv
71.1913 381.336 72.0094 378.274 72.0094 378.274 cv
74.464 380.26 li
74.464 380.26 75.3333 375.379 75.947 376.454 cv
76.5606 377.53 78.6571 379.764 78.9128 379.764 cv
79.1686 379.764 80.8049 374.385 80.8049 374.385 cv
80.8049 374.385 80.2935 378.109 80.6003 379.267 cv
80.9072 380.426 82.6457 376.206 82.6457 376.206 cv
82.6457 376.206 84.4612 387.955 85.9953 390.81 cv
85.9953 390.81 83.4641 379.143 84.3078 376.909 cv
85.1516 374.675 85.9953 373.293 85.9953 373.293 cv
85.9953 373.293 86.6344 377.695 87.4527 378.44 cv
88.2708 379.185 88.5777 374.965 88.5777 373.972 cv
88.5777 373.972 89.9583 377.514 90.6743 377.646 cv
91.3901 377.778 93.0265 367.932 93.0265 367.932 cv
95.43 387.211 li
95.43 387.211 94.4583 372.317 94.8163 370 cv
95.1742 367.683 96.0436 368.097 96.4015 369.586 cv
96.4015 369.586 97.1175 368.842 97.322 366.442 cv
99.214 371.076 li
99.214 371.076 100.697 367.187 100.441 365.946 cv
100.186 364.705 102.078 373.31 102.078 373.31 cv
104.225 367.352 li
104.225 367.352 103.919 373.542 104.686 377.646 cv
104.686 377.646 108.777 375.792 109.441 371.986 cv
109.441 371.986 113.101 379.856 111.166 392.766 cv
111.166 392.766 115.373 378.936 115.782 375.048 cv
116.958 383.735 li
119.106 382.474 li
119.106 382.474 120.163 384.334 122.429 387.703 cv
123.184 388.825 123.363 392.775 124.629 393.333 cv
125.988 393.933 129.718 386.089 129.718 386.089 cv
136.927 395.168 li
133.993 396.332 li
cp
68.2765 396.103 mo
63.9043 395.479 60.1396 390.515 57.6851 392.905 cv
55.2306 395.296 50.3074 395.293 49.5404 393.734 cv
49.5404 393.734 47.1398 395.591 44.7392 395.906 cv
43.8698 396.02 30.2025 393.543 30.2025 393.543 cv
30.2025 393.543 22.1062 394.516 21.0264 394.953 cv
19.8748 395.42 15.3633 395.883 10.4087 396.269 cv
13.2647 394.393 16.4532 392.095 16.7309 391.017 cv
17.2423 389.031 22.8688 387.619 22.8688 387.619 cv
22.9635 392.409 li
24.8616 382.494 li
24.8616 382.494 25.4753 384.066 25.6287 384.811 cv
25.7821 385.556 28.7479 379.433 29.1571 378.936 cv
29.566 378.44 30.7422 382.246 30.7422 382.246 cv
32.8389 377.646 li
33.8507 391.772 li
35.0378 379.35 li
36.4184 383.156 li
37.4923 380.343 li
37.4923 380.343 41.5055 388.205 43.7597 393.581 cv
43.7597 393.581 42.5037 384.149 40.8162 381.584 cv
40.8162 381.584 42.4014 382.577 43.4242 382.577 cv
44.4468 382.577 44.3957 376.454 44.3957 376.454 cv
44.3957 376.454 46.9526 376.852 47.2594 377.646 cv
47.5662 378.44 49.0491 374.551 49.1514 374.137 cv
49.2538 373.724 49.8161 376.686 49.714 377.646 cv
49.6116 378.605 50.6855 374.137 50.89 373.393 cv
51.0946 372.648 54.1116 376.289 54.214 377.116 cv
54.3163 377.943 55.7991 377.364 56.0038 375.709 cv
56.0038 375.709 58.5094 385.39 59.3275 387.376 cv
59.3275 387.376 58.6117 378.026 58.2537 376.785 cv
60.1969 378.771 li
62.1912 377.646 li
66.589 382.163 li
66.589 382.163 69.9992 391.521 72.6024 396.066 cv
71.2705 396.247 69.7712 396.316 68.2765 396.103 cv
cp
137.004 387.684 mo
136.133 386.651 130.772 382.134 130.487 382.209 cv
129.252 382.536 128.338 380.595 127.493 379.992 cv
125.756 378.754 121.569 371.834 120.541 371.502 cv
119.95 371.311 117.498 367.359 116.754 366.827 cv
116.282 366.489 113.868 365.852 113.548 365.435 cv
112.93 364.63 109.363 364.13 108.715 364.263 cv
107.821 364.446 105.548 361.87 105.248 360.244 cv
105.029 359.054 104.345 357.599 103.976 357.474 cv
103.542 357.327 101.131 354.982 101.131 354.982 cv
101.131 354.982 98.7704 357.319 98.3964 358.481 cv
97.9425 359.892 97.1244 360.438 96.8107 361.283 cv
96.1028 363.19 92.6874 365.35 91.968 365.56 cv
91.0671 365.823 88.5114 368.264 88.0663 368.767 cv
87.4888 369.419 82.0197 369.631 81.6301 370.181 cv
81.0653 370.978 77.815 370.43 76.1004 370.43 cv
74.4087 370.43 71.523 373.815 70.7388 373.979 cv
69.7321 374.189 68.4687 376.82 67.5655 378.174 cv
66.3444 376.657 65.4327 375.436 65.1469 374.778 cv
64.8872 374.18 64.0345 372.328 62.9244 372.909 cv
62.1901 373.293 56.768 370.176 56.2839 369.744 cv
55.4246 368.977 54.5458 368.909 54.214 368.559 cv
52.864 367.137 50.9413 366.827 50.9413 366.827 cv
50.7392 367.993 46.6549 369.804 46.2577 371.272 cv
46.0683 371.971 42.9746 374.26 41.1846 374.232 cv
39.6139 374.208 38.8219 374.626 38.8219 374.626 cv
37.7998 373.241 34.5679 371.437 33.3086 371.327 cv
32.2843 371.237 31.8058 369.547 31.8058 369.547 cv
31.8058 369.547 28.4718 371.577 23.1844 378.742 cv
22.1986 380.077 20.495 382.819 18.5452 383.944 cv
15.4421 385.735 12.927 390.031 9.24758 390.427 cv
6.97272 390.672 1.79596 397.233 1.79596 397.233 cv
8.91481 397.233 li
73.3307 397.233 li
73.8422 397.233 li
131.72 397.233 li
143.471 397.233 li
142.501 395.999 li
142.501 395.999 138.231 389.139 137.004 387.684 cv
cp
f
130.456 165.001 mo
130.456 165.001 129.62 162.577 128.905 161.486 cv
128.189 160.396 128.308 157.002 127.831 155.912 cv
127.354 154.821 122.701 150.458 122.701 150.458 cv
122.701 150.458 122.701 149.004 122.701 148.277 cv
122.701 147.549 117.572 142.395 117.572 142.395 cv
113.635 139.285 li
111.487 134.097 li
108.982 131.916 li
108.982 131.916 107.909 129.977 107.909 129.007 cv
106.755 123.917 li
104.012 119.07 103.256 122.746 103.256 122.746 cv
103.256 122.746 101.102 124.232 101.387 125.533 cv
102.849 132.212 98.8469 128.346 98.7626 128.038 cv
98.7626 128.038 98.1264 134.703 97.6491 133.249 cv
97.1719 131.795 97.7685 131.673 97.6491 130.098 cv
97.5299 128.523 96.3369 127.917 95.8597 126.947 cv
95.4079 126.029 93.7189 125.436 93.5396 125.375 cv
93.548 125.44 93.544 125.679 93.4738 126.462 cv
93.3545 127.795 92.4399 131.067 92.4399 130.704 cv
92.4399 130.34 91.0879 129.371 91.0879 129.371 cv
89.4177 126.947 li
89.4177 126.947 89.7756 124.887 89.7756 124.038 cv
89.7756 123.19 88.4634 120.766 88.4634 120.766 cv
85.9581 115.192 li
85.9581 115.192 84.4073 118.827 84.0494 120.888 cv
83.6916 122.948 82.9757 126.705 82.6178 126.705 cv
82.2599 126.705 80.3512 124.523 80.3512 124.523 cv
80.3512 124.523 80.3512 124.523 80.3512 123.554 cv
80.3512 122.584 79.1583 122.948 78.8004 123.554 cv
78.4424 124.16 77.7267 126.22 77.7267 126.22 cv
77.7267 126.22 77.2495 124.645 76.7724 122.948 cv
76.2952 121.251 75.6688 119.766 75.6688 119.766 cv
75.6688 119.766 72.6566 118.736 73.0146 117.888 cv
73.3724 117.04 70.7479 114.404 70.7479 114.404 cv
68.8193 109.496 li
68.8193 109.496 66.2743 111.556 66.2743 111.919 cv
66.2743 112.283 65.3199 113.616 64.3656 114.343 cv
63.4112 115.07 63.6498 117.252 63.6498 117.252 cv
63.6498 117.252 63.5305 118.827 63.0533 119.433 cv
62.5761 120.039 61.8603 122.463 61.8603 122.463 cv
61.8603 122.463 60.5481 118.948 60.5481 118.221 cv
60.5481 117.494 58.7586 118.221 58.7586 118.221 cv
58.7586 118.221 58.7586 118.221 57.8043 121.13 cv
56.8499 124.038 57.4463 122.948 56.6113 124.038 cv
55.7763 125.129 55.4184 126.099 55.4184 125.735 cv
55.4184 125.372 54.3049 121.696 53.9868 122.665 cv
53.6687 123.634 53.6687 124.443 53.0324 125.25 cv
52.3962 126.058 52.1576 125.493 51.6804 126.139 cv
51.2033 126.785 50.9646 129.209 50.9646 129.209 cv
50.9646 129.209 49.1355 132.36 48.1811 132.845 cv
47.2267 133.33 45.318 138.305 45.318 138.305 cv
45.318 138.305 45.2384 134.299 44.8408 133.653 cv
44.4432 133.007 43.1706 133.653 43.1706 133.653 cv
43.1706 133.653 39.5122 140.682 39.1146 140.49 cv
38.7169 140.297 38.2398 139.103 38.2398 139.103 cv
38.2398 139.103 36.0924 141.328 35.6947 140.958 cv
35.297 140.587 35.6947 138.919 35.6947 138.919 cv
33.627 141.224 li
33.627 141.224 32.9112 143.429 32.3544 143.327 cv
31.7978 143.226 31.6387 142.54 31.1614 142.1 cv
30.6843 141.66 29.1733 142.944 29.0937 141.813 cv
29.0142 140.683 28.7756 138.919 28.7756 138.919 cv
28.7756 138.919 26.0716 142.863 25.1171 143.182 cv
24.1628 143.501 23.9241 146.257 22.7313 146.418 cv
21.5383 146.58 21.6973 148.357 21.3792 149.165 cv
21.0611 149.973 19.2319 154.579 16.8459 155.952 cv
14.4601 157.326 13.5901 165.001 13.5901 165.001 cv
13.5901 165.001 10.4884 167.182 10.4884 167.909 cv
10.4884 168.637 3.23053 181.295 3.23053 181.295 cv
10.3422 171.566 li
10.3422 171.566 13.8822 169.302 15.3137 167.485 cv
16.7451 165.667 16.1193 164.576 17.2374 163.486 cv
18.3555 162.395 18.9668 159.305 20.7562 158.214 cv
22.5454 157.123 23.3277 153.124 24.0435 152.155 cv
24.7593 151.185 25.5943 149.004 25.5943 148.64 cv
25.5943 148.277 26.5487 145.732 26.5487 145.732 cv
26.5487 145.732 26.4294 150.579 26.5487 151.549 cv
26.668 152.518 28.5768 148.64 28.5768 148.64 cv
28.5768 148.64 29.7697 147.065 30.4855 145.732 cv
30.4855 145.732 31.8878 147.989 31.45 148.621 cv
31.8081 148.148 33.3883 146.095 33.3883 146.095 cv
34.3427 143.833 li
34.3427 143.833 35.8538 152.033 35.3766 153.73 cv
34.8994 155.427 34.6609 157.245 34.6609 158.335 cv
34.6609 159.426 34.8994 160.88 34.6609 161.729 cv
34.4223 162.577 34.6609 165.607 34.6609 165.607 cv
36.5696 161.002 li
36.5696 161.002 36.0924 155.912 36.5696 155.184 cv
37.0468 154.457 38.9555 150.943 38.9555 150.943 cv
38.9555 146.943 li
38.359 143.833 li
38.359 143.833 41.2221 146.338 41.2221 148.761 cv
41.2221 151.185 40.3871 152.639 41.2221 153.851 cv
42.0571 155.063 43.608 156.396 42.6537 158.335 cv
41.6993 160.274 43.4888 165.243 43.4888 165.243 cv
43.4888 165.243 48.3799 161.365 48.6184 159.79 cv
48.8571 158.214 48.6184 154.942 48.6184 154.942 cv
46.5904 148.398 li
47.6641 145.247 li
48.2606 141.975 li
48.2606 141.975 48.7378 145.974 49.3343 148.277 cv
49.9307 150.579 51.7201 152.276 51.7201 152.276 cv
51.7201 152.276 49.5728 147.428 50.2886 146.58 cv
51.0044 145.732 51.1237 141.975 51.1237 141.975 cv
51.0044 138.824 li
51.0044 138.824 55.5829 140.93 56.5056 143.869 cv
56.2096 142.759 55.3368 139.71 54.464 138.824 cv
53.3903 137.733 54.1061 133.491 54.1061 132.158 cv
54.1061 130.825 54.3446 128.401 54.3446 128.401 cv
54.3446 128.401 55.7763 128.038 56.6113 127.068 cv
57.4463 126.099 58.0429 124.402 58.0429 124.402 cv
58.0429 124.402 60.1902 126.947 60.1902 129.007 cv
60.1902 131.067 62.8147 140.46 62.8147 140.46 cv
62.8147 140.46 65.0814 143.671 65.2006 144.156 cv
65.3199 144.641 66.155 148.337 66.155 148.337 cv
66.155 148.337 67.7059 149.731 68.5409 151.306 cv
69.3759 152.882 70.3304 152.882 70.6882 152.033 cv
71.0462 151.185 67.4076 144.338 67.4076 144.338 cv
69.9725 137.006 li
69.9725 137.006 72.2003 134.542 72.2003 133.087 cv
72.2003 131.633 72.9549 130.037 71.8216 128.341 cv
70.9507 127.037 68.8988 119.918 68.8988 119.918 cv
68.8988 119.918 72.597 125.614 73.1934 129.007 cv
73.7899 132.401 73.7899 136.158 73.7899 136.158 cv
73.7899 136.158 73.3127 139.308 73.3127 141.247 cv
73.3127 143.187 74.2671 148.882 74.2671 148.882 cv
73.6707 155.184 li
73.6707 155.184 75.6391 152.639 76.2355 149.125 cv
76.832 145.611 79.9933 142.217 79.5161 140.46 cv
79.0389 138.702 77.2495 133.976 77.2495 133.976 cv
77.2495 133.976 83.5722 140.399 84.4073 141.611 cv
85.2423 142.823 87.2704 143.914 86.0774 145.974 cv
84.8845 148.034 85.3617 150.7 85.3617 150.7 cv
85.3617 150.7 87.4692 146.903 87.4692 145.085 cv
87.4692 143.267 88.3936 141.309 88.3936 141.309 cv
84.8149 136.037 li
85.5307 127.312 li
85.5307 127.312 85.5307 133.311 87.4989 135.31 cv
89.4672 137.31 91.8036 137.895 91.8036 137.895 cv
91.8036 137.895 92.4001 139.551 93.2352 145.368 cv
94.2837 152.672 92.5092 151.852 93.5827 152.943 cv
94.6563 154.033 97.0924 155.467 97.0924 155.467 cv
97.0924 155.467 98.9507 155.669 97.1614 152.397 cv
95.372 149.125 94.627 146.378 94.627 146.378 cv
93.4738 139.551 li
93.4738 139.551 92.7978 136.238 92.7978 135.592 cv
92.7978 134.946 96.4562 139.228 97.013 141.005 cv
97.5696 142.783 96.5357 143.106 97.5696 144.318 cv
98.6035 145.53 100.671 146.984 100.671 146.984 cv
101.467 150.7 li
102.898 153.851 li
102.898 153.851 102.819 148.438 102.898 148.196 cv
102.978 147.953 102.182 144.641 101.705 143.429 cv
101.228 142.217 100.194 139.713 100.194 139.713 cv
100.194 139.713 102.023 139.632 102.898 140.924 cv
103.773 142.217 104.091 142.702 106.159 143.187 cv
108.227 143.671 107.988 143.914 108.227 144.641 cv
108.465 145.368 108.704 146.903 108.704 146.903 cv
113.714 149.165 li
109.817 149.812 li
108.783 151.347 li
108.783 151.347 113.078 152.963 113.714 152.559 cv
114.351 152.155 116.816 150.943 117.134 152.155 cv
117.452 153.367 118.168 152.639 118.725 154.175 cv
119.282 155.71 120.554 155.467 120.077 157.002 cv
119.6 158.537 119.549 159.602 119.549 159.602 cv
119.549 159.602 120.713 158.941 121.508 158.134 cv
122.304 157.326 123.656 160.8 123.656 160.8 cv
123.656 160.8 122.542 163.062 124.371 164.354 cv
126.201 165.647 127.712 167.667 127.712 167.667 cv
127.712 167.667 129.461 168.475 130.734 169.202 cv
132.006 169.929 133.818 171.664 133.818 171.664 cv
142.431 183.26 li
134.392 168.637 li
130.456 165.001 li
cp
f
279.908 173.351 mo
278.312 173.851 273.841 172.372 270.967 172.177 cv
268.093 171.982 255.32 173.809 253.228 174.448 cv
251.137 175.087 243.025 172.177 243.025 172.177 cv
243.025 172.177 235.561 173.548 226.939 172.093 cv
218.317 170.638 213.966 173.33 206.781 173.41 cv
199.596 173.49 196.631 170.816 189.286 171.614 cv
181.942 172.412 170.856 174.448 170.856 174.448 cv
174.848 173.087 173.515 171.255 173.515 171.255 cv
173.515 171.255 181.554 169.179 182.192 167.423 cv
182.831 165.666 181.713 162.952 181.713 162.952 cv
185.66 163.967 li
191.916 169.511 li
188.637 163.607 li
189.4 163.01 190.329 162.01 190.974 160.397 cv
192.251 157.204 194.966 154.49 194.966 154.49 cv
194.167 165.826 li
194.167 165.826 197.041 163.591 196.403 162.154 cv
195.94 161.112 199.829 157.313 202.01 155.295 cv
204.551 163.323 li
203.299 154.124 li
203.376 154.057 203.428 154.011 203.428 154.011 cv
206.781 164.389 li
206.781 164.389 205.823 153.691 208.058 152.574 cv
210.294 151.456 209.974 144.271 209.974 144.271 cv
211.252 150.338 li
211.252 150.338 216.68 149.38 215.403 146.985 cv
214.126 144.59 216.521 139.641 216.521 139.641 cv
216.521 139.641 218.916 145.069 220.512 143.473 cv
222.109 141.876 224.664 137.405 224.664 137.405 cv
224.664 137.405 222.588 151.775 225.462 150.019 cv
228.336 148.263 228.176 142.036 228.176 142.036 cv
228.445 142.735 229.235 142.866 230.16 142.741 cv
234.234 153.331 li
232.308 142.147 li
233.426 141.72 234.331 141.237 234.331 141.237 cv
234.331 135.01 li
234.578 136.926 237.916 138.363 237.916 138.363 cv
236.718 133.653 242.421 128.819 242.421 128.819 cv
240.185 134.567 245.899 140.918 245.899 140.918 cv
248.536 136.607 li
248.536 136.607 250.53 140.758 251.967 139.8 cv
253.404 138.842 253.228 133.573 253.228 133.573 cv
256.757 145.681 li
259.471 139.162 li
259.471 139.162 259.03 142.862 259.12 146.007 cv
258.831 156.124 li
260.206 150.247 li
260.277 150.289 260.35 150.321 260.429 150.338 cv
262.664 150.817 265.858 148.582 265.858 148.582 cv
264.101 151.616 266.975 156.885 266.975 156.885 cv
272.15 152.241 li
269.285 157.417 li
273.84 152.326 li
275.162 155.179 273.755 158.907 276.875 158.481 cv
280.387 158.002 281.665 154.649 281.665 154.649 cv
281.665 154.649 284.219 160.557 284.858 164.708 cv
285.497 168.86 298.27 173.351 298.27 173.351 cv
298.27 173.351 281.505 172.851 279.908 173.351 cv
cp
281.562 143.548 mo
276.697 146.916 li
276.697 146.916 274.719 145.681 273.022 140.84 cv
272.401 139.069 269.137 134.416 269.137 134.416 cv
265.32 135.913 li
265.32 135.913 260.665 131.977 257.777 125.115 cv
256.646 122.427 251.098 115.553 251.098 115.553 cv
251.098 115.553 248.821 117.295 248.244 118.046 cv
245.7 121.359 244.586 121.242 244.586 121.242 cv
237.774 115.553 li
237.774 115.553 232.048 120.96 228.933 126.282 cv
228.043 127.802 224.451 131.721 224.451 131.721 cv
216.442 125.059 li
216.442 125.059 213.63 127.525 212.87 130.863 cv
212.289 133.414 209.855 135.763 209.855 135.763 cv
207.085 135.164 li
207.085 135.164 206.142 137.685 204.551 140.842 cv
204.135 141.668 203.043 144.221 203.043 144.221 cv
203.043 144.221 199.052 143.204 196.609 140.137 cv
195.545 138.802 191.291 137.111 191.291 137.111 cv
187.848 145.045 li
185.453 144.072 li
185.453 144.072 183.652 150.146 182.422 151.679 cv
181.093 153.336 178.941 158.892 178.941 158.892 cv
174.974 156.048 li
174.974 156.048 172.014 159.16 169.858 164.874 cv
168.744 167.831 163.521 175.809 163.521 175.809 cv
305.141 175.809 li
305.141 175.809 295.196 161.126 291.225 156.768 cv
285.497 150.483 281.562 143.548 281.562 143.548 cv
cp
f
437.705 158.305 mo
429.46 155.698 li
433.778 163.591 li
419.709 145.877 li
418.874 155.285 li
416.366 148.906 li
418.286 165.733 li
411.909 135.964 li
413.047 150.271 li
406.197 142.206 li
398.187 149.025 li
411.558 132.735 li
460.994 173.423 li
434.196 154.229 li
437.705 158.305 li
cp
399.337 143.858 mo
395.971 141.219 li
396.709 156.276 li
393.748 133.842 li
393.661 147.162 li
389.36 141.655 li
380.798 151.711 li
393.697 131.758 li
400.817 142.6 li
399.285 141.999 li
399.337 143.858 li
cp
382.381 128.09 mo
389.003 137.531 li
385.964 136.561 li
379.034 141.93 li
382.099 131.054 li
375.343 148.447 li
376.562 135.322 li
373.114 146.336 li
370.816 145.097 li
359.749 158.176 li
360.577 151.43 li
357.673 160.409 li
348.459 159.965 li
349.503 162.168 li
330.495 173.271 li
382.381 128.09 li
cp
411.925 130.023 mo
411.383 129.578 li
410.914 130.149 li
401.934 141.091 li
394.335 129.52 li
393.698 128.55 li
393.067 129.526 li
389.505 135.036 li
383.101 125.907 li
382.619 125.22 li
382.027 125.735 li
326.843 173.788 li
324.523 175.809 li
327.304 175.809 li
464.637 175.809 li
467.553 175.809 li
465.08 173.773 li
411.925 130.023 li
cp
f
503.218 165.418 mo
503.267 165.282 503.326 165.119 503.385 164.961 cv
505.45 164.149 507.039 161.799 508.587 159.512 cv
508.83 159.153 509.077 158.788 509.307 158.46 cv
508.574 160.067 507.705 161.569 507.705 161.569 cv
507.705 161.569 509.086 160.438 510.371 159.129 cv
510.907 158.594 511.418 158.035 511.839 157.557 cv
512.781 159.718 514.136 161.666 515.818 163.205 cv
515.14 164.664 514.462 166.008 513.785 167.467 cv
512.139 168 510.498 168.693 508.855 169.293 cv
508.502 167.531 li
507.655 168.88 li
507.745 167.804 507.816 166.725 507.924 165.653 cv
506.757 167.507 505.379 169.975 504.212 171.83 cv
503.261 171.657 502.31 171.553 501.362 171.511 cv
502.912 170.993 li
499.423 170.801 li
499.584 170.484 499.723 170.184 499.834 169.932 cv
501.877 169.139 502.726 166.783 503.218 165.418 cv
cp
516.135 154.704 mo
516.415 154.504 517.09 154.302 517.743 154.107 cv
519.553 153.566 522.286 152.748 524.478 149.799 cv
525.329 148.654 527.044 147.437 528.557 146.363 cv
529.524 145.677 530.428 145.027 531.208 144.341 cv
529.899 146.283 528.288 147.939 528.288 147.939 cv
528.288 147.939 530.349 146.759 532.207 145.134 cv
532.923 144.532 533.598 143.871 534.162 143.282 cv
535.52 145.985 536.991 148.621 538.585 151.166 cv
538.21 153.029 537.966 154.833 537.626 156.68 cv
532.779 162.301 li
536.419 159.971 li
535.215 161.794 533.316 163.248 531.836 164.84 cv
531.939 165.933 531.91 167.272 532.013 168.365 cv
530.261 168.994 528.47 169.594 526.675 170.191 cv
523.029 165.96 li
524.227 169.607 li
522.976 168.199 521.771 166.741 520.624 165.22 cv
520.375 166.047 519.679 166.879 519.43 167.706 cv
519.015 164.244 518.579 160.879 518.164 157.417 cv
517.015 156.749 515.578 156.182 514.159 155.608 cv
514.839 155.449 515.501 155.157 516.135 154.704 cv
cp
546.854 134.816 mo
547.517 133.815 548.515 132.31 548.964 131.942 cv
550.784 130.859 552.629 128.579 554.042 126.398 cv
556.428 137.372 li
556.137 129.362 li
556.854 133.197 557.571 137.032 558.288 140.867 cv
559.945 141.999 561.451 143.069 563.048 144.176 cv
560.018 143.264 li
564.082 147.064 li
563.987 149.342 563.907 151.692 563.798 153.903 cv
564.822 155.161 565.665 156.46 566.689 157.718 cv
565.033 159.92 563.299 162.243 561.571 164.559 cv
564.58 158.268 li
557.988 166.833 li
557.06 166.056 556.127 165.285 555.183 164.53 cv
554.105 165.356 552.871 166.159 551.633 166.853 cv
552.077 161.591 li
550.263 165.712 li
550.649 162.754 550.938 159.746 551.386 156.82 cv
550.543 156.307 549.663 155.743 548.781 155.174 cv
551.15 155.93 li
545.711 151.702 li
545.904 150.544 546.102 149.374 546.283 148.244 cv
544.516 147.275 542.733 146.27 540.954 145.274 cv
545.136 146.292 li
538.956 142.363 li
539.008 142.161 539.061 141.959 539.114 141.758 cv
539.314 141.723 539.509 141.702 539.712 141.656 cv
542.78 140.961 544.944 137.696 546.854 134.816 cv
cp
568.733 137.773 mo
569.686 139.109 570.766 140.623 572.02 142.246 cv
575.422 146.649 579.511 150.33 580.492 151.192 cv
580.981 152.307 581.469 153.422 581.958 154.537 cv
578.28 153.838 574.527 153.083 570.896 152.421 cv
570.532 145.149 li
569.286 150.098 li
569.281 147.938 569.254 145.795 569.279 143.613 cv
567.847 141.185 566.379 138.656 564.948 136.228 cv
565.007 135.862 565.064 135.484 565.122 135.11 cv
567.878 137.645 li
567.068 135.474 li
567.587 136.167 568.145 136.949 568.733 137.773 cv
cp
590.199 145.881 mo
591.147 145.561 592.028 145.14 592.806 144.769 cv
593.429 144.471 594.021 144.197 594.542 144.016 cv
594.5 147.035 594.458 150.053 594.416 153.072 cv
595.858 153.239 597.311 153.521 598.758 153.75 cv
601.692 158.881 li
601.277 155.773 li
602.258 157.582 603.285 159.376 604.22 161.199 cv
606.732 162.133 609.305 163.169 611.849 164.156 cv
598.597 168.183 li
607.729 166.886 li
603.648 167.944 599.559 169.041 595.486 170.068 cv
594.63 168.941 593.771 167.816 592.961 166.662 cv
592.226 167.407 591.006 168.448 590.271 169.193 cv
589.833 166.824 589.013 164.298 588.575 161.929 cv
587.484 162.884 586.2 163.51 585.109 164.466 cv
585.312 162.295 585.477 159.912 585.66 157.63 cv
586.798 156.788 587.906 155.99 587.906 155.99 cv
587.529 151.05 li
588.723 155.164 li
588.801 146.815 li
589.324 146.355 589.813 146.012 590.199 145.881 cv
cp
605.315 149.563 mo
601.783 146.74 600.951 143.133 597.939 141.015 cv
597.092 140.42 596.27 140.191 595.459 140.191 cv
593.383 140.191 591.378 141.694 589.212 142.427 cv
586.199 143.447 582.771 148.544 582.771 148.544 cv
582.771 148.544 578.2 144.623 574.564 139.917 cv
570.928 135.212 568.746 131.369 566.565 129.879 cv
564.383 128.389 558.15 122.586 557.527 121.096 cv
557.165 120.232 556 119.632 554.963 119.632 cv
554.212 119.632 553.529 119.947 553.267 120.704 cv
552.644 122.508 549.631 127.448 547.346 128.782 cv
545.06 130.115 542.151 137.408 539.035 138.114 cv
538.326 138.274 537.698 138.337 537.125 138.337 cv
535.177 138.337 533.864 137.608 532.178 137.486 cv
531.983 137.472 531.813 137.465 531.663 137.465 cv
530.134 137.465 530.781 138.21 530.308 139.996 cv
529.789 141.956 524.283 144.309 521.893 147.524 cv
519.504 150.74 516.283 150.269 514.309 151.681 cv
513.854 152.007 513.437 152.132 513.065 152.132 cv
511.827 152.132 511.089 150.74 511.089 150.74 cv
511.089 150.74 509.011 153.328 507.453 155.21 cv
505.894 157.092 503.505 161.64 501.843 161.64 cv
500.181 161.64 500.077 166.503 498.415 166.581 cv
496.752 166.659 497.064 169.849 494.848 170.79 cv
494.529 170.925 494.231 170.978 493.95 170.978 cv
492.914 170.978 492.117 170.255 491.435 170.255 cv
491.015 170.255 490.639 170.53 490.277 171.417 cv
489.169 174.136 485.673 175.809 485.673 175.809 cv
630.04 175.809 li
630.04 175.809 622.456 165.013 620.275 160.699 cv
618.093 156.386 608.847 152.387 605.315 149.563 cv
cp
f
109.935 255.767 mo
110.542 257.003 li
110.912 257.757 111.192 258.517 111.492 259.283 cv
111.79 260.045 112.025 260.839 112.269 261.624 cv
112.718 263.211 113.072 264.844 113.186 266.511 cv
112.202 264.297 li
111.906 263.662 111.627 263.024 111.33 262.396 cv
110.924 262.929 110.519 263.461 110.112 263.993 cv
110.096 264.161 110.091 264.322 110.059 264.499 cv
109.799 265.773 109.263 266.801 109.216 267.754 cv
109.054 268.741 109.174 269.892 109.266 271.015 cv
109.365 272.129 109.327 273.188 109.361 274.085 cv
109.389 274.984 109.31 275.748 109.303 276.275 cv
109.26 276.808 109.236 277.113 109.236 277.113 cv
109.236 277.113 109.144 276.825 108.983 276.322 cv
108.857 275.813 108.61 275.097 108.435 274.219 cv
108.267 273.341 107.992 272.327 107.839 271.221 cv
107.715 270.319 107.542 269.308 107.552 268.198 cv
107.221 268.533 106.889 268.867 106.557 269.202 cv
106.182 269.579 105.807 270.02 105.412 270.412 cv
105.396 270.565 105.378 270.714 105.363 270.881 cv
105.313 271.416 105.294 272.013 105.218 272.664 cv
105.149 273.316 104.973 274.034 104.729 274.653 cv
104.169 275.878 103.459 276.827 102.865 277.748 cv
102.26 278.673 101.578 279.45 101.038 280.147 cv
100.493 280.843 99.9451 281.339 99.596 281.711 cv
99.217 282.055 99.0003 282.251 99.0003 282.251 cv
99.0003 282.251 99.1251 281.972 99.3433 281.485 cv
99.5859 281.021 99.8671 280.307 100.286 279.526 cv
100.711 278.747 101.127 277.779 101.684 276.823 cv
102.231 275.852 102.858 274.852 103.229 273.862 cv
103.453 273.377 103.6 272.916 103.694 272.379 cv
103.792 271.844 103.849 271.258 103.94 270.659 cv
104.025 270.064 104.202 269.437 104.438 268.926 cv
104.669 268.411 104.931 267.98 105.159 267.587 cv
105.29 267.367 105.421 267.168 105.55 266.98 cv
105.156 267.254 104.751 267.503 104.341 267.734 cv
103.861 267.993 103.369 268.225 102.863 268.406 cv
103.677 267.643 104.464 266.882 105.192 266.074 cv
105.562 265.678 105.903 265.254 106.232 264.833 cv
106.561 264.412 106.864 263.973 107.124 263.518 cv
107.39 263.07 107.626 262.61 107.785 262.137 cv
107.862 261.9 107.93 261.664 107.972 261.428 cv
108.021 261.221 108.077 260.867 108.129 260.6 cv
108.244 260.007 108.357 259.425 108.506 258.836 cv
108.585 258.543 108.668 258.25 108.765 257.951 cv
108.925 257.494 li
109.024 257.249 li
109.087 257.113 li
109.12 257.051 109.115 257.043 109.213 256.891 cv
109.935 255.767 li
cp
123.245 279.393 mo
123.725 279.078 124.142 278.641 124.55 278.201 cv
125.346 277.288 126.067 276.275 126.732 275.224 cv
127.069 274.703 127.388 274.165 127.675 273.623 cv
128.602 271.928 li
128.907 271.357 129.234 270.802 129.561 270.247 cv
129.892 269.694 130.202 269.127 130.551 268.587 cv
131.672 266.85 li
131.96 268.886 li
132.007 269.217 132.073 269.587 132.143 269.938 cv
132.368 271.002 li
132.517 271.714 132.705 272.414 132.903 273.111 cv
133.316 274.499 133.802 275.856 134.602 277.094 cv
134.183 276.763 li
134.035 276.657 133.921 276.515 133.79 276.387 cv
133.525 276.131 133.303 275.834 133.078 275.535 cv
132.731 275.065 132.441 274.551 132.167 274.026 cv
132.054 274.14 131.946 274.261 131.858 274.39 cv
131.892 274.747 131.896 275.091 131.884 275.404 cv
131.766 276.169 131.664 276.79 131.612 277.455 cv
131.563 278.1 131.418 278.712 131.381 279.244 cv
131.337 279.774 131.219 280.236 131.191 280.557 cv
131.13 280.886 131.096 281.074 131.096 281.074 cv
131.096 281.074 131.014 280.904 130.871 280.606 cv
130.766 280.301 130.555 279.864 130.449 279.311 cv
130.349 278.761 130.178 278.106 130.174 277.396 cv
130.165 277.075 130.171 276.728 130.182 276.38 cv
129.654 276.741 129.142 277.131 128.664 277.571 cv
128.256 277.945 127.869 278.347 127.504 278.773 cv
127.322 278.986 127.146 279.206 126.975 279.431 cv
126.923 279.938 126.904 280.476 126.853 281.107 cv
126.73 281.804 126.483 282.616 126.11 283.218 cv
125.75 283.836 125.245 284.196 124.869 284.507 cv
124.484 284.818 124.09 284.948 123.849 285.081 cv
123.584 285.18 123.433 285.237 123.433 285.237 cv
123.433 285.237 123.508 285.079 123.64 284.804 cv
123.793 284.558 123.966 284.151 124.213 283.76 cv
124.468 283.37 124.661 282.855 124.87 282.397 cv
125.08 281.929 125.17 281.438 125.217 280.818 cv
125.217 280.815 125.218 280.811 125.218 280.808 cv
124.582 280.405 123.881 280.131 123.156 280.029 cv
122.94 280.074 122.722 280.103 122.503 280.086 cv
122.185 280.063 121.865 279.92 121.641 279.705 cv
122.221 279.939 122.778 279.707 123.245 279.393 cv
cp
86.9741 255.869 mo
87.0436 255.612 li
87.09 255.447 87.1235 255.297 87.1804 255.119 cv
87.286 254.771 87.4113 254.44 87.5345 254.115 cv
87.7942 253.466 88.0687 252.819 88.4168 252.218 cv
88.5915 251.918 88.7694 251.621 88.9637 251.332 cv
89.1642 251.036 89.345 250.774 89.6053 250.462 cv
90.47 249.425 li
90.9134 250.732 li
91.1701 251.49 91.4516 252.266 91.7442 253.022 cv
92.0244 253.788 92.3152 254.549 92.6229 255.3 cv
92.9173 256.059 93.2438 256.797 93.5845 257.527 cv
93.7627 257.886 93.9458 258.242 94.1495 258.584 cv
94.3611 258.916 94.5764 259.254 94.8853 259.503 cv
94.5204 259.384 94.1786 259.14 93.8823 258.863 cv
93.5793 258.589 93.3052 258.28 93.0488 257.957 cv
92.5277 257.317 92.0854 256.614 91.6529 255.908 cv
91.6524 255.907 91.6519 255.906 91.6514 255.905 cv
91.4147 256.149 91.1448 256.418 90.9125 256.535 cv
90.9682 256.987 90.9933 257.362 91.0387 257.79 cv
91.0852 258.276 91.1323 258.771 91.1794 259.265 cv
91.1993 260.259 91.2193 261.253 91.2379 262.185 cv
91.2638 263.116 91.1566 263.995 91.1316 264.743 cv
91.1008 265.492 90.9721 266.124 90.9302 266.562 cv
90.8525 267.004 90.8083 267.256 90.8083 267.256 cv
90.8083 267.256 90.7355 267.012 90.608 266.586 cv
90.5163 266.157 90.3165 265.549 90.2001 264.811 cv
90.0898 264.073 89.883 263.217 89.8022 262.289 cv
89.7333 261.565 89.6607 260.8 89.5876 260.03 cv
88.5907 260.556 87.6484 261.207 86.7757 261.962 cv
86.7798 262.471 86.7345 263.034 86.5974 263.571 cv
86.2775 264.888 85.6621 266.092 85.0757 267.223 cv
84.4124 268.32 83.7105 269.385 83.0148 270.347 cv
82.327 271.318 81.5482 272.093 80.9177 272.78 cv
80.2813 273.464 79.6615 273.93 79.2576 274.283 cv
78.8274 274.604 78.5816 274.787 78.5816 274.787 cv
78.5816 274.787 78.7437 274.511 79.0272 274.028 cv
79.3335 273.572 79.7067 272.86 80.2179 272.084 cv
80.7349 271.312 81.25 270.339 81.8687 269.368 cv
82.4854 268.393 83.1008 267.322 83.6758 266.226 cv
83.7233 266.147 83.7681 266.069 83.8151 265.99 cv
83.7912 264.506 83.6472 263.025 83.3987 261.567 cv
82.5748 262.058 81.7304 262.494 80.8505 262.834 cv
81.8122 262.001 82.763 261.182 83.6614 260.311 cv
84.5563 259.445 85.4268 258.543 86.1165 257.558 cv
86.453 257.063 86.7571 256.557 86.9187 256.054 cv
86.9741 255.869 li
cp
41.6771 265.866 mo
42.2759 265.096 42.8662 264.314 43.3743 263.494 cv
43.8678 262.704 44.3088 261.763 44.8226 260.889 cv
45.3217 260.01 45.8344 259.142 46.359 258.284 cv
47.4009 256.562 48.5078 254.893 49.6585 253.253 cv
50.2361 252.435 50.8257 251.625 51.445 250.831 cv
51.8983 250.264 li
52.3464 249.678 li
52.6079 249.297 52.8718 248.924 53.1323 248.504 cv
54.1804 246.867 55.121 245.109 56.0411 243.347 cv
56.9584 241.581 57.8245 239.778 58.6195 237.943 cv
59.4154 236.112 60.1754 234.251 60.7245 232.357 cv
61.2743 230.461 li
62.0544 232.222 li
62.7494 233.79 63.4248 235.384 64.1524 236.93 cv
64.7059 238.078 li
64.8958 238.449 65.0828 238.836 65.2795 239.161 cv
66.6354 241.332 li
67.539 242.788 68.3629 244.311 69.1373 245.861 cv
69.8842 247.419 70.6269 249.036 70.8989 250.792 cv
70.78 250.369 70.647 249.958 70.478 249.56 cv
70.314 249.162 70.13 248.775 69.9408 248.392 cv
69.5711 247.621 69.1396 246.887 68.7094 246.156 cv
67.8333 244.703 66.8666 243.322 65.9051 241.939 cv
64.4274 239.88 li
63.9084 239.124 63.5149 238.376 63.1057 237.613 cv
63.1752 237.983 63.2452 238.356 63.3104 238.705 cv
63.4061 239.176 63.3692 239.657 63.4019 240.049 cv
63.4289 240.442 63.3525 240.803 63.3453 241.04 cv
63.3037 241.289 63.2801 241.431 63.2801 241.431 cv
63.2801 241.431 63.1913 241.327 63.0359 241.144 cv
62.9147 240.95 62.6755 240.694 62.5072 240.348 cv
62.3717 240.058 62.1765 239.735 62.0255 239.376 cv
61.6376 239.66 61.1768 239.983 60.8548 240.197 cv
60.9342 240.638 60.9146 241.076 60.8686 241.442 cv
60.8128 241.827 60.7561 242.219 60.6995 242.61 cv
60.5345 243.332 60.4112 244.077 60.3219 244.787 cv
60.2381 245.495 60.0545 246.163 59.969 246.745 cv
59.8784 247.326 59.7062 247.813 59.634 248.155 cv
59.5265 248.497 59.4651 248.693 59.4651 248.693 cv
59.4651 248.693 59.4092 248.495 59.3114 248.149 cv
59.2494 247.804 59.0925 247.308 59.0361 246.71 cv
58.9885 246.14 58.8716 245.467 58.8891 244.746 cv
58.8858 244.75 58.8826 244.755 58.8793 244.759 cv
57.8363 246.163 56.7932 247.567 55.7501 248.971 cv
55.3204 249.549 54.891 250.127 54.4616 250.705 cv
54.8388 250.403 55.234 250.143 55.5467 249.872 cv
55.9119 249.564 56.2896 249.369 56.5192 249.197 cv
56.775 249.05 56.9212 248.967 56.9212 248.967 cv
56.9212 248.967 56.862 249.139 56.7584 249.441 cv
56.6276 249.715 56.4916 250.161 56.2204 250.599 cv
55.9452 251.031 55.6649 251.6 55.2193 252.072 cv
54.7839 252.548 54.2693 253.034 53.7043 253.446 cv
53.6832 253.458 53.6634 253.466 53.6423 253.478 cv
53.6063 253.59 53.5696 253.705 53.527 253.825 cv
53.3069 254.416 53.1158 255.104 53.0732 255.666 cv
53.0106 256.258 53.1615 257.055 53.2366 257.951 cv
53.2404 258.828 53.2011 259.702 53.1269 260.515 cv
53.0629 261.331 52.8315 262.068 52.6823 262.695 cv
52.5262 263.323 52.2758 263.813 52.1407 264.16 cv
51.9689 264.495 51.8707 264.687 51.8707 264.687 cv
51.8707 264.687 51.8541 264.468 51.8249 264.084 cv
51.8282 263.71 51.7523 263.166 51.7585 262.544 cv
51.7703 261.92 51.6838 261.191 51.6902 260.43 cv
51.6922 259.666 51.6569 258.854 51.5823 258.048 cv
51.5842 257.958 51.5805 257.862 51.5794 257.769 cv
49.7044 258.871 47.8994 260.121 46.1816 261.51 cv
46.1583 261.592 46.1365 261.673 46.1247 261.749 cv
46.0709 262.114 46.1581 262.409 46.356 262.822 cv
46.556 263.225 46.8934 263.653 47.2583 264.127 cv
47.6163 264.589 47.9846 265.048 48.3636 265.487 cv
49.0742 266.443 49.7983 267.238 50.626 268.027 cv
51.0369 268.432 51.4305 268.91 51.7229 269.449 cv
52.0114 269.989 52.1872 270.535 52.3083 271.029 cv
52.5463 272.029 52.4685 272.863 52.4704 273.424 cv
52.4222 273.989 52.3948 274.312 52.3948 274.312 cv
52.3948 274.312 52.3058 274.006 52.1502 273.469 cv
52.0187 272.936 51.7639 272.183 51.4315 271.39 cv
51.2695 270.99 51.0317 270.606 50.748 270.268 cv
50.462 269.931 50.1019 269.623 49.7031 269.269 cv
49.3987 269.017 49.0768 268.728 48.753 268.426 cv
48.8383 268.737 48.9123 269.056 48.9584 269.387 cv
48.9853 269.845 48.9719 270.309 48.911 270.761 cv
48.8782 270.987 48.8384 271.21 48.784 271.426 cv
48.7156 271.73 48.7165 271.63 48.709 271.768 cv
48.699 272.203 48.8233 272.969 48.9397 273.549 cv
49.064 274.15 49.0351 274.751 48.9322 275.136 cv
48.7938 275.53 48.5954 275.617 48.6107 275.625 cv
48.6009 275.624 48.6953 275.411 48.6107 275.105 cv
48.5678 274.795 48.3128 274.418 48.0638 273.912 cv
47.9297 273.648 47.7839 273.362 47.63 273.059 cv
47.4802 272.731 47.3109 272.368 47.271 271.824 cv
47.2312 271.59 47.3231 271.118 47.3298 271.052 cv
47.3532 270.897 47.3654 270.737 47.3736 270.577 cv
47.3856 270.254 47.3633 269.923 47.3121 269.595 cv
47.2856 268.927 47.129 268.246 46.8968 267.641 cv
46.6632 267.036 46.4569 266.412 46.1877 265.926 cv
46.0767 265.718 45.9808 265.517 45.8915 265.328 cv
45.9002 265.714 45.888 266.12 45.8026 266.564 cv
45.6506 267.112 45.4097 267.567 45.1772 267.955 cv
44.945 268.348 44.7111 268.665 44.4804 268.995 cv
44.0285 269.653 43.5001 270.18 43.1036 270.671 cv
42.702 271.16 42.2861 271.496 42.0346 271.761 cv
41.7549 272.002 41.5951 272.14 41.5951 272.14 cv
41.5951 272.14 41.6614 271.923 41.7775 271.542 cv
41.9217 271.186 42.0711 270.633 42.3478 270.055 cv
42.6297 269.481 42.8927 268.764 43.2887 268.088 cv
43.4209 267.863 43.551 267.631 43.675 267.399 cv
42.5013 267.654 41.3561 268.056 40.2594 268.592 cv
40.2506 268.6 40.2421 268.609 40.2333 268.618 cv
38.843 269.986 37.4264 271.313 35.946 272.549 cv
37.2625 271.099 38.5714 269.647 39.8356 268.153 cv
40.4627 267.401 41.0865 266.647 41.6771 265.866 cv
cp
9.61947 280.957 mo
10.0668 280.475 10.5246 279.999 11.0096 279.551 cv
11.7273 278.906 li
11.9594 278.688 12.2198 278.465 12.3892 278.253 cv
12.7747 277.842 13.1432 277.311 13.4806 276.792 cv
13.8246 276.268 14.1343 275.697 14.4438 275.122 cv
15.0624 273.964 15.6171 272.719 16.4116 271.53 cv
16.6204 271.236 16.8254 270.94 17.0745 270.662 cv
17.1891 270.518 17.3193 270.383 17.4587 270.254 cv
17.8213 269.908 li
18.1694 269.569 18.5357 269.052 18.8517 268.525 cv
19.4973 267.457 20.073 266.271 20.5975 265.061 cv
21.1161 263.849 21.6083 262.594 22.0611 261.358 cv
22.9669 258.886 li
23.5001 261.417 li
23.624 262.006 23.8013 262.618 23.9498 263.223 cv
24.1057 263.83 24.2941 264.422 24.4749 265.019 cv
24.6666 265.61 24.8744 266.194 25.1198 266.757 cv
25.3757 267.312 25.6444 267.871 26.0882 268.305 cv
25.5178 268.107 25.0319 267.638 24.6259 267.146 cv
24.5711 267.08 24.5261 267.006 24.4735 266.938 cv
24.4909 267.586 24.4583 268.2 24.4223 268.739 cv
24.3851 269.383 24.2263 269.952 24.2157 270.436 cv
24.1961 270.913 24.1336 271.347 24.1831 271.643 cv
24.1927 271.953 24.227 272.14 24.227 272.14 cv
24.227 272.14 24.0959 272.032 23.8871 271.787 cv
23.7063 271.534 23.4277 271.124 23.2897 270.568 cv
23.1556 270.018 23.0015 269.369 22.9837 268.712 cv
22.9593 268.056 22.9331 267.396 22.8273 266.812 cv
22.8059 266.241 22.6464 265.627 22.4965 264.965 cv
22.4833 264.909 22.4782 264.853 22.4674 264.797 cv
22.3305 265.146 22.2001 265.498 22.0544 265.845 cv
21.8336 266.364 21.6057 266.882 21.3666 267.395 cv
21.3799 267.557 21.3953 267.721 21.3919 267.889 cv
21.3855 268.324 21.41 268.798 21.4476 269.284 cv
21.4157 269.774 21.4049 270.28 21.3837 270.747 cv
21.3724 271.215 21.2303 271.658 21.1755 272.037 cv
21.1149 272.416 20.9613 272.739 20.902 272.963 cv
20.8071 273.189 20.7528 273.318 20.7528 273.318 cv
20.7528 273.318 20.6899 273.196 20.5796 272.981 cv
20.505 272.764 20.3297 272.456 20.2428 272.078 cv
20.1861 271.814 20.0859 271.518 20.0149 271.201 cv
19.959 271.276 19.9028 271.35 19.8473 271.425 cv
19.3337 272.114 18.8637 272.844 18.4412 273.607 cv
18.2309 273.986 18.0426 274.559 17.7775 274.998 cv
17.733 275.177 17.6941 275.354 17.6757 275.523 cv
17.6302 275.895 17.6763 276.29 17.7405 276.813 cv
17.7726 277.33 17.7679 277.97 17.6968 278.521 cv
17.6238 279.082 17.5056 279.609 17.3719 280.1 cv
17.1027 281.083 16.6645 281.867 16.3807 282.562 cv
16.0876 283.253 15.7732 283.799 15.6212 284.216 cv
15.4313 284.621 15.3413 284.868 15.3413 284.868 cv
15.3413 284.868 15.3141 284.606 15.3068 284.134 cv
15.3297 283.673 15.3384 282.984 15.4988 282.219 cv
15.6404 281.475 15.8059 280.607 15.9828 279.679 cv
16.0016 279.582 16.0148 279.483 16.0314 279.386 cv
15.9565 279.431 15.8797 279.473 15.8032 279.512 cv
14.4377 280.206 13.0722 280.901 11.7068 281.595 cv
11.4054 281.748 10.8847 282.127 10.4211 282.333 cv
10.3173 282.627 10.2214 282.929 10.1473 283.241 cv
10.0042 283.689 9.90415 284.14 9.82457 284.601 cv
9.74612 285.061 9.60368 285.5 9.46994 285.869 cv
9.33722 286.243 9.12807 286.506 8.99039 286.673 cv
8.83782 286.832 8.73912 286.899 8.73912 286.899 cv
8.73912 286.899 8.79632 286.784 8.85483 286.574 cv
8.93056 286.375 8.97206 286.072 9.02207 285.721 cv
9.08018 285.37 9.06257 284.941 9.1142 284.474 cv
9.15884 284.006 9.23447 283.472 9.35666 282.963 cv
9.40606 282.808 9.46539 282.66 9.52178 282.51 cv
7.88397 284.002 6.27107 285.552 4.65625 287.115 cv
6.18715 284.947 7.82515 282.879 9.61947 280.957 cv
cp
135.841 275.132 mo
133.398 272.643 132.618 266.372 132.61 266.309 cv
132.353 264.176 li
131.145 265.844 li
131.053 265.972 128.869 268.997 127.427 271.608 cv
125.404 275.272 122.462 278.737 121.237 277.932 cv
119.322 276.678 115.896 270.712 114.626 265.537 cv
113.349 260.336 111.168 255.234 111.076 255.019 cv
110.664 254.06 li
109.873 254.646 li
109.665 254.8 107.813 256.288 106.974 260.905 cv
106.435 263.867 103.727 265.894 102.493 266.679 cv
101.105 264.406 97.4933 258.711 95.5706 257.732 cv
94.5008 257.187 92.5344 252.388 91.3276 248.253 cv
90.8773 246.713 li
89.92 247.925 li
89.8083 248.066 87.1721 251.428 86.0973 255.049 cv
85.4154 257.344 82.1094 259.863 80.3657 260.988 cv
77.9757 258.274 72.9463 252.12 72.4361 249.404 cv
71.806 246.057 68.4887 240.895 66.0477 237.304 cv
65.7691 236.893 li
64.9705 235.704 62.8745 230.435 62.1335 228.505 cv
61.2296 226.15 li
60.5777 228.607 li
59.0178 234.484 53.6871 245.986 51.0703 249.12 cv
48.2608 252.487 44.2308 258.611 42.2296 262.216 cv
40.5183 265.3 35.1381 270.615 33.6965 272.013 cv
31.4135 271.042 30.1994 269.343 29.1215 267.835 cv
28.3974 266.821 27.7131 265.863 26.806 265.295 cv
25.5369 264.5 24.2354 260.179 23.7138 257.643 cv
23.0586 254.462 li
22.1208 257.552 li
21.3902 259.956 19.1023 266.543 17.3068 268.128 cv
16.0927 269.2 15.2286 270.881 14.3134 272.661 cv
13.2946 274.642 12.2409 276.69 10.6559 277.983 cv
7.43823 280.605 2.15773 287.388 1.93501 287.675 cv
.725037 289.234 li
144.9 289.215 li
143.618 286.987 li
143.415 286.619 138.598 277.94 135.841 275.132 cv
cp
f
180.278 273.69 mo
175.92 275.777 li
175.708 281.245 li
174.835 276.646 li
170.808 280.473 li
171.898 277.958 173.03 275.616 173.03 275.616 cv
173.03 275.616 171.319 277.868 169.701 280.228 cv
169.696 280.235 169.691 280.242 169.687 280.249 cv
174.427 270.414 li
180.03 272.273 li
177.873 272.256 li
180.278 273.69 li
cp
232.267 235.148 mo
228.015 233.873 li
229.789 235.223 li
225.481 235.353 li
225.304 239.166 li
224.311 235.861 li
220.235 240.591 li
222.515 236.431 li
220.975 237.086 li
223.357 234.006 li
219.4 236.769 li
224.471 230.846 li
232.493 235.142 li
232.267 235.148 li
cp
254.606 252.229 mo
242.492 239.271 li
245.415 246.081 li
241.259 239.391 li
241.741 244.932 li
239.683 236.266 li
238.112 234.584 li
235.649 234.276 li
238.174 232.057 li
236.335 232.512 li
238.77 230.846 li
254.606 252.229 li
cp
296.207 270.596 mo
295.527 269.519 295.049 268.713 295.049 268.713 cv
295.049 268.713 295.77 271.033 296.621 273.314 cv
296.94 274.182 297.277 275.042 297.572 275.776 cv
293.336 269.078 li
294.031 274.487 li
291.613 266.844 li
289.787 266.52 li
292.21 264.503 li
289.719 265.225 li
293.348 262.5 li
296.207 270.596 li
cp
291.613 269.434 mo
291.613 269.434 291.821 270.024 292.134 270.909 cv
292.277 271.357 292.443 271.879 292.622 272.438 cv
292.788 273.002 292.966 273.604 293.143 274.206 cv
293.305 274.813 293.467 275.42 293.619 275.99 cv
293.759 276.564 293.889 277.1 294.001 277.559 cv
294.197 278.487 294.328 279.107 294.328 279.107 cv
294.328 279.107 294.119 278.517 293.806 277.632 cv
293.663 277.184 293.497 276.662 293.319 276.102 cv
293.152 275.538 292.975 274.937 292.797 274.335 cv
292.636 273.728 292.474 273.12 292.322 272.551 cv
292.182 271.977 292.052 271.441 291.94 270.982 cv
291.743 270.053 291.613 269.434 291.613 269.434 cv
cp
262.997 254.994 mo
263.203 254.855 263.422 254.707 263.642 254.558 cv
263.87 254.426 264.097 254.294 264.31 254.171 cv
264.53 254.06 264.734 253.957 264.91 253.868 cv
265.274 253.72 265.518 253.621 265.518 253.621 cv
265.518 253.621 265.314 253.803 265.007 254.076 cv
264.847 254.197 264.661 254.339 264.461 254.491 cv
264.255 254.63 264.035 254.779 263.815 254.927 cv
263.588 255.059 263.36 255.191 263.147 255.314 cv
262.928 255.425 262.723 255.528 262.548 255.617 cv
262.183 255.765 261.94 255.864 261.94 255.864 cv
261.94 255.864 262.144 255.682 262.45 255.41 cv
262.61 255.288 262.797 255.146 262.997 254.994 cv
cp
263.783 259.926 mo
263.862 259.716 li
263.834 259.859 li
264.39 259.157 li
264.621 258.89 264.89 258.579 265.178 258.246 cv
265.475 257.923 265.792 257.579 266.108 257.235 cv
266.436 256.905 266.763 256.575 267.071 256.266 cv
267.386 255.967 267.681 255.688 267.933 255.449 cv
268.457 254.997 268.807 254.695 268.807 254.695 cv
268.807 254.695 268.512 255.067 268.071 255.625 cv
267.84 255.891 267.571 256.203 267.282 256.536 cv
266.986 256.858 266.669 257.202 266.352 257.546 cv
266.025 257.876 265.697 258.206 265.39 258.515 cv
265.074 258.814 264.78 259.092 264.527 259.331 cv
263.813 259.949 li
263.755 259.999 li
263.783 259.926 li
cp
286.198 266.086 mo
285.915 265.858 285.585 265.592 285.231 265.307 cv
284.885 265.011 284.516 264.694 284.147 264.378 cv
283.788 264.047 283.428 263.716 283.092 263.406 cv
282.763 263.084 282.456 262.783 282.193 262.525 cv
281.684 261.984 281.345 261.623 281.345 261.623 cv
281.345 261.623 281.734 261.909 282.317 262.339 cv
282.6 262.566 282.93 262.832 283.284 263.117 cv
283.63 263.413 283.999 263.73 284.368 264.046 cv
284.727 264.377 285.087 264.708 285.423 265.018 cv
285.752 265.34 286.059 265.641 286.323 265.898 cv
286.831 266.44 287.17 266.801 287.17 266.801 cv
287.17 266.801 286.781 266.515 286.198 266.086 cv
cp
272.889 247.779 mo
275.898 246.098 li
284.862 263.802 li
275.028 253.948 li
278.445 259.824 li
272.88 253.158 li
268.781 256.243 li
271.018 253.471 li
266.025 254.374 li
266.45 254.069 266.889 253.749 267.323 253.423 cv
269.669 251.689 271.894 249.787 271.894 249.787 cv
271.894 249.787 269.387 251.148 266.824 252.302 cv
266.3 252.543 265.775 252.774 265.27 252.99 cv
273.828 246.308 li
272.889 247.779 li
cp
251.246 250.428 mo
251.246 250.428 251.669 250.774 252.304 251.292 cv
252.613 251.564 252.972 251.882 253.358 252.222 cv
253.735 252.573 254.137 252.948 254.54 253.323 cv
254.932 253.712 255.324 254.101 255.691 254.466 cv
256.05 254.842 256.386 255.193 256.673 255.494 cv
257.23 256.122 257.601 256.54 257.601 256.54 cv
257.601 256.54 257.177 256.195 256.542 255.676 cv
256.234 255.404 255.874 255.086 255.489 254.746 cv
255.112 254.395 254.709 254.02 254.307 253.645 cv
253.915 253.256 253.523 252.867 253.156 252.502 cv
252.797 252.125 252.461 251.774 252.174 251.473 cv
251.617 250.846 251.246 250.428 251.246 250.428 cv
cp
239.367 237.369 mo
239.367 237.369 239.547 238.328 239.817 239.767 cv
239.938 240.489 240.079 241.332 240.23 242.235 cv
240.369 243.14 240.517 244.105 240.665 245.07 cv
240.797 246.039 240.929 247.007 241.052 247.915 cv
241.163 248.826 241.267 249.676 241.356 250.404 cv
241.505 251.866 241.605 252.841 241.605 252.841 cv
241.605 252.841 241.424 251.882 241.154 250.443 cv
241.033 249.721 240.892 248.878 240.741 247.975 cv
240.602 247.07 240.455 246.105 240.307 245.14 cv
240.175 244.171 240.043 243.202 239.92 242.295 cv
239.809 241.384 239.705 240.534 239.616 239.806 cv
239.467 238.344 239.367 237.369 239.367 237.369 cv
cp
218.121 242.007 mo
218.261 241.762 218.424 241.476 218.598 241.169 cv
218.783 240.872 218.979 240.554 219.176 240.236 cv
219.386 239.93 219.596 239.624 219.793 239.336 cv
220 239.058 220.193 238.798 220.358 238.576 cv
220.712 238.15 220.949 237.867 220.949 237.867 cv
220.949 237.867 220.778 238.207 220.522 238.718 cv
220.382 238.963 220.219 239.249 220.045 239.556 cv
219.86 239.854 219.663 240.171 219.466 240.489 cv
219.256 240.795 219.047 241.101 218.85 241.388 cv
218.643 241.667 218.45 241.927 218.284 242.149 cv
217.93 242.575 217.694 242.858 217.694 242.858 cv
217.694 242.858 217.865 242.518 218.121 242.007 cv
cp
201.911 257.825 mo
201.911 257.825 202.117 257.135 202.426 256.1 cv
202.594 255.588 202.79 254.992 203 254.353 cv
203.222 253.719 203.458 253.044 203.695 252.368 cv
203.946 251.699 204.198 251.031 204.434 250.404 cv
204.681 249.784 204.912 249.204 205.11 248.707 cv
205.532 247.727 205.814 247.073 205.814 247.073 cv
205.814 247.073 205.608 247.763 205.299 248.799 cv
205.131 249.31 204.935 249.906 204.725 250.546 cv
204.503 251.179 204.266 251.855 204.03 252.53 cv
203.778 253.199 203.527 253.867 203.291 254.494 cv
203.043 255.115 202.813 255.694 202.615 256.191 cv
202.192 257.172 201.911 257.825 201.911 257.825 cv
cp
189.426 261.601 mo
189.737 261.095 190.068 260.556 190.399 260.016 cv
190.743 259.488 191.088 258.96 191.411 258.465 cv
191.744 257.978 192.054 257.524 192.321 257.135 cv
192.877 256.376 193.248 255.87 193.248 255.87 cv
193.248 255.87 192.943 256.432 192.486 257.274 cv
192.246 257.686 191.966 258.166 191.665 258.68 cv
191.355 259.185 191.024 259.725 190.692 260.264 cv
190.348 260.792 190.003 261.32 189.681 261.815 cv
189.347 262.302 189.037 262.756 188.77 263.145 cv
188.214 263.904 187.843 264.41 187.843 264.41 cv
187.843 264.41 188.148 263.849 188.605 263.006 cv
188.846 262.595 189.126 262.115 189.426 261.601 cv
cp
174.5 277.965 mo
174.5 277.965 174.608 278.366 174.769 278.968 cv
174.836 279.272 174.914 279.626 174.998 280.006 cv
175.069 280.389 175.145 280.797 175.221 281.205 cv
175.281 281.617 175.34 282.029 175.396 282.415 cv
175.44 282.803 175.481 283.166 175.516 283.477 cv
175.557 284.105 175.585 284.524 175.585 284.524 cv
175.585 284.524 175.477 284.123 175.314 283.521 cv
175.248 283.218 175.17 282.863 175.086 282.483 cv
175.015 282.1 174.939 281.692 174.864 281.284 cv
174.804 280.872 174.744 280.461 174.688 280.075 cv
174.645 279.686 174.604 279.323 174.569 279.012 cv
174.527 278.384 174.5 277.965 174.5 277.965 cv
cp
299.389 280.431 mo
299.215 280.193 299.01 279.915 298.792 279.617 cv
298.583 279.31 298.361 278.983 298.139 278.655 cv
297.929 278.317 297.72 277.978 297.524 277.661 cv
297.338 277.335 297.164 277.03 297.015 276.769 cv
296.74 276.228 296.557 275.866 296.557 275.866 cv
296.557 275.866 296.805 276.171 297.178 276.628 cv
297.353 276.866 297.557 277.145 297.776 277.443 cv
297.984 277.749 298.207 278.076 298.429 278.404 cv
298.639 278.742 298.848 279.081 299.044 279.398 cv
299.231 279.724 299.404 280.028 299.553 280.289 cv
299.828 280.831 300.011 281.192 300.011 281.192 cv
300.011 281.192 299.762 280.888 299.389 280.431 cv
cp
204.478 240.019 mo
206.981 235.581 li
214.7 239.093 li
212.869 239.05 li
214.732 240.395 li
209.134 242.039 li
210.527 246.164 li
208.253 242.503 li
205.746 244.982 li
201.659 254.593 li
203.967 246.741 li
193.76 256.831 li
200.134 246.596 li
194.431 253.81 li
206.252 235.764 li
204.478 240.019 li
cp
295.369 261.548 mo
294.372 258.724 li
292.158 260.386 li
287.451 263.92 li
277.272 243.817 li
276.096 241.493 li
274.165 243.001 li
259.544 254.417 li
240.412 229.184 li
239.217 227.608 li
237.657 228.676 li
232.368 232.295 li
225.39 228.558 li
224.024 227.826 li
222.947 229.041 li
215.936 236.945 li
207.311 233.021 li
205.77 232.32 li
204.77 233.846 li
181.088 270 li
175.03 267.99 li
173.363 267.437 li
172.52 269.187 li
164.673 285.467 li
162.866 289.215 li
166.58 289.215 li
301.892 289.215 li
305.141 289.215 li
303.913 285.741 li
295.369 261.548 li
cp
f
459.727 271.698 mo
455.778 264.304 li
451.796 256.935 li
450.595 254.712 li
449.839 257.245 li
449.23 259.288 li
448.351 256.958 li
447.35 254.305 li
445.917 256.785 li
439.698 267.546 li
438.148 264.109 436.584 260.681 435.024 257.251 cv
433.412 253.706 li
431.598 257.21 li
431.422 257.55 li
430.236 254.55 li
428.752 250.794 li
426.557 254.173 li
424.402 257.489 li
416.768 237.745 li
414.382 231.576 li
412.193 237.893 li
411.617 239.558 li
408.015 234.515 li
405.682 231.25 li
403.801 234.884 li
393.531 254.717 li
384.419 238.056 li
382.359 234.29 li
380.122 237.904 li
378.341 240.781 li
377.499 238.885 376.663 236.986 375.811 235.096 cv
373.612 230.218 li
371.398 235.019 li
364.927 249.049 li
363.407 252.357 361.878 255.66 360.359 258.968 cv
359.998 258.216 li
358.059 254.168 li
356.356 257.997 li
355.689 256.14 li
354.117 251.764 li
352.189 255.876 li
348.806 263.088 li
346.713 267.615 li
341.4 258.96 li
339.625 256.069 li
338.909 259.41 li
338.358 261.984 li
337.092 257.943 li
336.201 255.1 li
335.243 257.85 li
333.585 262.611 331.968 267.392 330.346 272.171 cv
328.709 276.942 327.144 281.747 325.543 286.535 cv
327.479 281.906 329.45 277.293 331.349 272.646 cv
332.419 270.052 333.489 267.459 334.554 264.863 cv
334.263 281.072 li
336.165 266.098 li
336.972 268.222 li
337.157 266.182 li
337.42 267.207 li
338.562 271.648 li
339.75 267.145 li
340.118 265.751 li
343.278 282.479 li
342.012 265.919 li
345.529 272.237 li
346.97 274.827 li
348.365 272.11 li
351.818 265.383 li
351.871 267.477 li
352.741 265.228 li
353.313 275.497 li
354.392 264.789 li
355.799 269.108 li
357.44 265.702 li
358.413 271.118 li
358.917 266.397 li
360.299 269.52 li
362.332 265.388 li
364.601 260.778 366.817 256.137 369.062 251.513 cv
369.557 250.489 li
365.995 261.8 li
372.039 248.128 li
373.049 258.401 li
374.79 245.514 li
375.095 246.217 375.392 246.924 375.699 247.626 cv
377.588 251.954 li
380.067 248.005 li
380.324 247.594 li
384.409 269.925 li
383.651 249.505 li
386.888 256.63 li
385.62 251.424 li
391.339 262.036 li
393.654 266.332 li
395.878 261.976 li
403.126 247.781 li
403.059 248.026 402.991 248.272 402.92 248.518 cv
402.001 251.846 400.73 255.066 400.73 255.066 cv
400.73 255.066 402.497 252.159 403.964 249.011 cv
404.361 248.183 404.734 247.342 405.069 246.55 cv
407.046 267.376 li
408.116 246.103 li
410.824 250.059 li
409.125 245.175 li
410.418 246.96 li
413.226 250.839 li
414.072 248.257 li
416.112 261.644 li
415.917 251.838 li
419.082 261.539 li
417.583 253.093 li
421.852 263.564 li
423.514 267.639 li
425.739 263.993 li
427.164 261.657 li
427.544 271.75 li
428.777 262.174 li
429.344 263.491 li
431.082 267.528 li
432.658 264.243 li
433.475 269.211 li
434.192 264.614 li
435.455 267.177 436.722 269.738 438.006 272.289 cv
439.488 275.23 li
440.969 272.395 li
443.925 266.734 li
442.984 270.472 li
445.548 265.631 li
444.721 277.535 li
447.673 262.49 li
448.237 263.793 li
449.696 267.163 li
450.553 263.621 li
450.704 262.994 li
454.237 275.793 li
452.878 264.879 li
456.249 270.652 li
454.981 266.428 li
458.708 272.438 li
463.114 279.499 li
467.553 286.535 li
463.657 279.104 li
459.727 271.698 li
cp
f
405.551 265.322 mo
405.49 264.358 405.426 263.329 405.361 262.3 cv
405.263 261.274 405.165 260.249 405.073 259.287 cv
404.982 258.326 404.841 257.434 404.749 256.666 cv
404.654 255.899 404.53 255.265 404.464 254.818 cv
404.382 254.374 404.335 254.119 404.335 254.119 cv
404.335 254.119 404.329 254.379 404.319 254.833 cv
404.324 255.285 404.301 255.935 404.328 256.709 cv
404.358 257.482 404.36 258.388 404.422 259.352 cv
404.482 260.317 404.546 261.346 404.611 262.375 cv
404.709 263.401 404.807 264.426 404.899 265.388 cv
404.987 266.349 405.13 267.241 405.222 268.008 cv
405.316 268.776 405.441 269.41 405.507 269.857 cv
405.59 270.301 405.636 270.555 405.636 270.555 cv
405.636 270.555 405.643 270.296 405.654 269.842 cv
405.648 269.389 405.672 268.74 405.645 267.966 cv
405.615 267.193 405.615 266.287 405.551 265.322 cv
cp
f
374.523 254.185 mo
374.406 254.965 374.236 255.869 374.113 256.847 cv
373.989 257.825 373.857 258.868 373.724 259.91 cv
373.626 260.958 373.527 262.005 373.434 262.987 cv
373.339 263.969 373.309 264.893 373.253 265.681 cv
373.199 266.47 373.202 267.133 373.182 267.595 cv
373.177 268.058 373.175 268.323 373.175 268.323 cv
373.175 268.323 373.23 268.066 373.327 267.615 cv
373.408 267.162 373.555 266.519 373.674 265.74 cv
373.791 264.96 373.964 264.056 374.084 263.078 cv
374.208 262.1 374.34 261.057 374.472 260.014 cv
374.571 258.967 374.669 257.92 374.762 256.938 cv
374.856 255.956 374.887 255.032 374.943 254.244 cv
374.996 253.455 374.995 252.792 375.015 252.33 cv
375.019 251.866 375.022 251.601 375.022 251.601 cv
375.022 251.601 374.966 251.859 374.87 252.31 cv
374.789 252.763 374.644 253.406 374.523 254.185 cv
cp
f
446.763 271.736 mo
446.632 272.345 446.447 273.047 446.308 273.813 cv
446.167 274.577 446.017 275.393 445.867 276.209 cv
445.751 277.032 445.634 277.855 445.525 278.626 cv
445.412 279.396 445.366 280.128 445.296 280.749 cv
445.229 281.37 445.22 281.897 445.191 282.262 cv
445.179 282.629 445.172 282.84 445.172 282.84 cv
445.172 282.84 445.232 282.64 445.336 282.291 cv
445.424 281.939 445.581 281.442 445.714 280.834 cv
445.844 280.226 446.032 279.523 446.169 278.758 cv
446.309 277.993 446.459 277.177 446.609 276.361 cv
446.725 275.539 446.842 274.716 446.951 273.944 cv
447.062 273.173 447.11 272.443 447.179 271.822 cv
447.245 271.2 447.256 270.673 447.284 270.309 cv
447.297 269.941 447.304 269.731 447.304 269.731 cv
447.304 269.731 447.245 269.93 447.141 270.279 cv
447.052 270.632 446.896 271.129 446.763 271.736 cv
cp
f
342.224 282.629 mo
342.148 282.015 342.094 281.292 341.974 280.53 cv
341.857 279.768 341.732 278.955 341.607 278.142 cv
341.449 277.337 341.29 276.531 341.142 275.776 cv
340.995 275.02 340.803 274.327 340.666 273.727 cv
340.526 273.128 340.365 272.638 340.274 272.29 cv
340.166 271.946 340.105 271.75 340.105 271.75 cv
340.105 271.75 340.114 271.958 340.13 272.322 cv
340.162 272.682 340.178 273.204 340.251 273.819 cv
340.326 274.432 340.382 275.156 340.5 275.917 cv
340.617 276.68 340.742 277.493 340.867 278.306 cv
341.025 279.111 341.183 279.917 341.331 280.672 cv
341.476 281.428 341.67 282.121 341.807 282.721 cv
341.946 283.321 342.108 283.81 342.2 284.158 cv
342.307 284.502 342.369 284.698 342.369 284.698 cv
342.369 284.698 342.36 284.49 342.344 284.126 cv
342.312 283.765 342.297 283.243 342.224 282.629 cv
cp
f
385.618 266.12 mo
385.586 265.384 385.556 264.696 385.531 264.107 cv
385.462 262.929 385.396 262.144 385.396 262.144 cv
385.396 262.144 385.353 262.931 385.319 264.111 cv
385.311 264.701 385.302 265.389 385.291 266.126 cv
385.294 266.863 385.297 267.649 385.301 268.435 cv
385.321 269.221 385.341 270.007 385.36 270.744 cv
385.392 271.48 385.422 272.168 385.447 272.757 cv
385.516 273.935 385.582 274.72 385.582 274.72 cv
385.582 274.72 385.626 273.933 385.66 272.753 cv
385.668 272.163 385.677 271.475 385.687 270.738 cv
385.684 270.001 385.681 269.215 385.678 268.428 cv
385.657 267.643 385.637 266.857 385.618 266.12 cv
cp
f
352.48 274.276 mo
352.447 273.803 352.411 273.298 352.376 272.794 cv
352.323 272.291 352.271 271.788 352.222 271.317 cv
352.16 270.847 352.102 270.408 352.052 270.032 cv
351.935 269.282 351.837 268.785 351.837 268.785 cv
351.837 268.785 351.826 269.294 351.841 270.056 cv
351.857 270.435 351.876 270.878 351.896 271.353 cv
351.93 271.826 351.965 272.33 352.001 272.835 cv
352.053 273.338 352.105 273.84 352.154 274.312 cv
352.216 274.782 352.275 275.22 352.324 275.596 cv
352.441 276.346 352.54 276.844 352.54 276.844 cv
352.54 276.844 352.551 276.334 352.536 275.573 cv
352.519 275.193 352.5 274.75 352.48 274.276 cv
cp
f
333.295 272.866 mo
333.238 271.859 333.179 271.189 333.179 271.189 cv
333.179 271.189 333.128 271.86 333.084 272.867 cv
333.07 273.371 333.054 273.958 333.037 274.588 cv
333.033 275.217 333.028 275.888 333.024 276.559 cv
333.037 277.23 333.049 277.901 333.061 278.531 cv
333.086 279.16 333.11 279.747 333.13 280.25 cv
333.187 281.256 333.246 281.927 333.246 281.927 cv
333.246 281.927 333.298 281.255 333.342 280.248 cv
333.356 279.745 333.372 279.157 333.389 278.528 cv
333.393 277.899 333.397 277.228 333.401 276.556 cv
333.388 275.885 333.376 275.214 333.364 274.585 cv
333.339 273.956 333.315 273.369 333.295 272.866 cv
cp
f
408.539 251.254 mo
408.498 251.716 408.45 252.256 408.398 252.834 cv
408.36 253.413 408.319 254.03 408.278 254.648 cv
408.254 255.266 408.23 255.885 408.207 256.465 cv
408.198 257.046 408.189 257.588 408.181 258.053 cv
408.183 258.983 408.206 259.605 408.206 259.605 cv
408.206 259.605 408.294 258.99 408.393 258.067 cv
408.434 257.604 408.483 257.065 408.534 256.487 cv
408.572 255.908 408.613 255.29 408.654 254.673 cv
408.678 254.054 408.702 253.436 408.725 252.856 cv
408.734 252.275 408.743 251.733 408.75 251.268 cv
408.748 250.338 408.726 249.716 408.726 249.716 cv
408.726 249.716 408.639 250.33 408.539 251.254 cv
cp
f
416.87 260.619 mo
416.825 259.585 416.774 258.896 416.774 258.896 cv
416.774 258.896 416.715 259.584 416.659 260.617 cv
416.639 261.134 416.616 261.736 416.592 262.382 cv
416.58 263.028 416.568 263.716 416.556 264.405 cv
416.561 265.094 416.565 265.783 416.57 266.429 cv
416.587 267.075 416.604 267.677 416.618 268.194 cv
416.663 269.228 416.715 269.917 416.715 269.917 cv
416.715 269.917 416.774 269.228 416.83 268.196 cv
416.85 267.679 416.873 267.077 416.897 266.431 cv
416.909 265.785 416.921 265.096 416.933 264.408 cv
416.928 263.719 416.923 263.03 416.919 262.384 cv
416.901 261.738 416.885 261.135 416.87 260.619 cv
cp
f
428.294 270.458 mo
428.241 270.793 428.179 271.185 428.113 271.604 cv
428.06 272.025 428.004 272.474 427.947 272.923 cv
427.907 273.374 427.867 273.826 427.83 274.249 cv
427.806 274.674 427.783 275.07 427.764 275.41 cv
427.742 276.092 427.749 276.55 427.749 276.55 cv
427.749 276.55 427.852 276.107 427.975 275.439 cv
428.028 275.103 428.089 274.712 428.155 274.293 cv
428.208 273.872 428.265 273.423 428.321 272.973 cv
428.361 272.522 428.401 272.071 428.438 271.648 cv
428.462 271.223 428.484 270.826 428.504 270.486 cv
428.525 269.804 428.519 269.346 428.519 269.346 cv
428.519 269.346 428.416 269.789 428.294 270.458 cv
cp
f
438.736 276.595 mo
438.492 276.111 438.232 275.594 437.972 275.077 cv
437.697 274.57 437.422 274.062 437.165 273.587 cv
436.896 273.119 436.645 272.682 436.43 272.307 cv
435.984 271.568 435.67 271.087 435.67 271.087 cv
435.67 271.087 435.89 271.63 436.247 272.428 cv
436.433 272.821 436.65 273.28 436.883 273.772 cv
437.127 274.257 437.387 274.774 437.647 275.291 cv
437.922 275.798 438.196 276.306 438.454 276.781 cv
438.723 277.249 438.974 277.686 439.189 278.061 cv
439.634 278.8 439.949 279.281 439.949 279.281 cv
439.949 279.281 439.729 278.737 439.372 277.94 cv
439.186 277.546 438.969 277.087 438.736 276.595 cv
cp
f
455.286 277.464 mo
455.261 276.9 455.233 276.299 455.205 275.697 cv
455.161 275.097 455.117 274.497 455.075 273.935 cv
455.02 273.373 454.969 272.849 454.925 272.4 cv
454.821 271.502 454.73 270.906 454.73 270.906 cv
454.73 270.906 454.711 271.511 454.714 272.416 cv
454.724 272.867 454.736 273.395 454.749 273.959 cv
454.775 274.523 454.802 275.124 454.829 275.726 cv
454.874 276.326 454.918 276.926 454.96 277.489 cv
455.014 278.05 455.065 278.574 455.109 279.024 cv
455.214 279.921 455.305 280.517 455.305 280.517 cv
455.305 280.517 455.324 279.912 455.321 279.008 cv
455.311 278.556 455.299 278.029 455.286 277.464 cv
cp
f
506.658 272.142 mo
506.575 272.972 li
507.274 272.397 li
507.281 272.476 507.287 272.549 507.287 272.603 cv
507.287 273.32 507.737 273.822 508.384 273.831 cv
505.832 275.304 li
508.975 275.171 li
508.84 275.36 508.645 275.546 508.396 275.721 cv
507.772 276.158 507.672 276.671 507.698 277.024 cv
507.736 277.558 508.091 277.981 508.563 278.336 cv
505.142 279.957 li
509.104 279.461 li
508.92 279.548 508.727 279.631 508.529 279.698 cv
507.658 279.995 507.681 280.645 507.709 280.837 cv
507.78 281.326 508.197 281.627 508.676 281.813 cv
508.215 281.947 507.719 282.086 507.217 282.215 cv
505.338 282.714 503.411 283.074 503.411 283.074 cv
503.411 283.074 505.353 283.303 507.324 283.386 cv
507.836 283.411 508.348 283.426 508.827 283.435 cv
507.349 284.136 505.163 284.894 503.506 285.43 cv
499.012 285.587 li
500.81 286.078 li
495.971 286.078 li
499.453 282.885 503.44 278.312 506.658 272.142 cv
cp
545.085 244.124 mo
545.212 243.891 545.337 243.669 545.462 243.45 cv
543.953 247.267 li
546.973 243.155 li
547.01 245.172 547.074 247.144 547.183 248.01 cv
542.686 254.161 li
548.06 249.832 li
548.703 250.691 549.201 251.487 547.342 254.142 cv
546.366 255.536 545.666 257.901 547.88 261.243 cv
547.979 261.391 548.064 261.523 548.138 261.64 cv
542.411 264.501 li
547.495 263.551 li
547.32 263.881 547.158 264.286 547.035 264.814 cv
546.69 266.29 546.857 267.373 546.968 268.09 cv
546.968 268.091 546.968 268.091 546.969 268.092 cv
539.689 269.094 li
545.479 269.697 li
544.79 270.315 544.764 271.136 544.746 271.681 cv
544.741 271.837 544.737 271.972 544.724 272.092 cv
539.118 272.228 li
542.343 273.205 li
540.39 273.569 li
542.747 274.335 li
542.555 274.887 542.64 275.461 542.726 276.024 cv
542.819 276.632 542.934 277.387 542.808 278.434 cv
542.723 279.139 542.654 279.711 542.548 280.201 cv
538.462 281.803 li
540.359 281.692 li
539.836 281.886 539.3 282.088 538.764 282.295 cv
535.583 283.507 532.463 284.855 532.463 284.855 cv
532.463 284.855 535.748 284.068 539.049 283.431 cv
539.363 283.369 539.675 283.309 539.986 283.251 cv
539.687 283.428 539.359 283.612 538.983 283.812 cv
537.232 284.747 534.341 285.531 531.848 286.078 cv
528.652 286.078 li
529.14 285.719 529.561 285.354 529.945 285.021 cv
530.431 284.598 530.851 284.233 531.269 284.002 cv
533.024 283.032 532.698 281.872 532.205 280.117 cv
531.928 279.129 531.548 277.777 531.228 275.786 cv
530.44 270.89 535.223 269.675 535.427 269.626 cv
535.565 269.592 535.692 269.517 535.79 269.408 cv
536.626 268.49 540.751 263.767 539.932 260.918 cv
539.477 259.332 537.694 258.529 534.632 258.529 cv
534.439 258.529 534.254 258.533 534.075 258.538 cv
539.023 254.725 543.514 247.009 545.085 244.124 cv
cp
523.206 261.94 mo
522.823 263.636 li
525.051 261.516 li
525.287 261.616 525.527 261.715 525.766 261.812 cv
526.42 262.079 527.162 262.382 527.42 262.607 cv
527.562 262.73 527.75 262.849 527.954 262.968 cv
523.764 264.877 li
528.31 264.334 li
527.662 264.865 527.522 265.578 527.432 266.079 cv
527.319 266.713 527.296 266.845 526.492 266.902 cv
526.042 266.933 525.107 266.998 524.964 267.821 cv
524.839 268.544 525.413 268.982 526.5 269.55 cv
523.588 269.652 li
526.016 270.56 li
525.997 270.563 525.976 270.564 525.958 270.566 cv
525.344 270.651 524.813 270.725 524.693 271.341 cv
524.577 271.931 525.037 272.228 525.258 272.37 cv
525.685 272.645 526.4 273.106 526.48 274.403 cv
526.487 274.506 526.487 274.587 526.49 274.676 cv
522.18 274.83 li
525.51 276.066 li
525.226 276.14 524.912 276.254 524.643 276.516 cv
524.17 276.977 523.965 277.749 524.095 278.581 cv
524.187 279.166 524.427 279.678 524.756 280.057 cv
516.59 281.873 li
522.16 281.9 li
521.718 282.074 521.229 282.249 520.665 282.42 cv
518.232 283.159 515.215 283.972 513.189 284.506 cv
513.799 283.088 514.503 281.388 515.152 279.66 cv
515.925 277.601 516.206 276.641 516.391 276.005 cv
516.585 275.341 516.658 275.093 517.123 274.215 cv
517.927 272.698 518.616 269.988 518.875 268.894 cv
520.1 267.533 521.315 265.671 522.552 263.266 cv
522.781 262.82 522.997 262.378 523.206 261.94 cv
cp
577.366 255.927 mo
579.171 255.363 580.579 254.565 581.68 253.714 cv
581.741 253.96 581.811 254.243 581.881 254.546 cv
576.437 259.085 li
581.858 256.791 li
581.536 257.615 581.076 258.854 581.094 261.253 cv
581.106 262.801 581.189 263.675 581.527 264.147 cv
577.798 264.432 li
580.809 265.156 li
580.612 265.298 580.443 265.494 580.358 265.787 cv
580.283 266.047 580.3 266.303 580.371 266.549 cv
575.846 267.686 li
581.312 268.165 li
581.974 269.434 582.232 271.323 582.313 272.66 cv
578.056 272.207 li
581.79 274.064 li
581.18 274.72 580.403 275.636 580.096 276.338 cv
579.883 276.824 579.905 277.198 580.011 277.489 cv
576.044 277.164 li
580.736 279.333 li
580.662 279.96 580.525 280.077 579.981 280.395 cv
579.714 280.551 579.583 280.744 579.523 280.921 cv
571.744 283.008 li
581.716 282.516 li
581.659 282.659 581.452 283.036 580.688 283.715 cv
580.195 284.152 579.599 284.524 578.952 284.85 cv
570.902 284.754 li
575.879 285.971 li
575.736 286.008 575.594 286.044 575.451 286.078 cv
564.4 286.078 li
565.127 285.434 565.614 284.753 565.575 284.093 cv
565.554 283.748 565.38 283.121 564.453 282.79 cv
564.354 282.755 564.281 282.71 564.267 282.676 cv
564.147 282.386 564.554 281.398 564.823 280.744 cv
565.285 279.62 565.837 278.277 565.562 277.104 cv
566.837 276.399 567.156 275.643 567.438 274.694 cv
567.59 274.186 567.733 273.706 568.241 273.11 cv
568.683 272.591 569.182 272.136 569.665 271.695 cv
570.949 270.524 572.276 269.312 572.276 267.063 cv
572.276 265.329 573.708 260.535 574.623 257.704 cv
575.344 256.956 576.252 256.274 577.366 255.927 cv
cp
596.611 284.145 mo
596.551 284.116 596.502 284.088 596.463 284.064 cv
596.62 283.918 596.898 283.732 597.145 283.616 cv
597.353 283.519 597.508 283.324 597.563 283.089 cv
597.618 282.853 597.569 282.603 597.429 282.412 cv
595.22 279.401 li
595.511 278.983 596.145 278.34 597.325 278.237 cv
599.187 278.074 599.864 276.18 600.407 274.657 cv
600.675 273.907 600.952 273.132 601.297 272.775 cv
601.884 272.17 603.215 271.267 604.395 270.522 cv
604.409 270.516 604.424 270.51 604.437 270.504 cv
602.033 273.643 li
604.038 272.83 li
604.028 273.248 604.053 273.675 604.151 274.11 cv
604.369 275.079 604.445 275.668 604.49 276.02 cv
604.499 276.085 604.508 276.154 604.519 276.224 cv
601.665 277.728 li
603.363 277.717 li
601.035 278.732 li
605.102 278.462 li
604.724 278.921 604.589 279.542 605.168 280.56 cv
605.512 281.164 605.72 281.604 605.832 281.936 cv
600.133 282.858 li
605.408 283.606 li
605.4 283.696 605.403 283.788 605.416 283.881 cv
605.479 284.297 605.835 284.757 606.46 285.255 cv
606.091 285.265 605.698 285.269 605.302 285.262 cv
603.673 285.254 602.026 285.068 602.026 285.068 cv
602.026 285.068 603.024 285.569 604.249 286.078 cv
598.819 286.078 li
598.61 285.413 597.887 284.776 596.611 284.145 cv
cp
612.315 274.716 mo
609.704 272.532 607.572 265.191 607.572 265.191 cv
605.991 266.673 601.446 268.366 601.446 268.366 cv
601.446 268.366 594.727 260.958 592.652 257.977 cv
590.577 254.995 582.474 248.046 582.474 248.046 cv
582.474 248.046 581.289 251.433 576.546 252.915 cv
571.803 254.396 569.827 259.688 569.827 259.688 cv
563.305 255.666 559.254 247.094 557.871 244.131 cv
556.487 241.167 547.693 235.346 547.693 235.346 cv
547.693 235.346 545.322 237.463 542.555 242.543 cv
539.956 247.315 533.367 257.598 528.811 257.598 cv
528.773 257.598 528.737 257.591 528.7 257.59 cv
526.785 257.056 li
526.771 257.052 526.755 257.051 526.74 257.048 cv
523.318 255.818 522.86 255.085 522.86 255.085 cv
522.86 255.085 518.248 268.366 513.702 268.578 cv
513.534 268.586 513.368 268.59 513.204 268.59 cv
508.942 268.59 506.193 266.038 506.193 266.038 cv
499.671 282.548 486.53 289.215 486.53 289.215 cv
592.652 289.215 li
629.903 289.215 li
618.836 283.395 615.808 277.639 612.315 274.716 cv
cp
f
296.826 388.756 mo
296.391 388.765 295.827 388.904 295.392 388.913 cv
295.481 389.361 295.571 389.809 295.66 390.257 cv
295.365 390.294 294.834 390.064 294.763 390.428 cv
294.707 390.714 295.328 391.232 295.488 391.457 cv
294.917 391.871 294.381 392.206 293.81 392.62 cv
294.291 392.66 294.922 392.735 295.403 392.775 cv
294.225 393.172 293.181 393.427 292.003 393.824 cv
292.51 393.079 293.157 392.184 293.664 391.439 cv
293.505 390.473 293.489 389.489 293.307 388.527 cv
293.126 387.564 292.942 386.454 292.202 385.776 cv
293.928 386.223 295.653 386.67 297.379 387.117 cv
296.614 387.251 296.185 387.504 295.421 387.638 cv
295.84 388.011 296.407 388.384 296.826 388.756 cv
cp
281.086 378.487 mo
280.697 378.917 280.232 379.615 279.843 380.045 cv
280.444 380.474 280.954 380.988 281.555 381.416 cv
281.255 382.187 281.041 382.967 280.74 383.738 cv
281.461 384.023 282.283 384.047 283.005 384.331 cv
282.832 385.161 282.671 386.044 282.498 386.874 cv
282.189 386.422 281.535 386.197 281.226 385.745 cv
280.788 386.305 280.349 386.866 279.911 387.426 cv
280.126 387.616 280.239 387.757 280.535 387.725 cv
280.345 388.689 279.299 390.696 279.536 391.621 cv
279.141 390.08 278.99 388.573 278.594 387.031 cv
279.771 384.982 279.121 382.1 277.441 380.397 cv
276.957 377.562 276.337 374.843 275.36 372.125 cv
277.131 371.409 278.902 370.692 280.672 369.976 cv
279.561 370.975 278.972 371.419 277.861 372.419 cv
277.981 373.133 278.258 373.602 278.378 374.316 cv
280.195 374.71 282.078 375.68 283.546 376.771 cv
282.119 376.133 280.403 376.714 279.573 377.989 cv
280.083 378.16 280.575 378.316 281.086 378.487 cv
cp
273.699 383.737 mo
272.789 382.975 271.923 382.435 271.013 381.673 cv
271.043 382.673 270.81 383.57 270.84 384.569 cv
270.443 384.427 269.965 384.525 269.663 384.808 cv
269.254 385.193 269.396 385.763 269.14 386.205 cv
269.055 386.353 267.635 387.725 267.636 387.725 cv
267.997 387.989 268.718 388.067 269.142 387.909 cv
268.604 389.623 268.343 391.014 267.804 392.728 cv
267.744 390.413 266.563 388.068 264.354 387.092 cv
265.908 385.306 267.579 383.289 269.134 381.502 cv
269.2 377.903 269.408 374.118 269.475 370.519 cv
270.338 370.159 271.201 369.8 272.064 369.44 cv
271.476 369.82 271.124 370.459 271.012 371.127 cv
270.9 371.795 271.029 372.569 271.464 373.105 cv
271.152 373.601 270.84 374.098 270.528 374.595 cv
271.156 375.177 271.716 375.471 271.712 376.272 cv
271.709 376.989 271.276 377.831 271.12 378.539 cv
271.391 378.426 272.075 378.543 272.345 378.43 cv
273.002 379.346 273.604 380.39 274.261 381.306 cv
273.389 381.17 272.335 381.125 271.463 380.988 cv
272.214 381.903 272.948 382.823 273.699 383.737 cv
cp
262.629 380.304 mo
261.728 377.685 259.609 375.132 260.098 372.417 cv
260.823 368.395 261.653 364.588 262.377 360.567 cv
263.125 360.412 263.873 360.258 264.622 360.103 cv
264.303 362.529 263.939 365.441 263.621 367.866 cv
263.184 367.336 262.654 366.965 262.217 366.434 cv
262.461 367.376 262.894 368.361 263.139 369.302 cv
262.244 370.204 261.85 371.706 262.183 372.905 cv
263.204 372.894 264.406 373.03 265.427 373.019 cv
264.433 373.387 263.438 373.755 262.444 374.123 cv
263.239 374.142 264.082 374.094 264.857 374.248 cv
264.908 374.514 265.088 376.302 265.275 376.392 cv
263.908 375.737 262.726 375.311 261.359 374.656 cv
261.96 375.484 262.963 376.373 263.565 377.201 cv
263.252 378.226 262.942 379.279 262.629 380.304 cv
cp
259.626 391.247 mo
259.248 390.513 258.906 389.743 258.528 389.009 cv
258.089 389.962 257.707 391.35 257.268 392.302 cv
256.024 392.52 254.518 392.552 253.274 392.769 cv
252.051 392.984 250.841 394.15 249.801 394.799 cv
250.276 394.502 250.638 392.705 250.841 392.179 cv
251.192 391.27 251.462 390.152 252.034 389.377 cv
252.764 389.705 253.701 390.145 254.491 389.717 cv
255.466 389.19 255.456 387.705 256.426 387.169 cv
258.339 387.663 260.182 388.084 262.145 387.817 cv
261.305 388.96 260.466 390.104 259.626 391.247 cv
cp
249.367 372.675 mo
249.773 371.305 250.108 369.566 250.514 368.196 cv
251.085 370.098 251.657 371.999 252.228 373.9 cv
252.546 374.957 252.366 376.066 252.57 377.136 cv
252.625 377.428 253.154 378.46 253.084 378.67 cv
252.925 379.145 251.736 379.455 251.279 379.667 cv
252.271 379.918 253.262 380.168 254.254 380.419 cv
253.934 381.713 253.463 383.227 253.142 384.522 cv
253.244 384.113 252.446 382.146 252.161 381.816 cv
251.52 381.073 250.397 381.25 249.404 381.178 cv
249.617 379.934 249.831 378.689 250.044 377.445 cv
250.525 377.521 250.891 377.485 251.372 377.561 cv
250.754 375.853 249.985 374.383 249.367 372.675 cv
cp
248.403 361.309 mo
247.619 360.417 246.86 359.375 246.075 358.483 cv
246.268 359.402 246.736 360.367 247.244 361.17 cv
247.004 362.084 246.847 362.78 246.607 363.694 cv
245.757 359.523 244.537 355.317 243.14 351.282 cv
243.521 350.235 243.902 349.188 244.283 348.141 cv
244.659 349.096 245.323 349.696 246.189 350.299 cv
245.826 350.735 245.607 351.247 245.245 351.683 cv
245.722 352.107 246.199 352.531 246.675 352.955 cv
246.166 352.862 245.797 352.646 245.706 353.2 cv
245.651 353.535 246.061 354.133 246.231 354.409 cv
246.697 355.166 247.375 355.841 248.195 356.252 cv
248.335 357.299 248.59 358.402 248.73 359.449 cv
248.19 359.163 247.67 358.928 247.13 358.642 cv
247.571 359.556 247.962 360.395 248.403 361.309 cv
cp
250.321 344.411 mo
250.304 345.306 250.37 346.158 250.352 347.053 cv
250.773 347.32 251.174 347.632 251.594 347.898 cv
250.762 348.807 250.885 350.348 251.698 351.272 cv
251.471 351.937 251.365 352.594 251.137 353.259 cv
251.796 353.15 252.408 353.11 253.066 353.001 cv
252.871 353.522 252.677 354.043 252.483 354.565 cv
253.365 354.464 253.396 354.44 253.765 355.206 cv
254.032 355.76 254.335 356.298 254.565 356.868 cv
253.983 356.488 253.482 356.314 252.901 355.934 cv
253.923 357.19 255.033 358.423 256.056 359.679 cv
255.225 360.196 254.395 360.714 253.564 361.232 cv
253.969 361.573 254.504 361.699 255.03 361.641 cv
254.332 362.043 253.591 362.379 252.891 362.78 cv
253.868 362.514 253.204 364.548 253.184 365.001 cv
253.139 366.044 253.238 367.09 253.128 368.13 cv
252.972 369.595 252.878 370.775 252.723 372.24 cv
252.131 370.257 251.597 368.133 251.006 366.15 cv
251.753 363.677 252.394 361.284 253.141 358.81 cv
251.381 355.468 249.422 351.914 247.662 348.572 cv
248.548 347.185 249.435 345.798 250.321 344.411 cv
cp
240.916 371.821 mo
240.065 370.178 239.221 368.535 237.887 367.214 cv
238.749 369.349 239.61 371.654 240.472 373.788 cv
239.328 372.51 238.189 371.213 237.045 369.934 cv
236.614 366.941 236.161 363.697 234.529 361.105 cv
233.243 359.062 231.446 357.029 229.408 355.645 cv
232.654 352.621 235.496 349.205 237.844 345.506 cv
236.817 347.724 236.908 349.743 238.141 351.864 cv
237.569 352.633 236.998 353.401 236.426 354.17 cv
236.896 354.627 237.407 355.067 237.846 355.551 cv
238.346 356.103 238.337 355.555 238.259 356.386 cv
238.148 357.556 237.11 358.971 236.689 360.088 cv
237.409 359.831 238.332 359.593 239.053 359.336 cv
239.892 361.137 240.715 363.013 241.554 364.813 cv
240.653 364.929 239.652 365.013 238.752 365.129 cv
239.834 365.203 240.927 365.49 242.009 365.565 cv
241.87 367.655 241.569 369.821 240.916 371.821 cv
cp
239.739 384.581 mo
240.213 385.232 240.624 385.878 241.098 386.529 cv
240.793 387.32 240.486 388.042 240.181 388.833 cv
239.664 388.257 239.143 387.468 239.045 386.587 cv
238.747 387.336 238.411 388.145 238.113 388.894 cv
237.544 386.701 237.1 384.622 236.865 382.344 cv
236.295 383.19 235.664 383.839 235.094 384.685 cv
235.594 381.46 236.103 378.24 236.602 375.016 cv
236.831 372.774 li
238.327 375.227 239.824 377.679 241.321 380.132 cv
241.124 381.543 240.872 382.978 240.676 384.389 cv
240.19 383.669 239.924 382.675 240.056 381.754 cv
239.982 382.714 239.813 383.621 239.739 384.581 cv
cp
228.592 365.816 mo
227.561 363.002 225.904 360.316 223.941 357.993 cv
224.644 357.174 225.348 356.355 226.051 355.537 cv
227.735 357.877 229.288 360.249 230.972 362.589 cv
231.326 363.082 231.542 364.063 231.722 364.635 cv
230.611 364.005 229.451 363.403 228.34 362.773 cv
228.987 363.668 229.736 364.575 230.383 365.469 cv
231.614 365.404 232.838 365.629 234.069 365.563 cv
233.919 366.135 233.769 366.805 233.619 367.376 cv
232.988 367.234 232.308 366.963 231.677 366.821 cv
232.608 367.906 233.418 369.014 234.35 370.1 cv
232.667 368.35 230.786 366.942 228.592 365.816 cv
cp
224.395 379.658 mo
223.159 378.32 221.891 377.017 220.655 375.678 cv
221.226 374.25 221.664 373.04 222.235 371.612 cv
220.922 369.778 219.554 367.825 218.242 365.991 cv
218.046 362.788 217.296 359.53 215.618 356.746 cv
216.398 355.318 217.178 353.889 217.958 352.46 cv
219.55 356.071 221.02 359.683 222.613 363.293 cv
222.132 363.579 221.758 363.906 221.278 364.192 cv
222.329 364.963 223.2 365.907 224.251 366.678 cv
223.406 366.977 222.897 368.069 223.084 368.908 cv
223.271 369.746 224.161 370.389 225.061 370.335 cv
225.334 369.679 225.494 369.213 225.767 368.557 cv
226.421 370.302 227.085 372.397 227.738 374.142 cv
226.62 373.701 225.356 373.32 224.238 372.879 cv
225.409 373.737 226.407 374.57 227.578 375.428 cv
226.377 375.542 225.182 375.814 223.981 375.929 cv
225.332 376.672 226.512 377.661 227.864 378.404 cv
226.637 378.928 225.621 379.134 224.395 379.658 cv
cp
223.088 392.528 mo
222.731 391.499 222.083 390.474 221.726 389.445 cv
221.12 390.442 220.289 391.546 219.684 392.543 cv
219.836 391.658 219.846 390.669 219.999 389.784 cv
219.459 390.526 218.846 391.272 218.305 392.014 cv
218.328 389.244 218.684 386.391 219.407 383.708 cv
219.45 383.755 219.168 383.65 219.211 383.698 cv
217.978 382.621 216.979 381.303 216.295 379.85 cv
218.181 379.393 219.324 378.469 219.758 376.665 cv
221.331 378.046 222.618 379.719 223.526 381.562 cv
223.717 381.949 223.081 382.698 223.208 383.127 cv
223.342 383.578 224.055 384.056 224.394 384.394 cv
223.566 384.935 222.737 385.475 221.909 386.016 cv
222.987 386.593 223.986 387.236 225.064 387.813 cv
223.941 389.078 223.091 390.873 223.088 392.528 cv
cp
213.42 363.92 mo
212.953 364.235 213.336 364.441 213.439 364.661 cv
213.606 365.014 213.727 364.908 213.528 365.344 cv
213.231 365.993 212.728 366.379 212.617 367.147 cv
212.492 368.01 212.774 369.095 213.337 369.782 cv
212.62 370.718 212.046 371.624 211.329 372.56 cv
212.212 373.738 212.993 374.869 213.877 376.048 cv
213.117 376.392 212.298 376.846 211.538 377.191 cv
212.09 378.129 212.532 379.11 213.084 380.048 cv
212.064 381.059 211.008 381.837 209.988 382.848 cv
211.099 380.514 210.813 377.543 209.291 375.43 cv
208.105 373.782 206.807 372.049 205.621 370.401 cv
208.008 365.69 210.395 360.979 212.782 356.268 cv
213.163 357.296 213.27 358.252 213.65 359.28 cv
213.39 359.795 213.203 360.186 212.943 360.7 cv
213.707 361.822 214.561 363.023 215.324 364.144 cv
214.605 363.553 213.897 363.023 213.177 362.432 cv
211.989 363.32 210.99 364.415 210.162 365.618 cv
211.033 364.735 212.182 364.202 213.42 363.92 cv
cp
210.951 388.244 mo
209.697 388.061 208.4 388.148 207.186 388.498 cv
208.088 389.325 208.857 390.001 209.759 390.829 cv
208.258 390.679 206.744 390.54 205.243 390.39 cv
204.283 391.333 203.055 392.305 202.094 393.247 cv
202.967 391.563 203.576 390.136 204.448 388.451 cv
205.199 388.222 206.265 388.162 206.838 387.647 cv
208.458 386.188 210.078 384.73 211.698 383.272 cv
211.154 384.163 210.595 385.047 210.051 385.938 cv
209.307 387.155 209.945 387.345 210.951 388.244 cv
cp
200.223 372.468 mo
199.626 371.089 199.09 369.763 198.493 368.385 cv
198.894 367.766 199.295 367.147 199.696 366.528 cv
200.32 368.635 201.333 370.559 202.526 372.431 cv
203.101 373.333 202.823 374.8 202.9 375.852 cv
203.296 376.199 203.726 376.53 204.123 376.876 cv
203.947 377.32 203.847 377.728 203.671 378.171 cv
204.287 378.43 204.901 378.784 205.517 379.043 cv
205.556 380.335 205.589 381.556 205.628 382.848 cv
203.813 379.984 202.46 376.82 201.517 373.598 cv
201.1 373.237 200.438 372.964 200.223 372.468 cv
cp
199.985 389.618 mo
198.992 389.05 197.926 388.284 196.933 387.716 cv
197.182 386.33 197.428 384.908 197.143 383.529 cv
196.858 382.15 195.915 380.785 194.502 380.376 cv
193.292 377.754 192.138 375.142 190.929 372.52 cv
191.762 369.584 192.594 366.647 193.427 363.711 cv
193.58 364.953 193.711 366.14 193.863 367.382 cv
194.651 368.334 195.309 369.199 196.096 370.151 cv
195.659 370.198 195.29 370.27 194.854 370.317 cv
195.033 371.332 195.741 372.296 196.681 372.805 cv
195.983 373.223 195.432 373.793 195.01 374.468 cv
195.746 374.11 196.478 373.847 197.213 373.49 cv
197.168 374.032 197.267 374.625 197.222 375.168 cv
196.426 375.182 195.724 375.317 194.928 375.331 cv
195.47 375.823 196.211 376.193 196.955 376.11 cv
196.497 376.373 196.165 376.829 196.068 377.33 cv
195.971 377.831 196.049 378.566 196.528 378.794 cv
197.357 379.188 198.33 379.572 199.159 379.966 cv
198.034 380.038 196.945 380.172 195.819 380.244 cv
196.238 380.326 196.864 380.422 197.282 380.503 cv
198.164 381.422 199.009 382.406 199.891 383.324 cv
199.457 383.107 199.151 383.006 198.717 382.788 cv
198.58 383.798 198.92 384.879 199.703 385.574 cv
199.418 386.145 199.135 386.605 198.85 387.177 cv
199.532 386.991 200.096 386.903 200.779 386.717 cv
200.52 387.677 200.244 388.659 199.985 389.618 cv
cp
190.584 386.173 mo
190.259 386.666 190.023 387.183 189.697 387.676 cv
190.031 387.948 190.369 388.17 190.703 388.443 cv
190.153 388.364 189.58 388.242 189.03 388.163 cv
189.231 387.589 189.226 386.951 189.015 386.38 cv
188.899 386.064 188.62 385.755 188.277 385.679 cv
187.851 384.733 187.768 383.688 188.041 382.692 cv
187.095 381.005 185.954 379.44 184.633 377.999 cv
184.852 376.233 185.07 374.468 185.288 372.702 cv
185.703 373.356 185.991 373.926 186.405 374.579 cv
186.882 374.542 187.383 374.536 187.86 374.499 cv
187.892 374.892 187.923 375.387 187.955 375.781 cv
187.501 375.834 187.073 375.922 186.619 375.975 cv
186.845 376.326 187.196 376.689 187.577 376.885 cv
187.22 377.48 187.214 378.291 187.624 378.854 cv
187.982 378.827 188.395 378.769 188.754 378.742 cv
188.555 379.362 188.346 380.032 188.147 380.653 cv
188.499 380.467 188.898 380.309 189.25 380.123 cv
189.097 380.471 189.004 380.843 188.851 381.191 cv
188.499 381.081 188.166 381.04 187.814 380.931 cv
188.19 381.23 188.593 381.497 189.017 381.73 cv
189.27 381.869 189.583 382.017 189.866 381.947 cv
189.593 382.13 189.311 382.267 188.978 382.295 cv
189.456 382.681 190.012 383.056 190.49 383.442 cv
190.058 383.334 189.65 383.263 189.218 383.155 cv
189.273 383.508 189.605 383.769 189.956 383.894 cv
190.395 384.05 190.902 384.059 191.334 383.888 cv
190.904 384.327 190.475 384.765 190.045 385.204 cv
190.247 385.505 190.382 385.872 190.584 386.173 cv
cp
179.961 389.836 mo
180.354 389.123 180.792 388.413 181.185 387.7 cv
180.032 386.203 178.879 384.717 177.726 383.22 cv
177.869 381.543 178.013 379.866 178.156 378.19 cv
178.764 379.026 179.262 379.744 180.054 380.426 cv
179.709 380.909 179.496 381.335 179.332 381.898 cv
179.774 381.475 180.228 381.089 180.67 380.667 cv
180.432 381.102 180.372 381.624 180.506 382.098 cv
180.641 382.573 181.045 383.033 181.482 383.296 cv
181.38 383.998 181.295 384.782 181.193 385.484 cv
181.553 384.975 182.029 384.466 182.388 383.956 cv
182.321 384.991 182.515 386.052 182.991 386.984 cv
182.751 387.335 182.466 387.677 182.104 387.915 cv
182.483 387.941 182.937 387.96 183.316 387.986 cv
183.347 388.329 183.012 388.612 182.873 388.93 cv
182.681 389.367 182.785 389.878 183.038 390.287 cv
182.838 390.622 182.633 390.922 182.432 391.257 cv
182.793 391.518 183.228 391.692 183.68 391.729 cv
183.773 392.326 183.845 392.807 183.939 393.404 cv
182.614 392.232 181.285 391.008 179.961 389.836 cv
cp
174.998 388.596 mo
174.277 388.11 173.616 387.641 172.895 387.156 cv
173.161 388.156 173.372 388.977 173.638 389.978 cv
173.278 389.787 172.437 389.483 172.077 389.292 cv
172.397 389.825 172.815 390.581 173.135 391.114 cv
172.938 391.762 172.645 392.756 172.448 393.404 cv
172.243 391.965 171.456 390.511 170.156 389.75 cv
170.966 387.315 171.776 384.881 172.586 382.446 cv
172.884 383.076 173.398 383.689 173.696 384.319 cv
173.639 384.776 173.691 385.306 173.633 385.764 cv
174.143 385.618 174.874 385.561 175.384 385.416 cv
175.827 386.077 176.445 386.907 176.888 387.569 cv
176.199 387.179 175.168 387.851 174.998 388.596 cv
cp
292.506 384.918 mo
280.996 368.225 li
275.097 370.962 li
271.932 368.088 li
269.198 369.183 li
265.601 358.647 li
262.148 359.195 li
250.782 342.365 li
246.897 347.701 li
243.732 346.88 li
242.581 349.206 li
237.545 342.365 li
227.618 354.816 li
225.604 353.311 li
222.582 356.321 li
217.69 349.89 li
214.381 355.226 li
212.367 353.995 li
203.591 368.499 li
199.994 364.941 li
197.836 367.267 li
193.088 360.836 li
188.34 373.014 li
184.743 371.372 li
183.592 377.803 li
177.261 376.709 li
176.11 383.413 li
172.082 379.856 li
164.888 397.233 li
305.311 397.233 li
297.254 386.013 li
292.506 384.918 li
cp
f
441.787 374.912 mo
436.681 372.061 434.984 362.014 430.711 358.048 cv
426.438 354.081 423.937 357.748 421.436 357.996 cv
418.934 358.244 414.87 353.162 409.138 350.435 cv
403.406 347.708 405.073 353.905 402.989 351.302 cv
400.904 348.699 396.11 346.22 392.358 351.922 cv
388.607 357.624 378.185 367.912 378.185 367.912 cv
378.185 367.912 375.892 365.185 371.723 364.565 cv
367.554 363.945 361.405 372.622 354.839 375.845 cv
348.274 379.068 352.234 374.233 342.229 375.845 cv
335.224 376.973 327.969 389.698 324.245 397.233 cv
327.482 397.233 li
337.921 381.743 li
334.323 395.499 li
344.612 383.054 li
340.681 397.233 li
348.723 397.233 li
355.438 381.743 li
351.589 397.233 li
351.998 397.233 li
369.622 371.079 li
364.067 392.319 li
368.161 387.366 li
365.426 397.233 li
375.025 397.233 li
391.72 358.719 li
382.579 395.512 li
401.826 354.247 li
400.581 390.072 li
411.941 376.333 li
409.394 385.519 li
427.454 358.719 li
417.381 397.233 li
429.403 397.233 li
443.77 379.856 li
441.467 388.162 li
451.683 378.791 li
450.186 397.233 li
466.55 397.233 li
463.624 391.237 457.758 383.874 455.516 378.944 cv
453.532 374.583 446.894 377.763 441.787 374.912 cv
cp
f
620.845 375.129 mo
620.561 374.398 619.984 373.864 619.293 373.692 cv
606.557 370.525 li
592.432 349.904 li
592.094 349.41 591.605 349.077 591.06 348.97 cv
576.133 346.023 li
565.336 339.743 li
565.018 339.558 564.669 339.465 564.319 339.465 cv
564.001 339.465 563.683 339.542 563.387 339.696 cv
556.303 343.396 li
550.934 339.813 li
550.585 339.581 550.194 339.465 549.805 339.465 cv
549.363 339.465 548.922 339.613 548.544 339.908 cv
529.933 354.405 li
515.703 353.566 li
515.665 353.564 515.626 353.563 515.587 353.563 cv
514.895 353.563 514.239 353.928 513.819 354.555 cv
502.8 370.99 li
496.861 372.52 li
496.212 372.687 495.663 373.175 495.368 373.848 cv
486.695 393.632 li
486.356 394.406 486.395 395.322 486.8 396.055 cv
487.204 396.787 487.916 397.233 488.682 397.233 cv
488.868 397.233 li
492.063 390.444 495.257 383.655 498.452 376.866 cv
498.193 377.415 498.265 378.526 498.204 379.147 cv
498.126 379.941 498.054 380.735 497.979 381.53 cv
497.849 382.904 497.322 384.623 497.81 385.933 cv
497.849 386.037 497.901 386.133 497.945 386.234 cv
503.668 392.303 li
501.866 391.17 li
497.968 388.324 li
499.376 390.988 li
499.407 391.33 499.432 391.674 499.447 392.016 cv
499.515 393.547 499.709 394.875 500.077 396.362 cv
500.149 396.654 500.229 396.944 500.31 397.233 cv
527.269 397.233 li
520.545 392.874 510.965 384.431 505.99 375.222 cv
509.022 367.879 li
505.945 370.793 li
509.372 366.068 512.746 360.805 515.476 355.66 cv
515.997 356.881 516.214 358.266 516.158 359.615 cv
516.154 359.719 516.141 359.819 516.131 359.919 cv
517.865 357.769 519.828 356.014 519.828 356.014 cv
519.828 356.014 518.2 358.268 516.951 360.747 cv
516.243 362.102 515.656 363.502 515.27 364.49 cv
513.625 367.424 li
515.176 366.056 li
515.333 366.816 515.74 367.425 516.135 368.065 cv
516.649 368.897 517.133 369.752 517.585 370.629 cv
517.617 370.691 517.647 370.755 517.679 370.817 cv
525.466 381.638 li
522.471 378.657 li
518.415 373.475 li
519.352 377.775 li
519.146 378.506 518.981 379.253 518.926 380.02 cv
518.603 384.543 521.921 387.077 524.94 389.162 cv
527.454 390.899 528.884 394.164 530.154 397.233 cv
563.674 397.233 li
554.347 391.133 541.656 374.635 532.878 360.31 cv
541.965 349.806 li
532.346 356.574 li
538.063 352.125 543.62 347.372 549.097 342.562 cv
548.395 343.18 547.797 346.365 547.967 347.328 cv
548.17 348.465 549.206 348.861 549.658 349.802 cv
549.805 349.389 549.944 348.994 550.06 348.645 cv
550.384 347.675 550.572 347.012 550.572 347.012 cv
550.572 347.012 550.521 347.704 550.395 348.741 cv
550.274 349.777 550.064 351.155 549.847 352.523 cv
549.761 353.06 549.68 353.59 549.603 354.103 cv
548.766 359.293 li
550.47 356.252 li
551.242 356.675 552.205 356.744 552.951 357.266 cv
553.867 357.909 554.228 358.599 554.24 359.305 cv
556.663 356.993 li
553.741 360.939 li
553.436 361.471 553.021 361.998 552.578 362.509 cv
551.156 364.429 li
547.943 368.648 li
549.521 367.547 li
549.078 369.785 549.422 372.05 550.439 374.181 cv
551.011 375.38 551.926 376.247 552.622 377.338 cv
553.061 378.029 553.328 378.782 553.624 379.54 cv
565.879 388.077 li
555.655 382.894 li
557.226 384.597 559.151 385.512 560.939 387.239 cv
563.384 389.602 564.918 393.198 565.416 396.748 cv
565.439 396.909 565.451 397.071 565.465 397.233 cv
585.161 397.233 li
578.658 392.739 576.62 386.671 572.195 375.913 cv
568.589 367.148 563.62 355.166 558.549 346.899 cv
561.828 344.129 li
559.312 344.552 li
560.814 343.783 562.321 343.001 563.814 342.258 cv
564 342.82 564.281 343.644 564.612 344.114 cv
566.311 346.522 563.799 350.593 566.628 352.214 cv
567.866 352.923 569.578 352.888 569.997 354.572 cv
571.649 352.249 li
568.928 359.626 li
567.871 362.421 li
568.635 361.705 li
569.123 364.612 572.941 366.254 574.66 367.926 cv
575.535 368.777 576.248 369.747 576.82 370.802 cv
582.043 375.72 li
579.045 373.787 li
576.998 372.301 li
578.248 374.835 li
578.397 375.579 578.506 376.339 578.558 377.118 cv
578.816 380.956 578 385.063 580.307 388.327 cv
582.347 391.212 584.26 394.144 585.952 397.233 cv
610.874 397.233 li
596.433 389.511 587.552 369.295 577.811 350.91 cv
585.966 352.843 li
579.74 349.346 li
583.176 350.494 586.559 351.636 590.046 352.788 cv
589.715 353.781 589.376 354.731 589.734 355.711 cv
589.89 356.138 590.164 356.495 590.372 356.892 cv
590.461 357.063 590.529 357.224 590.589 357.382 cv
591.868 355.267 li
590.444 360.9 li
590.436 360.938 590.428 360.972 590.42 361.011 cv
590.104 362.653 590.322 364.41 590.864 365.961 cv
591.788 368.608 593.541 370.71 594.842 373.11 cv
594.997 373.395 595.134 373.687 595.265 373.98 cv
595.951 368.899 li
596.45 377.376 li
596.848 378.702 597.247 380.033 597.868 381.293 cv
600.016 385.655 603.634 388.797 606.973 392.075 cv
608.581 393.655 610.174 395.355 611.514 397.233 cv
620.484 397.233 li
615.169 393.303 611.879 383.23 608.441 375.189 cv
608.547 375.215 608.652 375.241 608.757 375.266 cv
611.051 375.828 613.343 376.195 613.343 376.195 cv
613.343 376.195 611.717 375.089 610.025 373.776 cv
612.566 374.778 615.123 375.662 617.671 376.727 cv
616.791 376.373 614.126 378.977 614.283 379.995 cv
614.325 380.264 614.43 380.504 614.575 380.716 cv
615.248 381.101 616.17 381.644 617.12 382.256 cv
617.209 382.305 617.3 382.35 617.386 382.407 cv
617.428 382.435 617.462 382.474 617.502 382.504 cv
617.61 382.576 617.719 382.648 617.827 382.72 cv
619.929 384.104 621.884 385.689 621.884 385.689 cv
621.884 385.689 621.114 385.33 620.018 384.874 cv
619.73 384.735 619.397 384.57 619.059 384.394 cv
618.138 383.914 617.193 383.498 617.193 383.498 cv
617.193 383.498 617.794 384.403 618.344 385.347 cv
618.64 385.856 618.955 386.363 619.184 386.727 cv
619.427 388.833 619.385 391.15 619.762 392.578 cv
620.207 394.261 621.349 395.594 621.915 397.233 cv
626.042 397.233 li
626.789 397.233 627.487 396.808 627.896 396.103 cv
628.306 395.398 628.372 394.509 628.072 393.737 cv
620.845 375.129 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (Vet) ()
%%Title: (01.eps)
%%CreationDate: 11/24/2016 8:58 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj2e'dcgWlcSPS%`!&Q5p-i6='h(R-I4_+BP,47OH?qcf^\pW4<^D;8jdbQ9*)<-oJZ-X9,%JqECLnf0p02+'<K3JtDL#>j
%n:Y=YouN<[$1S)oqemu8#KF=2*CgL<,0(q2!hU_U)?<=i3799-F1d0#P@gfOe6BUka"6K2DSg4WSaMdknPa4KNjU?!d6'@6ULF/k
%`#DmZ%W,YmnL8<3oX*:cC-@UlAdFKJ,)n7ecjDhLcNGjbAXWVAlb+@`%f/ZeQ1OsaF%ChE5Q899]kVY9*N`tAXbQnN`\J1o3j6"M
%q>`PY)W?`!*dWuq7I)mYFA1!l$U47c*pb*73Gg":93On@&53!VefXaJ<<`I#:Pd!i&(06__U"a-pBYl2>V:kCE"kTI4G!j"3NE2X
%AcRMZaX!"$"hiT,BK_ofTcc+!=CY4d__TDpIC1$03Y5gs%5T+EMSOl[RI_g^'36DTL_I_2.,*=k`Rb&CoH.;/"'mGC*G\AZSR11J
%$eA&cES??T54:H&c:,q?!V7Q<;sA<BRq986`"&97)]Dje#Hd&o$_sA;Wd51DeSOkt27>US@m<'>2m_46*G(;>#!$PdXb(gi-5tlo
%"!QSK/ftY)Jf;FF@IGuLLU@@3Me[BkmBO(TYDaur"&V2J(fd?='iKQhXDA4-I`EiIAJA9<rujO\'us\3rbKalW:'?NQ9B5RHV,8>
%Un%f6kAfQ^X.1l5aSmf@NJ!b15Qr'<eTs:S6CpIZrO,-%!Bcp?d(j='a1qXt6D#]&\OIY^mWZm(44C3s^]3GWQ-H&k\^X88ZNCS=
%p7)n*i(LlG-^s6JFL2\Q!T+,A@EiHj53XcQcrsVn6QSKs$HsE<^_7/hje;)"#pSZJCH$Znl@K`g2Pnc"lOU[;[e1f6ijn:c<hn\g
%8A<gXF[[Ut8fQDLkTVur'RtYkGiWJ8XO2@C"bCBYh@Hqk`s$68qSX;@SZr*kr`P<X]&"sf`r!-9J#Cn9YM[h#l.j6Ap=%Sb^gNqb
%J1k:3)?q%>I&UTih/QK]e\I%*X`AX$9_rnA>UW>]k,-1P#'6_d[!'\BH/bBD\)o-,An03bK]duMSBo8$D!@+AT&+1P[O=:W8$roJ
%#6aopgW]/#K3"1*JqrqSMTqMff`4$^8!cHYaoB^QDmDj[Pq_?M2N)1bkV`[Z4!?W25,6WSo09iMh3B/,QcS57nS%RBJ56sU93h>T
%UC[fRQ(o,Uasb0-kBgC=D1?V:5B-!?7LQ;W-f6k/qG>#QAfJWo:VN^6Fi%`01I(5(Hiid%oU_c'VganBkem>[4rCpR#"b;:c^l``
%G(#lDJI%'Z:)YDeBXH(2:EDqer]cm3(-E!+(P-U7%TpUX5`BhHg,Mj,Ai.XN]gXV7cXmC:m,0&de,+u4_a?Yp'(B`"U!$JZ']fk-
%dC4)oHj?LE2(8_>9kQ8_,lDaM_U%J/^bTe`pjn%cJe/<.[Y_!J7^^fg6&gj`/TOMt"Zt/ncY9EkFXP:l$N`i&VaY/Jo+YuICYBI!
%3I+*I"]^AciGQZAAeTOi:(ae`<_<=](UV_jg_b,s'nTV$^1T])ni8^9JqrFg2j-7S4Z2gQB#N"%.r&?Qh9fU,YcM`4_&30YLuU[s
%XOV6\Q?q7,Y#`c'4>!!u]fmgEUNcSE2u^W_FD5RJRksrhS3OLXHJpZTiL'5WS=dru@#Y(&O_.fFahNa&)5>EbPSpUt1i1*s+kF"+
%ad`6(8`-El#<*@-,&$9<6?9:_ai[keb:f:fM7c$E^h-KJGTr&FDC.nVUiNe2bT`=Abu@G?UiM`\#2sI[`&,&`A8X#_3>_@D3R-Yj
%W8f(g>NBg_>],\I/TSE%GV0fl^-O[?NegiakCi;gcab63DXog/FQ3-=H6ZeGb3"c(es5W18G`),\sHQZR(L%P;ZFWW#BsH"3DT3\
%d8b#Tht'fg*&[2#rGL66>4M?dS*d`=Kt*E(GcUCO-^eO)@7,<tEJ$@GR!J"/<[qCgpOP6HZ*']3g?);V)]5p>Btb5U"j)hZqg$A@
%TD@/Z;]E+5VBp:9:-s("SVgIro-MX%5pPS$POLf!J]I[aqsWdos(Dq?ZpWn@idg<C6gLQICn!#ijbBkG9r:CQHhn@eX4u+;7,P5j
%S0f4!O^VLN^oUTe=N2'n1L@*fEULpCb68c59g-M;R7=6DF]XIQpiY',>H4."ieFuPHG84$^_[A!1VYa(3\pJKa#N[sb;!cJ^kH!k
%^DH2q(B]e33#8R,dId8L(#9<.]Ghdal-\EYQJO,[NR/eANs;^roP.+6k@PfZXut_\4NYfo`F$,^5,Ht3O'I"8E/sr3o4Q=WI\kIS
%05!>+ohJLW:<mFXj'L-IkBd'S=Y*>Dr+!^PQ2*)(\N3VDj+T:T>o`E\O.'c)o(gW0BHprSNHdtFs)P@bq;'@OZ!eH`I-tZZU[MfK
%D8^-?DV;h[q7^"'q7VfW\Y*AKp13!\a$4B)ITa<tG1ngdhp=dl0nX2]_MlaP)>ao`lPKL&CK>.P(pAE<Zhjsi@9rhLCt@.k`LbKT
%kk>d?V=CT#I#_"=I`!8I]996ufCa(]l[BZ/n=9Khho3_'\bgN!d7s<i2ibo^1%XCLk59g_pWg6-Xde(;-VX>[$#YE2p<Qlh$eJO'
%+]e2EX]uG/'l,ZA,0jK\DC0+%X/.cGH@rk0`6DoWRjQUY0BQa(oBZ%^D),[@P;Kl<L/uam,rEYGHS/T!;hOLCC`UeiVDET1Pip:]
%G3%]H"I"ma!`BtWVCgfOq^<7<[JB>i;n-6)=4oS0C9inZ`,+0e=)0PVg>V2'Q?.?/LPt0-r+NbO@_Va0P`!Xo3Yh561H-\C)Uhp;
%N_Z=\c`,=7AHQ:;kCTEOlEmL)R4U?CPtM!es+>1U&Y^8ddiqG403!"1b.5'4LLNt0Jos@K;6RS%=;Kc#88/nm?#t#T^SE_Zq!M&s
%'Fdp;7?e0=ldR,*n.S.,kDD*R5:n(e`XhI7$UFoVgXA29I5Aj4RX&k7iL4ZT>B?[:^e2X`]()g(D5s"XehW\s]Z\<uR_^qmQn>*b
%:85s#Jl__C-W/Y11G@jJ`CZ:sWmA8>XBF0JDgi>\)o"5Vc(/ZlG8@%IS^*t>+_G%cc^^UrE=lC"a]T<Z68eXQ;8.bU/:FG&-uOiD
%S4-SN7JSmTc/L:sN9**m*'j=kB2Mo:`0p?shru\L)e.qUU7V+c.'D-1f!XPMSjb)VVm@dhLm]']s!N#)k4)-)X0qkWeX5K&cM-FG
%Y"j3n<au%\VjO*1pnb<ajp\uSrIqN#;j,oBoCNPpM!!*7\Z,?UDYfdtKk900ji_#DAS,B&^1,]iKjAc9Jq[K7fX6E=RgZiol2Y?,
%Y'mKm9uf\.=LEi_qeo]H7BlKfK!g;4>?J<5ZrM28#X(mjIs]aKidq@6l^$mBD#c3<kj)t/0@\&H$PmKa:nnVj&K-YniW(&HqV9U=
%4pUM_U9XaBX+bT6T6_a6d!e/QiAZh(-HdFCBteqNah1p9@^O:(`Fusbim!Tq?#<m5-!f=:ikV*#Bo@=Pk3-+if$01,Mi2<K9iAQ>
%]UIu(EouXrRa31:`N:t\D#'<6V-uN'KO[-G#lcY$p`"e1nD=L6nGJ`IKhO-%q9"[MZPFI-YBTjA$]4:ncKDcbdJ2K:icdo<J+4BU
%PVS-rqOYmSs$Y_?`lu#B/t'tmfnIrK[/Z_gqB,+X1^uafVJ\#gJ;[lDrOlBtF"n5?C14"J)VjP&I>Y&mL5,G_16'Yr:GJbj6,S%r
%HQt?Q;p<BF7^(CmHYtse*-t-,+ofd``ihCf\akltkjl]2i?[T+,N=Vs4#_qG(;KKGm/J^3IqNj&G7#,scC-:;p4!nU^XJrmZ2_Gg
%s'<:)A?l13?eYN+d3J&ZF%jM`,e;S!S^@McN7U]<HbPD$ho22UQ_QLKU6TqJ(&A40e7);l&ZJX,oXfFdCk7L\\^?p+/Z(tm:VG.0
%Isb"#_l2.4J.O3h[A#9%*,dO=W540:mrp7C,.a&^;=ka8IC&?U/OfG(:<>@^M[J,[)-^(]()=,DL!3ORZ?UN\U-eRW&EP+m>Em6A
%YY7M2qFJ#hl`CF\M0];PQVfUbIi)cbmmT9`3F[0=f":h5Mu)*`Y2""oc.!^%c"4T1JNG_jV7<0iqo`[HHgeWhEl;G>Qr>Wd,RopB
%B@/t>ok[6`-5p%1;U;2lK/*5B[0LkPI$j0X6as1a+J/'"Z<n*cY1-U=VuCL"T&cn^q6nDp#^#$,m+Hi]-Mt6nU@>H:]IXCC?_hF6
%GZb_e(58)DiT3:*Gd5CB[.%O)@7^?.;0\Mf%!5?kq+BUWH7&1ZSF`/:!`IlIGilShoM%!-pc^p=rDJbh;)4T;AX`)2-JVjH0^G'"
%\@L[.eh<M36c7ohM16\fqQ?/Z\3FC\qqgiZ^<0qXZ$J($)=Q/2(X@#T%GImFa2LbH$g5$=NrNq,2=h=+]gJ2,hmg1Il$M7%oS%En
%gqL/*I;)koqOb<r-stHGk)[JSC;/H+nm1$3[J3c$b_-+?s)W?"08_<mGZ-%WR[.WtU#A.!0LE[LZ`Y?*DnX@eV5s>e)`i;uV+I7;
%SNeDWrYKX+^U(N/1DuRfQ2.R9b?e^mh_%8(Z/Wph''dJD:XNI[,Jm151rZt]'c7`Tr%Q9r:=*-g;^7$@6VL3uG9CaQ342$:5?>g,
%>djRTl57sDN\O$ac.po*P]'C=E'qO;N\Rl.m_%f^U5lLWA'EZL/F"(13l[]>1&a6P>#03^K'^,4B9eKXl=l4kdr9@ZS$r3Y++s!Z
%6;m%i50Ym[],:*%UK;cF7Q$?J,$r*!\GFbG#kkW]A&9iN\g_B"4l+Lmqg,=(-HR.CT,)9]Y./3=S#;p%J%/Z:-h>bdb!dUlDJiTt
%6d0a5qhpAe>RB]TU7krTgqMl=6f6srTl53:O.0flEAu33B0G(_H'kgo=$$"J2d(ttit64+@lE.&>CtumnG"k0O0;e-oW&<`KmorP
%Dh'mpB2NVfqh^dFI#:-qF-S)r8ZDE!5Oqtl8mN;+Q+9-IjbAFk5O?@:Vo)iDLfk_kEYKO+@Okk(LciBFqu?[mAZ>E,=>k*P$/`B.
%c[=VJ]SiOTF'"2gp%j-8Fr%XD,+"e5eh",;75hWrk%6aW>%D]4D!p3&k$1<oh`[J+L<%3GGs:ENhM=0dk?Lil8EUcQg`i:nUiVH9
%mQ[8fL"L=*d((B1el+X"4/I&%LfpNqZ^0$FR:a"`dG28)n".jR\!Il?a9`Uu1/.]q(G:2&5:<XcS,7OY(AD;kmZj0WHR5O[h"NO0
%s3(Wadj[aF+HW@:=5GDbZr0'HTcg\DQ&OSG/Q^KKDXV5U9pOGLS!Mj?I#7LNk`JMak!b9X.!Tg47Gk8Zq=cMURJA&)>D63J#?/!E
%?#n>&id9@eq0l\BlZY2I9:DnH?j(g[K'%Y7lfFQAZUN_KmO%ZGD_Wj/IahX$Ge[\#mQC-(D0-CMhI'OZ\N!1/m<:$`8Tu\LUZdU=
%p4":(okS:)`\4lPdI&qHGY9Zlj3\h8c"21QJNG_j^q29Jg0[=UmqPd<J2o3-Lln:GSNOY:HqG<qRqCJn")e%ZM%Cnn[@H/[7WXL/
%?kF8MdFNd2S\0"W*OrYTcDE_sBA77eY0r099kH@hZ7#O'FQmY+78U>sMLJu1["sS<nVQ<Y*M2SikhDBl^Y8eN080jn+D=X=re5nu
%rB2.`@Na++`61S';Kno+odMB')]ISF*+jj.I^Ws8msN([%DqaNcoOY"f$mu2m6=YndX=E*p:]L14+uBCH9'5p2hbKr`u-dKZgJgh
%3;?X#Nc&N436-_or3t+VR<Ob\*Ql5XcG+:f`sVCsAV7<-o_]W^0gG!o94ouG'(HG"nG-C/(&uiD&q/pNB#!H>hEJWcB9$K13PUr[
%WBk_\Y%a72)pWaHld)A&"3BZTP)jLfb=8!,c'ipU[1BCO*umkA@k0ioc?&oGY0FDCpg2@qGJ3"rfDd%4RQ<;"G@ZA3KWR%[8Oho*
%glh3nW_?>7kO`-X4mY#5IuZ1Mpi^<9rf4Y9_&g]7im4#O$+Q7N$WQne[fOhL+bHo"c-2(alfLXCEu@b8(Ws_#$0P$@k!#I;D?g!L
%U3G$TB8ZAC=^0jV<ck[ZF&ALh4>(CGK]#M4ji7u".9i!X^K!=e9/H.0KIe[$(sdCBZi,TF9j>iomr-G0;`u*e;B5VVF.oA:\eR/B
%;OBb<s)t6"0E9C,k,TP1$U!SrNi%^kh+2ihqO"WNjN(Q,d9'p=Iofqm7kB/7&^+N<K.jqABdK'RRAX#b4Eq_VJVaYY3\ai!k_7eH
%'XHY:]kXpE:O`?2UeRF0oNA?ELOW+AMcjFSZ*IN^4n2:^>OrhM/Zl$s4K"`*bji#p*r7^e2&\rLqEG@q@%*'LppXV19mF;gn:[nM
%!>2*Uq$!S-1I%\n]bq$UUI1R0@2Xgt`BP>*0D*Rd?_u(XSR*?j"Rgq'*js36/b0?ndXMM]TRg*i!6I5%.3U112k',g5!WR>Vtc=$
%apJ)QCBuqUJ&7Am.ie#/%h^6F5[@LS,`u$`K-IRZ!lTdq:)$\&0;D(./4)#A0l1d#R(E9Rh[\Vo$c%2k?TcB#]*H>SrZ*&OUM@T+
%AXF>q*KK.FP[bFgj.Pp`B'$CShWsEjWa$.X:g$PT"e<7M"!L2GX"$4W\RAJR,h\Wds6^jfkk7'5?jp:-.^&e<:6%O5rO6$G'%d%_
%jAI\tn_`E!7Wt**;Z.^$-a<d/L;,\:pLje"dcrV)+*)D;YHQ&P(AKU.@rI]lUARaU"p7=9k'o:IAco[AInmm>#(:CmCXPe\e8IYh
%Pgk#pQBe@B)h9Dg?Urm.!$"1M_W1AR+s7DDikO$g5;^N0Y&!.`_pDoTahQQp55h0t\rfeK%RA#=TB>ZrflTa!c9843OGpg1;St'9
%ohVbf+u?K$2eIZWU=$iE[XETc(2uQOnp9bX:ud.(-i-%V'`U6n5)eo1T%pTf^qu?ec#C#;;\t+j)hkCYgm\JcSIL-?3_TEhcYUmW
%q>7!4]%,=bF@72XHK\[5rscZ`It"?^hk&0g;WVfX`sg&`**DcL_^KpT1X>PX=;<"TfK@cn`^f@_DTuh4C53q,!kKNGqi%[R%oSTo
%r1"A1,T\^+?<'39bLMN1a[Cle2P**X]IJ[sSnC86ceYX^a\3[-4.\We5Zul!5GG5mp)ql+lBU4?a/FGn`[-gogLt2n$=YW%jdNjO
%q&cr5h]u]B-9N>X?r-)focD$j=S:liP-+rID53L1J,`q0[@]?=:$qOV+oo5a2"V<`7u;D`J#B"Bo;U-aRmk#\8L/<s':Id9>Ar6>
%KS2%ORXVp,5Los9i_Cnlkd*V7-`bqgR+75Rm2CJa>KIKTR@k/d7QrPBYC3N]o\;lB"5MQPmaD=rgHD<Gr8k5ukJ3YqqY\&aq4AT6
%%CW^CJ+OAj;,WtK1I:?ib1JJ1^II6sK:.S654uSgDB3:F5adHX=aEWI!,$%Uh9(eHQq(*DBk=F@hQQ^g1)]b7SrBjhmI7Ya8d@6T
%M4D@1ef8-:eY@8578rN:4liG5*mOitFYHri'RB4sACa[!cKir>3s.SEBt%G7F\_\[.6+3J9"`"OE:$BKK\#uelfQ#2NOui*L1NM.
%#WD>#+1eACs4R">b!o/W)@d!8LuI>&>q]\gHKeNlAhY3H2;"c0L$Q32=fk]kCK92S1Y_m%G]u^&Btr9fpH7VB\#4F$AbDSZ?*hp#
%r!7,?ag'^)IF_dS6^+C4DP0F:koEBBcf<ZQ@c-;>\;MLngN)L4?j9e1LW.W^L>&$0_X;_pUpmIKn>[p>@AE2R%[Y,]Xm0V9D4"S[
%B_ED!-lXKB?#Q.-\d;WCG0BuRhtUN,&Asdf7bGQj/.`A+e&P*>ZeJZo4?ddaldj+1W7s4Wj*2-n3GQO<N$m3FR=eM/+G]dbPpas5
%g7Eo\M-558'u6EfI`!^ONH;ehDfd?4#8,:6fcH>Pa2;sL*K<3'E0Tll#''b"C`"b[e*V;%qS9T;=Wu"BSL<@]YtVadB\;luWHW;j
%nC4&@171<:T!`]CP<\\f=SjI$QdhY@Tb70<1-JI[$)j!h<GV79&+Eok:=++9POH!8Qs"[T\JNTV+*sj@0a8:&*5ZIT#Z>q;_f\aU
%s$L_;<A7P-Y4dWZp,c&iX]4buoDM;#q")`5*-`9*4]?7^8\LhrHpc9m%oQOu9p"0lg@n+T,<EfdRO+lg$nUBdmRb0-/Qd5PQ;-WY
%NPn@Jie,3=,<<'<6aOXM:O,bRH8Udef&+s.Ys:(J2\*29#TD.B^q"On_W7qBJ.7.rSP4&,fD3(0RpS/I#KuV$C=1qC]T7'82iUl6
%[+2D$@#$)`JHfpGbVqH!M/fWIooYLTh_*%""PIcCH(5RESQa=QUKDBfnX6g0]FfhE"s%0f6@ZdCKBEDBUld1;51JF%)RY`b40a9%
%#Z,Z"gY4S-#I'@Bb8`U&(!oVq'TTL@A.mVn<nW\(m%"?ZTL,5D'A[W/lY&5n<DMhM[`iH<9a17^aa!A>XlfuA-DM''o#][S7#Tk*
%M+Zk#mksbW3,<0::]$g'jSQoRfdObt3#qtNBUMo#d>(-`qD^Fe=Uho&kftItjCfn^!7uOgA$%SuHRI5Vka)$SJk7%S]P%c@DIgV*
%@jJ,pGJ7\dk?I0f?0l+:h(VG<k+muk::lPP2,qbCM<BPS0(QN%i+P=L_3:bsq1@e$@JDcBkb=UgDLHX]d>l<([Hi./;7-2=_:ZLa
%9>PMEI'FhR/e.8Jk'$]2YsG#=*E7??`_W&Vl_(h*26mc5pSG-Z2mKo_<]2Hgk"EtOM2Lq./*7iaqkP,0pR!U0<e=+N$#aA?rRDfV
%,rc\>QlBGi\sIuqcaU:p6s?R%]D"+T2]?Sf&0$&![0slm"Qoi7/;3rJ([[\p#lJKX4,B,ScRCk.+WE1@4fpHl.$)W4qBQoVl!WcZ
%IlqCA87(7pJ-4u+\Vk/f=PO!?hf,nIjIH8F2VeM[nV>D[Hu/bP*5GVUGC#Vk%c)O9j1UW/.I6(%7a&,`@eRP0ga6u]=O,`M0oP"b
%d;*J6-,*<<E8n@-c$HmU!N9/#K]s!G:p8`lDebhhpC0;J@611>pU`KUO+b.*3oFgRC52*mfBh#l!Qq5;*N5gscha$+N+#&KX:NcL
%s.S#p>#s_)J^a.ZkWcYSL>`ERh@/Q%VL3#Gc!c&X\YDp1dgadTS=ehUXd84ma5/ET_6P<[mRN54R/L(M1E;s]:3JJU^H:#i7_e19
%=?X=7U-IC@8',i#3WMY$b3-mYmEP>0P6#4#?1*2sd2fFU]tl+b+(J[^JeT>^26]Z1$^d:uI=bn9+>N30,0\*F>,[Go#qN`B>(*0l
%_p[0SC?H&+/5F2)bloIe=.@@`-^"X8?+i1O81$=$a)4V(`'aR#`s,`lcKSgii*h]Egu2b=-5!d#CH)X*V,t(]E!q#e:$[Cb7ADtG
%V\u,?U[BsQYY(r$RS`@"6lt?P)spD>I-WcLi]6@c$esKW3*-p[]n)oh5]5d##?d[E*Tp+$T_HYh2>R!/7qXU15ES!P;<rTXNel>-
%r&jF(gbo:G7]Z*Bh4]IF5.#i-C2B\"-b`5s=g)5XeTmO&ZCN>p&1dC3?K5O&741ZSQ,E4,44Pqf<hCOp\sJ8S=R)-g=Pmk,mI238
%&SiHsN-IL\nZdL4Ui*0]qG8Ui;S,dE<XmrW)7f6R5etH:ALBqaAtu&`R*SXh;$8eYEYI';h$K:.dH?'_\(<n0^qiUaE"H#DSd;&p
%GRf6&!H,N.eu.Il(0**5^H6;1Ljh8>p39_Q]JBrcdofR'*qhNi5bYrTd-P99O.>O,Cl\dYjKM&p1P_]SDAEJU6^-^=#m1Q3p(W"&
%Or\LPmfg&M\2@/SS05Z./+l*WkBrqnRF]X(T63)QpJqY6NU0AgJ:uTP=mm9ZQIBGA$;1tp#^k#\*rKH="B4X77*?%B1M`Aj*f)kg
%*cFVfFI]n\HRO(8ff%`(%#gqkFqBPlQf&t?4@o;lnbp]-+XT1BG0TCOAIJAsB]Noq:\%FFE&IQu"Bn@)Sc.%\gV$#[B*j(nSsYN&
%RCKYh@Du[OT/6Jr)`bT1d7`MhAQc.iZhK%VB:ckchLHjQp@/0Lo>EDUrJjpu-1GTMZ?;aH@SSW2.Z9e#0H\`#S<\?JC32#XPKN"%
%4rA/!@^OJ()O%9#;!Al-qg:d*;gkr+_+IZkdMg%mf/qddGn6qX6%,Z3S"8NPaa9uB]$U_iC=NFSaSM,>N$t6]N!f$I=j0.@knIFS
%.<E!YVrJ_NZ8dk2cT5lKd_3Nm]6f64LXmMr_3)OIMj,;DQ1,QMS>/VW>E7kk>E5H`#7rnM7g<Ft)>be(MSVRG%an2@q2f.j__&oB
%G98VW"Qt2^&N&,+_IG-HMd'_Z:RF"%rR3NW)q#e&75g4/]>(;u`sl87A,/M>UPMK<q_G]7B#X*/VYY&q0`L.Hg"kbRS#6L+,d"1j
%G2i>?YqO9j:;#H/(#rR7%aLhRVpV)NUlY!E;GM0,[Iia5[f+fbIsJ_YkG6_A^:*+qq@Apc>=Hc5:B)73%u0UpdEYmLKb)?Ir*"ou
%&(Ll3=?2"`QB_>m<8XT0>-/s"(qk<A%D[b,2=`Wt>fn&Gf*M0jkEX+0IQaOKL"k#kIP$\c1$+@4_[$2SG.ntqE\A1&'\L7*"W1j$
%/KEMq0C+G%FM>Lf5N1SM`X+P!-&c_M'>K^0MTP@5W!a\6/:![ZkabfQH@]EjWTW)=5CUu;+'"8@[:4o=V:;Ft2b@fq&^lNY_p2W;
%XjjMMM?RT@]q+N1_L-NFSW@]DEj<JsG9rf;YB.Kts$Nfr]QKRBX<"AfO8Ac!i>UZ&&)EEa#f_8K)OJ\;a'<Z\DMreSAC(;PCULk2
%M+Z3i;3_K^Rp.N,%E18Ac/#&+-I<b46P^T,n=jADiHkHg!Zb('42;lo'(S*Y7"Eo0i.jS_g<h.\l\:D3["V.pq?0SLkJIVL6tkRm
%q)sGH57+[nnXJ;)fQha\24iOo$"QO)E:rlYR,"h4UfPb+p&4[!oGk&QPrGG@2b)RG;8[9I;;SNi#7J\Tp"*<pXS1,tl--+P*L/5j
%`m2D$0QimsUT]"j3LIsd:F(D"?i')lc2-C]2n7W.a;1+GLKh%]7^SF7Wb&j&7W.)OL6Hq-:JT_HddcPPa\.'RW"Kg*jrJe'2P9##
%VL*9N.P_tAf[5\^!pfXpN/,oh]4@e/=bH/%NG*s*2oLuU/8o\^I&p8hYedpIJ;UXSFpMSjbuh^KXTd`6Y-K-Z4/$%=YuZf4U$tsc
%'"[7in`/ZcnV+AOoIhE4IsHGC2WXOJQC?[,o"g79S%KA!GWQ58GOMbk1L7:%/?o,Xj:.Va^O"M@e9)u%FEIW'dU)qUIe0E7VS`6W
%?%j35BK&afn50IFgq2iW>(,&oqDOKahIS<AoWH9.`N)(u,&4sJ(:3K&mksOGJQ1LuXrg*LhVd'bgq.S%Gj,[nVd@$p@OU0jX;X0,
%VO9O;Z<^W-o"NtdQg\9P??(,bcmru.*ka?+eF>$9A)=8`K`gepL%it6.?TOs]K</qZ?LNenC5'o\Pr/j>AVY*hc`g%'6h/<Dec\d
%lqQYLUY^Wgp:WD+g@ffQ6N*91X0"L0:\KA@Df/RtGgD7%_jesl$f29RqSIU4Ip)>KRi<gFmF+f>LUk16OM-]fNI1,86/:rF0@07H
%no]<4>:K#Q]eraSH0_NTJ[`14oBJ2/_u&<BdabD-\%s(9Gr&WRak)Op0<N6BX%WHGou0f_Z,\DL\gu*"bcqpdin<?=%'q4nC`P,W
%-Yr^XaB%VUBm3;+?A`oD?C);4oDDM_nOQd)4Cf@'g&$ENV:5"?Y]S_]CFria/dk<2%!6S5CFh&#jh4G_`?l"!M.F+BirV8TqUuHQ
%m@9?U@<u]*P&Df,=n\s)HSo0G-sl^9H0N,bni)G%>igT%V5\TcgWu">07*V<lV!fhT)&rf9\PiHWpf_'pLf)]n?N_uh=q%e^'D'Z
%jO8-Qa/<#1:#?>&oE)r*>3Ca2YIb^R/h`d`<L25p'%Q+%j*kj5M&a2[Mr'BSZ?lQC]"EC>p+@_Um+V"2*t'YB#Hu)-o8W1`nl9pM
%J,+Qb1:O?%q<jP!a%*Q!qK'-\h!XQb=1j[p%Lf\LH@:r^$23!==4e1g[3G9Q_3ODOe_QKM;ou60f?S+]a%&4BQ+S)sY1tT$Y#cY`
%p",K"M]o484?_k.g6GQWeQ^UXe[9`!Cc/lZCp+3:;Ijo#a53pfNL1fB=l#DsO&h=Fl`J^SlGh-7mFcr.<FZGG[Ao./X0(G_GdSV#
%>ck,OY<m"JIIhbZ\9nRc7F!+OC[iWJ=Nd5sbA4Zch7^3H_r"dIm+79L.ah%1XdRErXnCu,4g]rZ]/s>K\>!=,,ur[in%:&3IjuJL
%p)epHoG:^,<WE$2<q;RfgKB"Nc:Iq@r+IO`(=u31bsX6%OL*Wr^trQ[*8#a8Fp#9o]c=OG9O%am:%(rpfIc#8J_,W#Y-0*XKBqLH
%45[XAOF1?k3tU]C#Q1mAI^X!+lSk^?\.2s?rHd:E\6JEi:NsW?T_]5\'_<aj3ERa8PKuoKGd<HJ"L!ih4$d__]+TKO<l2]0d^]e(
%D"sWMnI7+A3SE$pR<KULDVE`&/TlI\2\.otU\)d.2O_V]<G8@3W/!\i]>9TA'oI]S-a-UFUIN32?&JB(kkY5C3)gE\f0]H$/JAW6
%muG<6C9\A2f%N)Wpup.U'u%n008Hs1Mh?!/YgqB23omb/6g*XO9r71i2\Z.Ba3E)8*kuuIEVR$Mi[A]YjrTG>h]LTbp^:H"fb:bM
%F4e\3R*078MCG.e,1D-pfp.L\$cB488RRb<aTlQs7UqJ3$WH3?,+C:>ej8_e>Br)8*4N6ijEAdIK0)[fhJh*4iI.l1k@O'=lW`BO
%aaB#5KYTC9&>(WNS/acS+4TC#s,sK6_U?s`"2bD6]gP]Lfp5]n_jfSIE4s!@'D.dUY0c9s]4/"Yh@nEiGtHde,Z_jAc-q2F$<7u6
%F^n^Cf%8r/P/9C)8Eon]?7MK.T;5r6hiM0pRoOb4?BA\T:emd@gOD>sQ7mHm\m4ZjlZ0IncK=oo9%cBfBIcT0\=hXF7SXZX./K\7
%:8=?%ksm`k^3\I5cVh/foiYW+bu_>4[apG-Z`UA%Or)?ohYu)c?>FHsKq0It'3RM6Qk:LHT8k1\CY_N)q2gT#Y7B/.4cR#+B)Fi4
%4.:CK[WAiSAm84%"5C#EgZP-ShG%HlGJ,!K3RMT<SYsZmURh+PaR=$5+*DaNP/W44PG@fpmaLPXMSO,aBWpiX6AbQqmRcSMn$JY1
%m:kgEjBeadWR8u>rQT"Lk1?>Qs,&a=DV!Psn)Hbu`bTcf/60E``ic=CQ.X9K<f=.uf3dP&=hbh=C,;FU@sm/MDg+f>(a]hY=m$GQ
%0"[UopNhUO8oakd\U<3d-frg@DY!9R*)8\&eRHYoo5Qt%\[lRPilZQiF`Hl0V2Y*09mZ3lV43K]f$s>K?GB#I:OCoGmoEh/?OSBE
%qjG5+%^Z2>;EEZa%0eiuN-^^J8EMu+KBl]UpRo(RW+Ipp8%Y0k+RkQ)\18j\0C"#L0[SuX%X3&&n1\4J4WN$*p"^kml!=$skP"H:
%kZl_=0V1`elW6,+fpsK#mgIA%f4+(!g?%/6EId^g*q($;`,XbQi/V1(&ar:fY1??W;X3]29(\[E1q2q;Vr?ZXj>?\RE2RnQrJf:X
%<.-@=eMLVcZZk<Q4nTkCBASD9s%H"R94t0&Ig(QeWs#97\UQEUSF>u$o(f,f\Tcmm\N%fOlDk`srQXqCrp_hl/pN`NK*A*U[p@'l
%q+hCK?DVnO?Foc7`:&_p/oL:.Z\qR%;SNnfGM(+!g@"KBAMs.$'o;#V)!3;KX^#,e.P".nS]Yj8=upnQ\NUK!,M1KBETnhF]I_qc
%+"iF0%sOOald^s:m8bgNG?`_P12iY]5k^5?FP#uAq!-mFq6@GV+4r#fmh74kmJVI<^&-`9#d;*!&!<'Xikr`<55S_')Y0Yr8\W5D
%mqq16OOl.W_A=#fVi775T1[_Ci,_0)oUcdK[f62Lf.1RYRGtog(VRK0DPObTf$EF&MNRL8Y'=*`bS<5*`Uf75d^t0@9)1)d=#,gl
%>$9RX^6Hr99W-[Y]F3r?+X?9_S_L[284:`Rr5!0JEdDlaYLG("^<1MEVL"\<IB(l1VROR;[3E$6B(N=ZW-::WE$'lQB,=cr7dD=X
%Ja&)W.qN&XpVGub]:.EPX/h5#rA#7SleRo9f%<`g.?0f\X#HBJS%Hr/G.uXWjO/gc28?`R9!,AmXjSQ&@rBBHSp>Rr?^\=]mWP(0
%:4;M7ropt1#/,dGbcC<I/&#>$[&&eL&*od"pu/OMZnCfk""P,Zs)s/d(=#ePUF/;h8b*P%OUBJ1EV^OJQtpB;2[OP2s-]e"PL8oe
%(pS6gf/f[2nUo^UN)^8?cs=O`:+bh'Y20>kYBJJ@g@`H/^NpfU7m$Umg/bWC4\U2]r+cU+$[7r6Mh@8TgPT>(miDj`>M8n]j(P>t
%P1(lJ=BT&9_8e7cj@cei_(8)$O5]cqp-uY5m2g8:0MF<dolb/Q_d:!%E0cK$$[NjLS_[1!*+#\[)(Sq*JH=kCH=]a`h<uXs*ob%R
%BEM//Cc@[%pM.NMak'<9L#oB194R>rL.PF5_rAVkQ=[HJ?_6*0`sR[mjnkf6n[9L5g\(2+FK6?u#*TuVrNq'h>_-;h^XCG(Vu:/f
%iC_*(l$BBCYOrMcq3E&[aRa/P`+EAOgCQHoNaU;k`+/JfKMSYPQtCX(+m!8qQ4NdpF;!2/\IZTV0E,?.<>*XUM43oJfoE3(X24SQ
%`\ZaY(Qd;Df68kYI5T(oZoWXkJuMAN7YbTD9hk$mbKjD4j'at)=P6mdFb9Ad=>mqjM?F'VOi&+"j\k11+W>-]esaFGj2`S.O#t?P
%Y.)@[\h#-<]9g;nGtjX/Gc&,b,W7M^AG18g+55*%%6<%91u)VCU5@+&mjb`=MO:+a1O#"#=&,-D_<oG:h%j)a4ck,:>:VteY-dW7
%A\"#-UpCiBC,]H080LVk0?[LQIIJ7)2mr&'Zo<6a_-nU:n47jK-nl'.>fm?595li'D11-P8f^e,`('$[p;Yp-)3Ecl-Fg[Wg>J-@
%eK(]cX.AWKq;p\"XQEp1d,/PB["e[`pu,Tf&&Tj#rge,KdKK[c^%(.s@5k(EJoiNVP[]@-9/'N%4F0_9g=gRP.UJW^+!dJ%@te*c
%(X"CsNai6Q7hL8FrPf)%b."A9kIpkF92p.+V"LuVlqM2I3sYJRh3c;V5#ip\KmpEpE7Yo:U8rr1__A&;2L$)UXq0"/:8`7YC`QmM
%O]>:IUEdS^Y&=I'VYW9tbu)o[XLD>$(Dj^#Laop`pSX2a2U3;">O]s&A'g6ZV4nie'REEW_I9YJQCDBbl!V3<qUZ`@_Q[8l]S;Eu
%332o=Wh/pf[KDATFFK]/1>D+d^!kYB^`c,N1SGd+YTpb%HTG\ob\`-,e#9QBiFM(>egr=:=&mAW2NM=FO7D7PU2m1dlqt$X:6_5,
%`0*ktL])Hbg:8,F0(lO.'b:YcSZtao!CjTM:Qt\K'ck:TgEuS1VQt>U^7F^P?3rf4o_.$479'ddKTe-^6o&&SOtaJ%6qh7W0#n-C
%R=cYg&UeH&#s*JU5Tr3!mMt()g7q^;_5?blF="Q5hg6h3A,5<*jJK3B:X]e'CBmb=E,8RMQ\CBa:+9i-0[+^%8_jn:dS=YH-X:st
%g:E#mn#NEcrH6X3JLF,XULniFDCl7)Eb?tIhIs)Sn]nKD0SO:oHsU"fa,Y'./W=k.(>VH)MAG:'dmWo;^lGpdp!mS![e;]?'$etj
%Vgu6G#QY%_dQt:Zin.16";%7jicuNgf>4TWS#MB6Ba5K#Fp0@E]c>h`Oa-HHWn\J)AL,QZ.#$a0d6T1oSIu%c.A<WMhP0e!j60+J
%EQEfQ^$^W4.P#kc\e)P+DT]MBj)_[(GS/t;]uqiWYl'krpCl4.IbFrsB6P3+\@'@pp_.uV(re;*N@69-iR^%ma963K^.S2PGD8n;
%8FsY'$&$93=0_-h=r'KIF7/;$SO/QX[*XViOQ9fN3+AEe4/0XNJ>7N\#LhQN["o8-S5,*gM+duMJW=2]1.Wjj)5i/s.Ng9/H5d>]
%qAAB.:3t?ejK$N^lnUfJ:spbD:C/1k6Z,e4S/l0OWu<u;0Hj4o3Z)J`8^22XG<]>>f8DAl&hqP^@aITcY@6UI&AkGENpI=gL0mMR
%K;&$pPJ@TUA3kDe$/UH\675Jk%HsO]%_l212GlSAa9Ei$#BUF:AR'7-C>S((%],G(ONioY+k;Br3f1%M.LX-&fXN_,l$t?iUODKg
%:+%c49:h0'C9PlY!?H2:ZF%52i?cRdN7\8uM%$8K)jh3eWYRI+_Fr=\>BW(TnY+;@Y+l7F0*e'::9oV-\:KZh9c2!@=A7HjN'M!#
%/h(VpP^K2u0VDF30#JDXk:aL0#h<$-G$_-h6,7cq*qLJY_W=WF*G*nb<``>qT7AMf?ZJOcrNhdVoM_rt*fVj6D_Q<ZI:2r\d'=n9
%E't&nBp98A"WHt:)Us:=%Q]b3<eZ4h-n_Vf9Gk9d2r0WA\(Pk^Y:gu\/7Fd=+A!Yo,Kr8\jA]ff+s`6C?3TLGnL$JChTB3Do"@^Q
%(!LRl8"V]f;0A^Pk8`Z9@<tC5aP7M:A#G0.N^Pd+eC>Pt%A]s?SW2(_Ld:#ll/FfPh]JF;%m0+'P<+MV#7m6TdFB,Sd+6u)<pKS<
%;nZ\[KNT`6Y5CIG81h\#V\UB;'dVkE;[_qdQ7j<OUL`JfS)6&CG7[ZM?5#.4kIIG$O0b[,;^E:#R4SjO'oA]BpiYp[SU@to8f050
%Au*j[WC#g\c2q3nT4Ri2CuXeJ_m%7?E:]'E@94l(<c?kGnW;<,KnJ2l2&+]<,Fn;9cOdm_XsIi!S&D2/]<c(Nf-m[h;O':6IlKU8
%QI2Qif-,?'Q2jD9I9:(%;VANie1m0]EfS[U.dfYea;m)knJJ,.UUbqcWbPg(8cVHE@/B\5=&&,?a;)eM;]N^B$ch<+Sp:G4@l]Jo
%BdnDekHe^\,.J.a4.YF6jV1]`P0Tdp:oP%Rgg7+tVdFK@nR:7?::9rEgksfbC_>=V=Pg\hjAP\*I[5ln2)ibnWt<Xm=c&]?j=f!(
%5hUT?P^.>8OmDsTNl`=WgVZ^2]K!a`eo>O>[<q@CE-M?Had0,c0J$`/-sf+J6K"K:%$c#EX"ob+3k+,i4r=tBR&tD8_4XRa6&+8,
%lQV]1:)Nr%*ngso:7Or3%\Eq!0""c-KRt2'*8N/3MHTP2G((@Qn!@BhD0@sFoYRYlFWcUHj6q%M$=8EK5b#2`lh8FmX(PgL@@0Oo
%qC$Ga:MmNWNEiQ=*CVh\Cb/")rS1&IE1u+'#[7`bI37QZ3X;@0XWB-<?p1WS2Cn7<%6Hg,fP9d>c(u?M,=T\724<F!fP7]?kkS$)
%fJ+%=j!kCX3fn,FdRitp$guk6XM=/N75_m.Dq:W%na'26YS>]$=$#[q_rp+m3Cu!q=TrLgh+Cf"6kI12qpdNdS(Ee$c-eItZ_frN
%,>5Z"m.QW)Q8uY4&^g2kn`K'g]![Z>j@"frpA%p#pN\\4>aHoM(H.LA'I[\KpSpWjY$R)Yje,_8DI'02>uCJn;gc!/F_LF,gD`*"
%!U8CucRi,9&*\JF"D`6$8a>]l/;Z),?WQY>N(Y3,NgGL\bEn3)!Bf8rEpAKq4X;P3,Sl27)s2-)-:VKhWD]l2(lP,iC1_Ub%b=Wc
%P.R22Qa&k8MYa9+hG/RT+74a2IOo]Wq64Em.MZ(YX*%Yd8(9p)e'9;]9m.PoQMZU4;l$i^4t=&=g4Y`oHLYC*5(%nHeW2/uFu@Jb
%>]*Xt=D!N@$HoWH[,4gbA'`e:2T$"$(q<h@oLUIfBJL;6Rej.n]6/E5NO2^Z/TDOI=W9VkPr!L[>qCT5<A#(phkJn\P)O_!Q;6XA
%4]Y*gCqQJ:'Sb@e254<QB+;.[:1NlbQH8L6:?hTbPUC_r4"j!/h[51CRkT#G]@!bQMC.^^fDCDg`9#huCm8ac,B"Nt]4@d\Sr3tX
%>jor&5Pi%N9UN/ns)9Wl*o*Z?<e,!<A/N8P8;\B=a"#32mm3&Eg>N/;8]LV2.iJn,D\_(rft5uK/?_10ODh%SS%%e4Yaj!5.BG/b
%dnd^.4AZm-:HcGa8u-;!QDOJl<&)+IB1TIkKD]#V:g!CNLs01;cu7JbC0@j)V'ampHN0"i*;Is=fE9'Pd0s%\e&dT$3%-T2q5X*i
%WXtBEo;X9&a.#>+S9YnSrITd7<$9]E-k*sNaO:K_HhHUrDYo<]BkoH('Dg)9osNXb>e!qJ37tbXem-U;`IB,Gpqui:R!RltdZ]p[
%<'VmIU459Na!<s7GopQ.\*C2Y/QVD5U]WQd?L6m1/NZGX3BAT:b>!+hAB+f7jp.Z2>-AF<0f@)8F%pbTlsT:7Rc!%[q3%hXLQ,ha
%h,mO\c^jHFXO12q2:O@S5nUmA_6&p>k'cgaBR>r_E84S[PYSIuIsNVg^1=G4Pogu3@8klOa*-Lk8m=u$[)U6-;q/klJ3+;)BNW0o
%UWa>d]#HR@H_[4F8Oo3*'.eO3R.d\$Y`S$S?mCp=%H=!G+86I>^\kZ-5SHu)+@"T7?dY.D/Neq%OgI@%N2a5^'43eg43ja*g&fop
%/%lk_j0um%.BVe>4q6O)Z4Rq;o=dU$rZ4J:6fGiA@1[3s+,eA;J<f-O.\!U_'E%BYPeUFM5b#WNo8DjNglb)+%1_4,5>46[k5ppc
%`'2h]__NRi7kq>n]'`7o5#PN-rI^p86Nn=VmI/++!j3?+eFNM2q^_OS$4'A>mm-;PdgmQ&d:Er_OKD7j6VGheAGEO?m1A,[Bu<WJ
%#<!i`NeA.g1nkGbB,T+Id\X@4-QQMQBm%uVp:,3T@qh=n^QgXR.rUb)C&cSpl<J$IZ=inqI*d]2MsUjG-ol"@)K.5W09-#^HI.*]
%W9;ObOC><eD,$%\S`XDWrWW&I_2+XmVJ1.gO2[SB`J0V+5$h+DNs\Xk[^"2E3%eilPLnS"1_eKq/>\6d60Jup_WoZ=8pei7`LF\D
%LX.#4RNj0441U+-2B:l[`d2\Si#>kI_,R"6+V3.2+WSgu%%K./VD"LJlh"r,XiH-E*)[qNa;q6A6#$010W3l/,Q@7sM^C7AZX34L
%mn_tmC52.=`>VpD6qjT:C;t$"I>HXY'B7a4Uu9g]E'(ch9&E,)D#FZfAuWm5NUpSna(4W3\&["8V?Xo';ISnPZ.Mi:5B9J_1k)Yf
%J*RfI*Bii[#,q'V'.ZcT%Xc7'5?V-+qkW(GD^YM5#]G_5@m"X.@7@cno%%;)O#otMn[7<X/KTKH6&Q%bCSo6\*Grf\rGE.l+[D]e
%dB98#_"CUrkj[OgWGb!R%2Y"9"O@.Zm7J<Kao/*D<BOQ0gDntJOF8,hUn;rDTlbBN09#>_8OQo:@q4[23UkVI:ecKA2tluaQ,7sL
%=GU6/X5^-6B#t6HbdLj\a%]9o[4Ec4*-h;\[k\W)]C"3l//N/A*I%DCBJiYM?<Qq`=\<B#jLVU!P.17OT";%7;M1,Z6-4cIkL8Xq
%2#HY:h*/)OP\I[4\aY!NR83HcA:*nV_N;0%1>Rg.K1@Kriq:B9a9l.k\u^LgbP)D+iF*:4)6HZ[QJu?rNTY+UjfN(D@6,unK$WG`
%`P.8_\X@l3G$b>oB4?j:Nj!;4;]?6e0=9i0_icY2(O4te".?Up\pg"t?L-dIG.S"V2c&gR@PA%%oFCU#$Y36QGJK`(dQXXOG-D2P
%d2j.kUXqJne"EMZSb[U\<SPqjY.P&jHa/]>@Ju9nT:KmG&%r^t8HVD!ZdRrN,t:!bH6k([NHIEM7S-7VhH!k&MYRf/Kr0]\Dp.^l
%'s&l$pA<hBA*iD;TF=6hNte[l9)YSVjn+'VW;OYD,lP)i\M[.,TVFir*-:5:*BbdM[IbC*Tdq@O*d#bpp1*6#G8$$rS0f>:)rJ`f
%pWsUj*GUq]6PbV+gLh':+/d`a=4.>u6/D_^eCAS!Go611cCl2jj]&4h;'s<rY.-V&gg"%%eUPG$DL80KrZF]UO.h$(OH?(W1G(s<
%^)>@.AkYu2B1I=-rNSmMno,2->F>P^I&K5J=;T%;U76=E?oi=>:dee4BHE".;rktf_kTt8n#C^0jp+>WZF6i8Y<"Aj"2%Gfc6`tg
%*?HP$"kQDN8S1!4+td6p-Iu<j)4F3[$sXM@Z.uq-ntW,]%aCa2[#I;,lT,RQIJ1ias';MLk`ZrPb`:lTh"<As:*9Dq@P4't3]:2S
%WR`enHID`=U@63Oqd\In3jA'HG>&Z':5?A+Zo5T]h9b'WdW)?9[o^be1D(*E68)0UCOTJNlU3%>+_N]ld[U,R-W)Y/eD8)Oq47fM
%dJ<"W#J8_Wa(QOS/N,5#F';SiN83pna`In4?X,C=)g>WPn^/o5or<)M+0C"/\caJ5q="H?Oa3HYY''4MC*5\]XeU5h2;Mcu]&Do-
%Qg4OJkq,\t?B;%m4=F_@da$DLEc>(FiknmO/F"8nAoJo@R+tEj,=?Qe]9/,'RXIsNjND&A4?=3\1(DrO<ARf"UIEp_*:gf%JUn%H
%["'Dtcbti9]#PpX<7O)?NOJ_@f?nANH<VrWd,45WC,k0G.nOW@(j8A=[`/CZp0lNaAN1j.lfknD/Pspc48Nkg-hL[/)!t,%<Nm8c
%%17<U(G?6rLPlnF>%2mS)g!$Cr*&cSAjJ&oMgp+aP"f;W"!#iU]#"V)"i:T3DEo#/JuFd']bd1tqRk;8_jffGC%KG8p7*OZ`Z:G7
%m^VWV]ka+W%F:=2*gMciLYC+.fd[r5Rt"Yl5])<jO'(+sa#U',?N!"^llr)/_jl+%UWLk9OfO4u!JS!9-(Ln=FEn4RQW"<r-[W>Q
%IRj:'(g[AiA.3@7rcgl:h:R=.Bl,V:0Q9M#(gJ!LWVB/YjlG.sS[85:0_iLBNal=KkOcgpcJSVZml1i%Y<)KH'#K78)<4BtOrQ"e
%4rbCY&"A\cF^ml3_s7<[>ILl#f>YFE(S^ena\9?iDd^3!D+SFa)LVDmZVu&c)-M%#qguE>7cBn]/mf7\[HT`I%$#Z^m[PE[?WnR6
%pl1P"Al7l*[@d<2JI/I^C9g`dNR[a$=7!ZUF;R5kbbHo[q%An2/EE`@]<QX"@X8i"BOR*_UAp5n:4DZVLLajUXeutMrFW=2)%Cf[
%o*A\D+u&6g:hS9@i?\[\-/<545KjT.r?=jlg$5-'"W?//":qL%:(.c\\(ARZ[6O:n#j)R51,a<jdbhTi)FD_=[hgYWhKWdB=-RFL
%4]r%=S2V2YLZnf0/)F!7dKFsq:)[b_mZ9))<ZQC#NM9-nLY2B_p%#6$9l<'D#gTU0r:\Ia?Xs4*,$<XAW)'Bnfku[9"KW7;M#<-k
%@#.TuYaI(PLjoA`p!>o3r5!koe\cEbLD*,O+sJjJr;AQ=_8cBJZRrIBYZd7I'RZ$7_I?C/-buV7B:],%@W3b647Ua>3l8tgjW>XP
%)I:!=IdF4Yr9*h3(f(S?\c2-rDuJRC>ONf%8VEVN5@I,_<Cu^7@8UJ;7D]Qt\7Yl*793:E""20K39e>gLAaql_$E9qgECrj!S@nn
%R"o1th#l[drsfRcJ,bL,fJ(>OW[B&GEgT_?J2REX948Z-6mrui=\8=+1)jgn@"*o5i??MK8.o@6#_5*`<qMWLV'Ou83J>8>TPHgQ
%_ZHTB919#G";!0o6O3rp+9CDFg6;n"N63AE$M02^CFk6l-j0fa5l`3^<=e[F)-#S3Ot(IIV9"B+SlZI1IE2c>9n87,(-s]t_>tT9
%!BQ>g!YWC)4<50?Z'6,rYRJiH!CViI_ZGbfQ2*,[8h**%Yeipj244jDMC=[c"=eEoW*gbU",LVV3->41mA:MoZ5+.g&k#%HXL=WK
%ncZnQZ42AA=A:eY&0+LRiW^uKB:Pb)%ZoLG'Vo_:@5)32"p+#pTY[i@XFg[f"]u1>$j2>EBbDX(O<c@-<!6N,4:,g3X2ZX?\=tD1
%+9Je'DN!Qu7#!^#[PRXJn/O&?)&C/Njaj1s)HJkYn4j-Ti$-4`@=_p-!0CiY'gsf.`rRAi2&W2fL-\oFAg6itg+o=#*6X++Pq8#M
%ilQ8;/VWaR'J*"F6@"ik5gUF7Zt<kb-R1'KPm9V7=;Y)s<=2WKRBAM9)'Yg]`Q9;pOX(=OJ-$;gX:PPd*/eu==g`gd6sG6CM\\i_
%GREFjX++8Ke3R#DjVX_,:B\7mm:"\W_i"5W6:(DR+t0ohRNu'R)-']W+OZPb_h,-<Lg\m]Z:;nt7T9YL<@IH<O;jK<3<L2;aqE5q
%Sl_U;_kUu#9?nq:^6nu@V8e(A[_NV_[W/7%bJpPs=A]s$6</D;-\=U(G\UGB*p//!6"M>L&fFNY"La"qAVaMV>?EN'K-6b^D0_3P
%O=O@#,K!`/8Q5heDlbF?bp8TN-M5E1aJ!HJW'!][-j:Gk&6[[!Ho1MlXTB]k;?^LED?*D4K&%$V,_<'5@6n!!AW7iQ6l)aWD%#YY
%&/,(@%\3oXA7"7DL]neE+:4?pK"scGG$>LkZ:rWS!YRjc!n@GSM+B:OW)Z1ra09_kJKmWc_AVhWOgcYC1QWI]!h4,9Q!)I"X">m/
%2$g:R8e>.Q*`it_WWZl,-@mJIRkc*V'Iq6\idi!*"`#G/01c;B#`;'<M"4'iZD\36Ku.?R<p"6en>[r=8IB*_O98Nf;'gr0TtDW`
%7$4`F'0(OC^bT%+&R_V^9,PLbA*N?)OgjitT$DtdU1/cAV@5,=+``H7^VKD&"VHe\+fa@_TuNKc<@!M0.g&ZqQ7!6c*Y_Z2>$09[
%Mb,+-1P,&NJEMU%&>,nYNJ/_!C'ssZ)H9T@:EVE#715oAmLTpSn?sl'4A0dW5cLOjW'I^-N&d711.C\(+9`f%$jA0(QC1Yh>V_7>
%-mA(O&h*@eb_R5n9B]kf=Aalk_Q$!t/m92k!F:7oGtJ>F$Bh5%W(GL%b+S_NQEUq)Ygh7.@591J/&\Y(_]\R#K`S$s0.n*?[)*sg
%"<"V"KMErA0FIpN73[Ht?)d<XdSbVGO`=%qll%9/%)Ki'8T1j*i&!\r=`gK.9a2bG@U`^M]W5F"R)Gp.fu.+W$EObpq?/Yann&b)
%+GM1+%o=-@YcOB&<'_c5F-L4Y-Ai?Q!XN69%(liO[#r@/^cnc=BW"r@"p#tTP"\0!JArTp&=ZgdJTQTLEZgV.Li8CF3HRtB"2%Ti
%91O,:($_*9:SL*!8)P4f:^`V"kU^.aQ)3P,E$p8a[HERQ"GYp_@8^IJOuNYt&X>ha^g2cplsPK--EtDqMBg+b<:1l>Q!"Eg'BBUZ
%lsR@Mk_QSKW$nkc'J,J:&6Y=Z-qM=++mK+b6ei["`JaqA&l(+tn6&Z.@Shu)E'/kJ<X]H:9;#*AD##pW3uC7=d'Xl3K?DY&9<t9m
%#_PR8h&*.'>77Tka$n2"^^ZgC*?9,3qUeW4Z_<=%d(#.*+OhT/*=sJp`CCJ%V(<=CZ'KG9M,QsXa`-qr/98rP^02X0"Q`(,*CCMX
%)Ueco.&%j#%d7%]($mUr!a_-iX['6^UmOMB6Squ.3(u<Y$7hE7UYeJjLqlBLfHsQ50LlB\):94C1unpo0Z],5,_a/HDmbP(+J_Gf
%<7(p^>`((,\c<(rZW:FqJKk`f_UA#k85MQ@&Hq5gVBCt#)QOH<'%nM(b$nTAN\3J<a/bd<j-Jn^J7gVjgQB,WX4F(CO^s#"8Ps/u
%+n4J6-';b#8TEl;eliABCBL]G6<(lhaogL7_Q^rRE#_*`8gMfU%g1O(5qrG9.EJ.aOgQtVCXQar<X&W)MVXuE;Q7Rdgs0Q61hq,3
%CH@gk.'+0XF5RDHF>+S/KL%L]@V\e:8[^s39Ia^2+:OG7/$pXJnc4_/jf.[3hU!7T*S-em$8Y1X)^C0'3rft.U;UHFMW$FNVFIF*
%$0BkQXkOsKd^Ofb-_`"<<a/_2OqUC96u)o2MJ8f<V$G,J:(f7D-;'qWXCUFD%(IYl"U/Ku9DKI49:1flD3q5.WffaR=0eV'%&55V
%1mu8H#Be/hjhP5"EE94>:/N`g#7u`D.7iH47_s[J@q\mMVB3[.N!h@!)$K"5r.*sb,!s(_%3f:aM`ihs5`LH6JsZLi:'Rf1Q&fl$
%fFrC;,qIQ5_)`0.Ka=:A=Chf#!fIVEUZR6+E@XcgjsjJFLIYKXA_S9$M.%qc`en1C%tOfq_;%m*iE/aL5p[e><H04>&-2o*)"h/C
%3d3V&'e:>Ua8c`=@^H03?sEj6&fn_X5nN6XkCA.0OISSU=q34e=-Gp;WnR/=j=(W[VeB3\O;OFu8SA*[TAp)39akX1`'f74'[R/L
%)5>1a%P"E5@&FP=EhQ;@K;C4(YmSTicj>?=d_$)on5R/&b_W@BTUJGQr4sW,Z]hbO>%LT`,7,)TC`Xp&Q>Vh<MO1I7Pf"&d-<,S^
%H*LIOTa?ul#I-BU8>o'-BHtq68>.1hl&DQQA&D2E-Rk<i#M"WF9h/UY*'iHt3]>;7('sI^fugW*BpLa"PlOT#i6aAs6>rWoQA2Xh
%8[fDe:<S1(p7)s<cHq5p[?<5c6A4DhTh1V28A[',[Ls6=PXc9VGD"a7'1TAi":igSLI?L&0JhbUX:D?b!O6eh,&gSg"qEu,6-M$`
%@taq_U.H>H`t#\UTTN)E:)O*6P=02d?oiR[:>i8A3FMrHAmb6E5m0N<.%+KKq%q6-8JIt7_>mI,=PXF4o1U!DAC3(kj"5Y_O91sd
%->,6/,cj"0adG"6;Q$7'(bJ^\/RfuP:12H%!M\SY\f9^VU1_?I(8K5o$H.0[(^G[<[Wj&'ZtbNl)24Ap#Z%Dm60sJhb(e'W9jl4K
%&hSQi]S.c4,+Xn>;;i:(NGssc1DZ4=GadWEc*>uC4?J^U;oh3b'R:BeB'@rV!bhs)A0I*n2;,.rJB\krM@R-H&$$ma=ck`g0NqSF
%'%!5ne.i6kPT`ID&:PO;A(%*5Fi)@T-;l*/7hW$U`*/I-Jl%:Nd28<F<YPnc36FD39)KE\Af"TCPrMqi!)nlb+TfWaK<]e*GXmU&
%iL"bNp^+"o1+/6tRC*D#$B218N#7K^nk]L&aAOt:MP=C;;mEQYjG4Wa&AG.]0Oj8Pnn(^#M1QFq-7Y*eJ_1:;qZL1IZ[qUM[ec12
%#b`paXM8/JK,!-,Y3eQRK&nc7)I,'KE<5&5:9j*f]M,XGgi,NtP_he2d16@0Yfq#s3'i4ErSmS/i;]gt+7NNBNUH<BOD(o_a<3,@
%qTqJd&INuRUaN\2![3`d!QtTSAlUAWLCb"^!m!<?-!8R5gpMfP"]Q"t66QZ.Ln[9]5HJou@-eFME$WG%O\hKN$9U:\]!7sO+ItV=
%@ekr3BurgT$j'm/Md?C8Q'5l(,B,o)8q^)2T*8mPh(Bjt57gpf!()s4Xmj8$BE\mJLgjr0]F)c>^u6mSCIo0BY<7>sbs^k@Rt\qE
%-kS!TE(.'6:^,rH&Aul'\??#r/?i[FLp\E[M<6&h"Tbl["H`qi+@&>p:qqpH8XR`]-4)U6.C:ZrVo5sp:]s?F@u1\k,9d.kp(Tb'
%'aqB#a>T%<d:Qij'`;g8T`H5@/rQLagXJVaX>rDa5[*/[_9,8:J\`46m\sBG$=r<@J\ck8[0dq92j9I2TaW@MOeN+2MLY`",$ID(
%?m.X7*+E&C/T/O)LFb](a/Tgc1N<^53NQ&>a;UmO71a@hft"RW@muV7#c_DR?@`9H4=FBbPp'V&/0P:8TiDk.5[ugk-mD.og"f$m
%,Cq()KbeoJQ6d5FBWE8bBlF,S;\DYC6LnGc[1"jWb=SO!ZGS3tX47JbXSe$r"IMq%CGuZY:aH>?2i*#0TdeN0YSnoi1uKXa'0nNG
%,S69-/M.6+JO#556Xs))gaGR`+IOW!!RZm#P]YiL2($Y$+X<7?\p&lO9H$Jl+E8/&oY_X`MeAaf'QCW''ljY4Z)E+B<qh2T0b2DU
%:XiL20NWr_;*F+Q.%4]u4-4iG`g9dP_=S/VP[tJS!"_:H-o/r'U6#KkM^1'V5(\$N3*R=iRY#OAM$c3S+k>R(O9uUpMDZS\0E=[r
%BXJ!c+=S(*@:;,05tPN;&-Oc$LZXtG\QC>)Ub2#oO<T:4Q<$H.OMu=<!@34.,Wd_;5t;JubR*!h;97%S@-)WD6^&bNOWA'@=b$^@
%e34"lehbFX9UM]\!X]$c4soreUB6`/60qI?M>IuhoQQP=!0\j?!iGSIcO^5>_$8l\0nMB=ph1U7g1#Vo`2uBp?l^n)D,mYITY@?U
%B2&L[[R/_Xd>imD!r.8!9TM]Q9tD!7AeY:ZW/^mL73+`Z@9On>`#PF*mc=upPfR;685]^!$c&:_<YAMM>YLK/X"C7Rh<En#;'e=I
%5][0.g9O"F91Ij(&O[DD0KBJ<YS^%J?R#/!J]%dmGsojp8N8<[c9*ouEH>*deeRaLJB0]CQEECS:NX;p\pe,D+^P2A!t5oA(.n#u
%eON&r&37?4/#(X'BiD)?:gHB?J[C1Kd-f;+):T'RYK>!K4.([H;'7DZ``fp<AaTg;'amgS1C=C#--cil7G1jI!=Q)3TSkZG>[U]2
%X_ei0Q5'J\W!qE'dLmjW)+S3t7C5?]G774"&]E-4#%^G<3#ek'fG5aZ[b*\iMZb47!b[4bgR/=Y);aob&-p*&$=F;W\nrg)M1?rr
%::BnIJ;85K?H&Y''m*)nJ,qrpFaa<B,_I3W[iC6[i__c$\6'r^.T6aF,!:T[.VH`d.L*C*WUu\cnXh:C/@[`'15[.L:gcT:VXh6d
%b$-_O)%-u]Oql@o<j<LYOAR/PPjEBm9[$og0I=,%/ML;!"+pr]:2?P:`b]BA)Qc=I3a^Z*ODO+'@GJmj3(H+X5Tjm>^));4bLoWo
%KZP?mlk32-j8fD%E=2"3Og]N,JJCWcE=M-b$f^am!Wnj-N=2EaAMT$7k,iZ_`!G!29DLEo!:teb1[n2e6Et`e'Um_uP[PE0W%[-c
%UZ9>qRn/0UE)3DN=CbBB]/GFNP)!-NiX[Oi;C&j4#gk.RX(iB.,ZJO^M=amW(.E0Y'L=9?7+hd0BNn#H`,S1K"W[bdl?HMFh6Dr1
%JdiL_WI<3O'^$#QEV?pF#^@a"=Zg]Cg)F3.,S::p/:`]<#m,?THb_d,/?L4399//S=Lr'3OWZEdA?:ma0aPW3MNrOOZPR.O*d?[^
%3Wt]l15a<VU)Y^sa)_NKl$`_cMMsZJ;EVNp:E\j@=jB'\AOB!]h")33!>JK8,@o1+nQ9Gb=UY95He6XP/MZmoqtq9H_@lGOj/OB/
%K^;UUE!e,s7!#.W'l?-OLD#F**MZnJ&#*L?>ifW'a'g\3(_t'8F+E2*'j;)6+RX([TYb3#Je/,\1^;SVO&cX8`TRgt-rn0^&ojrX
%"hk#2$kb$OGBjc'dOL8pr/q0r/_J.a01'4_KFORUO6J01%8F,N"GrjhJTum'9F+Y>/eh&b'ejRc0b$L$64gE:#QeXN0gUq8pju=.
%^d+OY=2X<KE%24+5f,aN`sh*I;XC>fnMh>RNN;95'iO'ZW'j;/.TXO96R*Vi(TFX%=;q=!Yr"m7=DG8',"R]<l=O#>TobUC1fme[
%BW_u=_(Bl3HD&]g.@qel4G@dbF\8m>m9\R<^pk&?BS;3KK1(P^W0JrDINU/,TNXDXTWebrUfe7/H`p__e<HdU5IqX_Yr81e%0>u6
%B7UbtH7neiPYKm^FN+ZZgcuF<*J%,2E!4)g%Q*/$!%Z^^ap`8:OO!Gg,_C9PAZE'.qufk^cE=iO\B/HEbDLK1L:9%j8k38<=Md-0
%\)=@,OmjoS2(Y,)SjF0[Nlj,/Kr5R8M*+gQ705"U<^.5j\uLB]'JcY&U$=-8M'tYd=PVc<TE78]Ugg#$'2&=VnRH9SE6JZO+*sL`
%b9N1PSMH2U#ZLt^&3Psog]Q"KE2lSs]Kh-=7=h?aIh4*VNCXdCV9#kr/r2h[1*-umO=]#h5KJkZeJ;q3"=W$aN?rsM2%m,C5l)92
%$;hO-YT'n/\.Pa-LhSNB$9D`"JS^o(&<Rs75Y^A1ChA96R6iC/6s17],0H_<Jfo$Y'El<X+I9D:9nlWdkZhXLP,$9e:orol@]W<I
%M!%lkJflV>g&`Th`Bjm)<M_TS^d<T@5**<1#a-IYY(o;$6`4`2Jl!3n)W=@,H;[DTI5MEsh\m5EE_(GP#Z_4kkH0TK_+dFVQF>2l
%HUt\8@.!;!M3IJR#13QNU&1?\MQG/3391T$M#hQ/;Pr\/E!X!I%Kfnr!0g?HL*P>OTt)WgED_X5(K)CkEY6V*PLLDFT'.U`05[gO
%3H7U>*+gG#,W>tuU6,LNR>+nT>K5Eo&(*GOM$5,dQCT:[!\cAW#9E$r!ZoB*,n,_IBRO.*o*U@\_@UB<P+4nY,t<ti_Ia,'AgB_e
%AToY"`Q;7WXY!/V_9<QTeiF1rkF!Hn+AESs[".N#n:P.0\oWf'6fA<F9[Ea[jS0d5X'3OD=?Ncs9c:?EYQdt0;FPac)8XH-A3=sc
%7aR%?r]b2eY%q1g,\Oh`.Ki:me\0r`5tY[JR*lC>5Y;,&"ep\pJOVGHH2H9eRDh?;X/`'fi%P!fjgirK\%&r;S!t'9QlV(38UFnL
%ZGWbfHB7bk$ZhL(cHe2\B>(=OjD?oMGdK/W=d<+6RN['Ag[c?L.MjZ^Kn(UY&'bZF`$#Q]9$c315]&cQ$@Xs;6Q,8e\N/'SpQMT$
%rH=S+26ccm2j2fn$g!eMd5Iro5,b%<I)]k5E.$+L#%J.1Kt"8f_W<(eA64+0OZ@I`r8bXp\AShpa>V^2)[o@$FmXA/5raagWWPoi
%jtuo74C`f2(KN_?Ra/4.jZS"#pDko"J&i@d,/@/jb@WuGb4E"&?F$%QkH0"]e&c$c=FMih>5$UKJEUQJX!drHR`b*bG*B1kgutR:
%GP?ilgdBJuIGO//2M?SZ,@dQWls>^FG0H`-EHXSd[`md&G_>mS48SdpZ+`?SW<:ns&ih,h)qM4'lk;E)f&:>^)hKDrBiSLB!;s+d
%2)1OYkcmhnf$-l9+Wro0QHsU"TYc1>1<k)Mo+GN<m`(*UK-u3tY.Tkf+V3Z;<Mo%Tfup`n.dM()'Z9\tPn>WI4#,")b(=>P,:7r_
%!fkgp]l((?33Sb*dd*$hNoX6)^cHF\m9Buu3+=Xe\0JT^Zh#/rA;^@?"7A;6E@G2%"d$Xfk]`DGeV<2Y'TLP-V;;fejJP[XWaE*m
%YgM6)c[3qSQR=*2@[`>^+(0\*Rm#h'I*JY@X,,-?VT$nb1NCiuQcHX[B's@p$P;MhR$A$f8*G@LD&cW;:&WB,c6=T?)GK9b.(TZ_
%4h787&gg]T!W:#SJg\ahB6iqkh%\h7oejCqj0Z7).`?#W8Wmm*_s_(KRU;3hI!gqAKn\<CEtCH/ID\8;;if&"$h/*Qq<rIH1iXl?
%qJ0c",6O1,D4"O]5;WiI%l7s=AWEF01\QOa%.>H(\@I)S/asC\q3P=7o(%$p*/D(!0L$[HDZKh!Xej$I*k;ql&Z/mI>hS9tLVFe2
%Isn^=F;/?o#cUU?36ui_WS`mP3'Gq4'e.3\<hM[,ahKl>n\3)?Xqc2inTk,<og68AheX^)Il><*Hd+`$4S'hp:qN]Vb1"rietk><
%JCMB#o#BU%YFg18b#'NMeB9ha+:L!;%CA?KfpK>^jlmf'W=aN\i:ae+eJRAC"7P^;"'%e:^,W*gfFERZAXZC,?$.bkcGu!X:Fo]]
%kgT`0P,?*1bUl%31E,6Qqm?i6K+*X?VBPtS?Y8f8KB^%_NYr#1Q:LF.q8B(`2T5ZDY)r6o2M;$(JjCulT]WgGi(6'4<IIkM$UPO`
%-a["=lTbV0h#pJYDDsEeq"Z.qH<e*\hW5Q"n%DsY&J\3dN-NYaV#:#*/k:D=c'_]EPb*be8Oe((1HH77#of7`PK:t9`^;_Wf*%s)
%_P&N^!h',87@>[m+dqJ`Q0jNX=_NR@ecgCp5<#e/qEUq0FWHP'ooAhh(#>o4SD')AZc;V18]gi!PUd,5EE/7o9(Q:Y\SBL*k-iIP
%"K5AaUUGAdQ@P%'<S8\5f7dZcn;S?a[mO\i^M[L)SFS$h[f,gI3[k(%oCuQ5Dsg$gFkE9IN)[K]@k[\GqS[Aj?&Z#2;H_H-B$M1i
%?jaZZ`#,pFIF+'jGdFT'r98,Sb*0EdBB5g^V^1aQ*rKc5ZJUB]0^gjQ9YQ#p)nq%jD:*fd'/\C4<2ScPLbTRn9t<tV%]2AGXLL4t
%584oiiS-4bE4pEZGCki`T*7^-j!<?($uh=r@Lj:Nn:^&rK`Cip*u\]%hT:-e,7Ke$-*!F^.FYr6f2O#:bCS"3UM]PI`(jaW(N4Tm
%>^*>q!)$Sm^`\QrHD2rT`EM"6fVeASPFfuG"Tg#O&_f/0,YD)!A'Cq5/MYcc_s"mbq<I?^/j$qRLBJ&_)HqcUf+(A>^Lh()0(1tG
%Q`XFWK`^R*Z=,-;nc[ELm-WTM@4'Mdim0M>/:;8^EPC,9/SX(^alO.W(IUL0AHo-=SE\0BXb>"W+>]7@?q$S]c5_4BSZ,NW^rgM0
%=?J.84hk%'M*kh;rb.if@4KOtg?jL<%Zgjk"ou[26&-MUhZ4!dK%q?E,KbcKd1lG1CX105Eo&C#C'dt:BY,*%JtBZH,-B"`H0>DV
%II1mtWQWit\dP"jH.KS1MCjWI]3fU-DY\,I?-l/bGZ_[/^TbmO1o*5HVJ8qfJC#%/c#jqm]!%*SeEOM8MSkh!QQ+lYr])9"k=srN
%e2\EiY2c)U6W\g0WV#Y&`^k&^@-F9seVmb0J(a63D/$N/NU9Q1j)s&1-d^Sj]"D1^e#&:55(sYp6k"AI1=FI2JnMk6;X0WtEsC;=
%Vl;5$#C]P^WuQ5fF]5*$Zq8e/f9l\%#<pXB@-Y-&Heuq'm^R!hn2=iGHMrrL<d]3O$uRCl9[NdI4^--YkKSn1>Km`c1lsJ'R]D+b
%1j>TqXKKd`"Xg4!kqPUmE10\dPCS,7o]u^hSP@8@\e\mUfu2l3<<<\`%auph:ANBi:A:\7]=f4X<&X9Z4b0#iJe_:;b6fS:[rMF[
%@i<@:Y9^gpnBNAd5H_N^0L_T!5&?+2IH:j*F[i*>*,AfgA\ZQn1Zd5/Y[fa@80.R\R-'m)29/hfbP#0#h;ef^bKipG:sV$7@#o;C
%c(>!Wn3TfL@=clSUMi=0SMZQ_pdk@3e8'`%4"nXSn\6F$_4k8c&ML9FV3i-";fjff?5:3LXPo<oATTVOL>XGBMdhF*,55]4g)>0U
%]lo'Cj+>l3PLg9;lKrk"/:IS!@:gfo\T/.iKeS7alKjKI2<<X"ot'mj=.HSR$V@rmikdL/"uS%Sih=!r;_'5k[ak9PgrC^m&98&[
%Aa6arqCMYMMVE*]iR35KWJX=hM1If>?lA+G5Mfsrg<cN9b04kWYArFK1ocm2I47;rpefC1KV?3faeaHjAm4L,,DL5G'[M)e%5MXV
%D+kG"n>NA9;I`pn7+Ttk);=ImigZqjm324tT-@uhp5Ms:,[u<Oc)F2k!M<Gq<5GZhX;G\%;u?F#@B#/S9FodlBc]GpnS22Cai9BP
%62Y>1M`V40bnM_1=*MJ&?osaa$iGZ;QS8P#,e=uJg%6uca/C,MKh):NLA(kib"]kr$-.:c;&1/#2DGOu$?%!>6o^fT8(HRdC9^N%
%?94Q)VJRT/BA53h"!fNu#s;ADr\#f`75T<r[6'MK4bcZG;t-9TM<']//&[](/NPLl/8K"prB>;@qj0[3X7im&2?St8X-!:`2T(7O
%NG2_I5]<gs`7WZKZZ[`DI$o]kEP_0m0f,(n./V_,4LSXl(pX9%JlRQ)K^Nkg3HpnF\B6,"-(_3g];+=2&OoVM)6n;IPV8pS$pJ(L
%)HK&;g<RAr<Q&>RXA2(eVm3P>eDq=hp$&aT&]p9S6cp*85:^<j%5j;hKJD4EGD4C;>(Q)9ANER%90N@m\TU/51(js#;fB3&nrgR4
%D!IP&NW5tkO.`_oi%k[SRW7sEkLsELW\!=S]V]0hfo?H*KU>eBcB.,H+&Zu>p+8dhF,d/g+H"K@iY[mLF"#9`i7uLXb=io1'GXYH
%+X^iPhO,knG2f:`Mcs302j<9O<\]Bp[HA!G91q;@`k7gJ6maZn>dfJbPK7>K^U&`8kjBVI02NHfM3i.O`R0'NP(6C(U^Fad0%fZb
%Fh4X#Fc/RNj8H!@!34Tu2`^^kNEsEE-V<cintOb4aNRHT#sGpmMT<hb3$Q\j9:_(Vg?%hTbA5'HXUn/Z=(Wb`9^%7'=K)?6Q?7Nc
%gdrlK];:B%6=!.h6D2B::\4f4eCg]Sa/>(lKKE*_Ml:4[VS^;dW;P%Udb3ftVhQ!EPER=J,*O=LNc<S0;.&T7#J=2W0C/BG*8p@T
%do8Zqkh%:@X(oAoEtMS&L\YqFqHF$)g2:I\M1[R".dJ_bjkRh:h#<K=cNsVG99AIcQ'pnn$e;B5)>>-b9fu!K/ZNVuZ8^dEVbKsr
%CdkVibR_JLSJuH>':cbrg_>WN)qDro,Z3:W4fQNs8]]d-84\FWeWUI^XkV@kPp-lJF'&>UCh-?3#g!)&P*\[t1l=p!%_be2gOJm>
%F63snU5>=*0Y["k)a%ohRIVPI;%EBOHhqu%6>?gt5j!FbT\9tM"h8]p1:)-k[;4qHV`[e$N<&?F2AK@o5N\YgB-"D>O72i9,?:(D
%&1""Y1>.t8PgkIVkX`Z<eil`=^n[/&0&M-KYYNjf7bnPhd<@2:Q8_u.k%Y/,.?*,35p&3VOVqfIP37F`0B;@]jmu$2%G0ia`^iAI
%@s6q#-aR9GM?!F]5*h`m8q[s[>isM?s8HGBR<L6]ihk]&Pi+,i'JX^[mUI`kHdcad?ioDKS^C_71nVMMJZATUe\5DTfsf%86mkT-
%MA.eUZ9gb\X,U#M.aE_*QJ,9),ScS^.hPB,0"]["Digg#lnL:ca8:m^+1UYT=D'BhTDLTRL8c":#-8a;N^5$ff'\OE*2_lp-.9Y\
%<F*#iQT?@1l\>k3b.\RgJVQR#dX73/IYB7(<GL[Knppnf@4c]^43R!/LZRb'D0\/&>I@'bl!BZ;C8>15A#TLU^QZ^2Yh]m'hCUcg
%qDh(:W]DY!p[[qs.&;M;LUFn+i^rgUlDsc?kTKjY^UEmN*!`!nYJ0AH715/c'0:1!H,^RH6qXD9Is7lj[gW_!^dcjG<581C+?]#!
%BpqmgqJl4W7uH)J',hE/@$L'A<q/D85/d`V87XE!SJg8SrcI&u4o4<83+OB-lK<Cr7l@s4X_SL6G)3"i932ApGs\91*c8uXoIS>=
%gbmXL4XU?/6/Z@Hep.k>#9]Y6f!o46J>Rhh\U1uoActeLmaJM&X1TKP/,.gjBg1_>"fs'Zfdikkf'p'cL0KC)dj_G)h!l+o+":.T
%.3?mbcHa>,)`imN#<j7WGs_dC'+]2nflbo>H$W>EA)AjCSgr2reup1qAc_.D<"NCmogfS,(;7OgIBo.[KIsoHADP"X12C)SBS_\u
%Zf-*j1Kdii9_Y5kU#fB3>V3NU3X[IQ('kJ<mHN7!=E&eZipA5NTeub*KL:SSdh'^bjOf7cO0#OMe]=^$_q,ZbWKt^Ig98=L<6nf*
%6(dY]Yj09R<e;8TTE^(b,bV9Q9PeKG5,uHGq9$6U=\iLnkAa'Jf(':U+&EkYWV;iA[_08[f8g^!_B`rD/Pqg@gI.&?NtWF69=oda
%P;m"_.YQj_$g#GbhbobUGV!<@qhA1UrG(Q3C7PD\+0*Y8Y"I^=:<j=^BJ(,*&gbL]<8Vn":?H'0'2enhTZAc)SFG<YlYQ0,#?8cD
%Gf$0H&rnin3];%bAYI3X4S>r&@X96M"@D,EbFr>3,`C?Q(E9GO$;Pk(4'$4M5.$i=7psWI'*^ZY,EI4a1r3q5p4mMRJH!ZLOL:DO
%@:!"5jD$,AQk\EdfG1kP!bkusq\2Sc`>i@&!/-lO*ojYG]g`85jLB"$;d?DV[@\L\N/EiS<DVX,Ke#jXDG-!>a3'QI[qdJ06NDHf
%c!UR6/%7&S]2(BVq:2C/nRe>)4sK)-<h*pp?B5K@=]Tui"0`;\',T"KdmY.,FCPXCmXb?mVRVo3MoI:>kq<]1n/^Xh6dq'"JVH5B
%gM_Lg5tm=sR%W(3&WK*Ik.*Njbm_$H6>Gpr3-$UcffElkL>1ZoaJs6Kgi8$T364[ZXLlBhG^U^=Q<V.GD\4<nb(LZPQn79\O:$oY
%9`5_?4fP*=eW,K.'jbr";bE^q(+blJah+C_FKbOeJJl,&\qX][rAZ00Vp_kiGHLeP#jUr9:)0O:'[KE!UYaZlSNE.Cf1"YfAX3O>
%]k*urNiT&eM%$.@5l6Z#A4?Ih>dZ(e^<oB/$]b7--"!j`(S"]67WZL*qW!GtV[qG.7jC/>]UH+M=?u3!!Ws!!L5S\0<I*WIl"o\B
%]m^c?lCcs*pW2&o&1).>PddpiCO@2hs1C74834n+OJC$cf'oM+9"C5BLp`OQ]A4od`q5LZ6LY4biAJT)22$u?NM-UoCHj,\2`_1G
%lJnmW'lL[==<enI;CsA\*hCG%RN_TF83WDE;ln6r.,5*`)S*&s3I22I4QJ84Bs/6l(kH1rB><!u9[3&FR?G;(4guh7<O"DVb3M^u
%_j`1,p^9ac?QF:Ok/gP%gRf\D5s4tf<i%0d\jBe-!ShF)dh/78&IbSu9t0_&/["=Pp&=It<+pcL6k?Yq=GP?9;qpp\/BnNdb+S5B
%EDDk)"-KUDa(U#OB,e7P6W.JSI>#hh^is*scV$\qmu-\^6r;IlV;hd7ED0TO`Ssq8ST!>8mSK=C7kp7g\/`GG7uN,/8i&:=k';0Q
%r[ZRbClSYg*`(90U.gS!]S0JbWn0j?32V"5c;g,iUe>]MgnsBi0t)Bcp6;r[AugJ9GWEZNXfqC':F@*!S_:t(AMXAhpXd"Q"k3&i
%^6<:LeA[B07<$cc7g`K`:@Og)?8,BG,tfWMoq7\D4i6nT05";ZNO@["Ij6m.W.R)n#>VKcRJMbS'PI-DmcTc&+7021TWJiorq-7L
%od_J:\E0nX[5\a.ATA`qI19C+J$/][mp;Q@/'c;B!tP^e11:H<$oJ/]h80OMBso*If6fQ:n/I.FWd>_,7OAqL087k]p;&:b.8I]7
%eQIO_BX[\N'+ugmArd+VXuT^I[6-8<%II8*BFq&JRUc4tH"\VHf6:KLolNdYS.nFcfXHd<^60&kp<rgU()YDiVY"2MEH/>DQ$'<p
%$$5*CWc6BP+B<:0^0rWqX+Fhu.>4>5[:H,>mp.VBNKgNnGsnRj@0O]_g.j*>/Dc;hcH+u]e+58Q<H>ZCARp+Mnit#@.#biGOo:&W
%$`:AY\he;1dsIDSHY2l"Q][pVPI1NIJTbIbRS->8;%NdbbHQI[<s!Q5iJ7J*0e-(j:U)"!EU6>)4CmD*eb>8E=M'!>[M:R8lGhhg
%[c^i7gA*5J"8"]o)<RW7-Khu"O!Gu*8q1QOb.b29G&[ekN,;u)G3M*6kkU`Y!ag`UkdD!7%HFsIV(pLf5UIot`48qu553<c^82\t
%q2u4ndCPG[LlPZ*[r^g"Y7Y?M$LW$Rr6:J<5!LGR0,*#C9Yq!F;Dt!0MN6M5@&o=XZ!KWmbM"LRULWKDpD7.G)q/j;_ElgKSm22r
%)L#IUl/sQS`e#U;H&Ls?b$]O4<-\_t:7[?qVTR;)2U6`C7@`g^*V[fri`VZ^7cWYa?[+cDi93#`Hsdu`=J^u@F,0RD`',DifUW@^
%S4*``ep-K9]M=m[/P&uW94;Su*qd,4^?;q;VG(D2E+>nr,_0T^GaOB%"O"&qbfl,b#.W+/MQC[0Q.:Jl@BK!7i6o6*9V?@:(6p./
%lDh.l5T.#5S@b/8XDR40K%K-,gI_".pF;3R]iO&-i,a=Y`fakBB+/m9RHJDg'pE?<`^2_"@!t'0Q_%$Z]UEGre+^h2`NuQ&*^%e0
%]3P?uOqo/N@rai7[$PK$?!RB"is'=19L0Q;9#3XRZe\n_FZM<s9-"M"X\.H!ZS`Jeb.(Td(2GKH2,8L0#CtpqGSAjAA]Ruo3sYQ!
%$cC]9KI-1J_IdSUf/hg?X0&7Am.F=A4jYTK.P,_f#SDmcs4+%8EClB6qHla%WfR)3ABi)8L&!Y'\"<N%HQIZ.WpY$7A9UIR^t*m(
%TX9V:<_02MZs1"jUiSE`L#k$pH[(t^@Tn8!G.Z<!CA,"Bk)5QMdlZ=;.>PlA;K%:\@Q%"NP.*EaNZ8lf2rt7TJ$*+hn8iX`/=0\X
%!R0kUYG$01="i(`c.,)c8=#M*4][WeO,\2e1=Clr1nRDu5<&m'Q+J5V1+,)+Y++]S9n)M@?Tb.hhWjAbF+jiIFHa[(AbPDle`\,3
%Fs3>SkKCH/:up.d_5:Gs<OB2_&406ql?UJ[a#:,$n)`?e$Sp]09_"54;;4]Qh:Q$)`0,ZC2d:LA43@g\o\Y?/Nh@pBnLe\><[LgV
%OOo%hPsoV][2D6uJh8Vq3;F8:^SR7OC#W]$!W!N59W8u^rEKBOhQ:nT,mJju4CsKHH/fB.MD&@Ra',3M6])sc5^>ck5bQTI,8sX_
%@&[(X?P"(OfU#f!gY3t?orA%6*10i,lEZlU8n"1clK5=CG=g`;ggZ[ohoeQu5VA?Z(-C/sJ(Hd"%E&sNOE`B%buh"s3$kcBV@IG&
%h51N<%9)`)%9.UFY.Ms"OLJKTWMg`DLTEQ1[>fENKs:SM(X%*c5rKT7IdPcTm8iuWH@>XYWp2q17i*Qi*tnk0`KAf82cO?cc5jB(
%(`dS*_RB"E6\H@5]p-6LoJnM!UK`#H1IM5f'f+Z4"('/4Q8Mm4J=\A0rCCoc;gUlfkXSV3\/>N,Zf7Kp?'IB_c>@bdJSK(-3_E3"
%"hbuh5YT!rd3kS:,NleXmQ>;3'(-GO5=+UD?=5a.jB_JXOV!79"AoVea8q0PnRbl6"a/#$0YKL^`p6mO<Q&&X+Q**Tj6_UcJTEeo
%GJ?K&jA)fUJ@FC8cD>b)-+M-hH\0q.`A"Hl/"?*kGXY?47-[g+X`ZgQ=/$c^R%;NrTYjnPILmQuCe8Stl(;(5RH5=qZT(uM4&Eki
%>_+m7$'%bqa&Pa(Xea3f]=>qjPQOPu1K2j,!dDVFWWN(h*YB)(T-;[0QhpFi7#>pY,`1'N+o`>D\I#HCg_g:bkOm`W1TEpNIn8\N
%Ie9NWK`ubF)$'HH))(S/h]h@\*Kb0_a/(Jcp'YRTf5i.C(uLEJD5S-%HYU>H31.1g7,J$Y+`4b>6>GHUD/E%q9R,CbM_+&.J"YIs
%U30OBFS42Bj%br@n7M?7"(ln]RqtBlh'r[Q`Qq['eD/@:;4:@7OCKk"fWHD%9VLsNn41KZK>Oc=:#dseCn&HMQ(R"-kjl=(#]UVO
%,b`N_2H+Gur%Q47F[Oid$"#>-e$).iomG7`@4HUna__`M7q$95$=ktc<qLJ+efbk#,(d7AZ,;-nr7/<'4Y6e0;05+cQg7Eq$Uc3?
%9OHIUXVI"5e%#TBok"_3-R-+J`Y5JfXVXEW`i7p*8h**:P'TDrWJ;i%_H//SPTK[=1:<;GJ"u*Ve$tQPjT=gOpH,diI,&TuaF<&^
%@63Ea+-'t+>>d<>k28k<qg`\3Ehh*-WX:@VaeIVl'M(hf?eYh&.Nil!nA*0a8UaAm<Cnq"nebn"VA)dZ"6WjCe$,R6HeTQ>*DS3t
%d-3mLB=@q5@37MFhJQcJE]"+laU-_nA@Ek_=<i)[MiVAsb)MU(oGF8EZ<]6$dsLLO"\3Q1?SD(h*H*#tI)hr'gE'.SZCUM_AP62)
%#oQ"Oa1LmJ6BdSAn$Wh!HInk-RS,en_K[.hW,Cdr]sBQ;H812$Oa1)JOr/ugbAdH=1%tHs2SGTDY)s,7HF56j':!jEGBS>1)(?/;
%P1C21%0rU+"4TR)JuhEo\q;UE>k<ER-2X*@g?01N;g+#rh$FG!7^$5g?@IUsbN@2ip4(-?4t)^;d0*2^+auO!o7i^$oSXnj)Y;KY
%LGgbS-Dng[a+T?p2&L(;::S!%aSN(9),_n9(JJ>MLikF)2Y?4!`T=k<^?;M,JkP*l6!<7#DadNKTD,AS6AL^E?q9h20*N&'89Xpl
%e:EVaCm=7:T]),'&S'\^&F5bM\8E?4DE=Nm:q2htbY7YSFJduIJ45rTs!>^M>G-1@Aus]LKsahmD%-6'*eD7ch#g+Z,Nlp41O1oA
%cuYlsBg$G3EM!Y"U1D+9em\8DaiJDo4I5Uq>o32ZKV@KWVNWdEf@jf`F($=ikh8C]6RAPF3l3j9o@E\6;nL'(3aEXn[4k/&2^hIH
%)s`BYFZX/u]L0;r[8.L$YhgQC1)V0'lQE1TGK3mj%"t!I^4j>\=+0tm,#iMgg5V:&q>Z7.3pj5%i!6_q:[*ap,uWUWVZ#UpIdjBj
%7uI5gj;(4)_[[P9CpG7:UI73maGs7,"Bjgq79NWp!Lr@)A<$$.JO>E2-Y5`g]019Lr\k`p;(6=4-iN!p'cic57!"-qTB=AWF>hYc
%a=)!P;Ab5!a(!DPlXlZES]j8\g<(-iB]O1g4f9YtTYe%M^6c$Ac5[YP%]Atk/E8tm,+_&mpel(>BMWgE<ahlKHO48j.+KHL&9ceI
%3t93KTrZstI,a:AJ^?/d@Jo@&[@`6bT_ZAHB?sOFNVTG-Um1"Dr;d^K70JdPQcQ(AGQ%#jh"T@Wkfu^PG071'1@C4[-.qdM*pD_8
%^\8gR-Is)u-KU^*K^KS:8Hra%Ulht#/tSno+p-*2V.e6"`:;1](hdupYDIg>;VdIY>s9uHB6P@V^sO'NJ]jG#10(f,cq:-@dpGg.
%.F+?"AM0=qD7>;[J4f\t6bq_LWBn_7^f2Thr.i26qtB@"de(V-]!uL'b-+h^+s`$EW.t#3`LI>@d]"Uj2`7g'$XVJ8]H^?SroUAr
%g'kBI]D+<hnfN%gC:OBWlD=0umS5OZ?C^c_)GXE5p`8l/Q[6%:flKOegDn%^,!j9QJ%:9g=t>q4/Lg"bRRb5^5\uS`g@&]hGk<Fd
%&oM&Vf87:ZV2)kfGJti4qn%?!WSdY3jbL;FV$@b&57H%IT/"nB&$>TNHnF`u1Q(Vk9@&tGm%99lm0f`9=-J(!=7DV$qF7XeEXR=\
%ru,s&WQ_sZMWlg3rchZE-gU)2<\'N8\:t/Us)kAb\sJc=rHNNj["Rd)^8T5bl@OqU/lW10]TqJr=EB8ol>?TL8uH<7PoR^!DQ;LG
%$8X(=H*dDJ[.Z^e_$#WA,!H]uD=,(V(S(]#o;=tUk!f9Mf"5otaBmnZ:Of`/9S!0[=W?0JKfMQh^<,>U8"/^bIAQ&65n=jVc#RYf
%,b%u##mZ_NR@^H0F..aK3G-Eo'U-b3[pH4uH.3DOD[0aH)e"9!4tB[>JR/ku1&;k?"N$#$L_3>O8,KhIbqmO+[]N4&YI2-I:VTN3
%//L(9!]/jfY/_qMen;Ghm#8M.Dm6bQohjl&7KDtZ*2ko0=XC9i.@m9)-CcpaI#h[1H*&B-c88%4G%l,"Dai?U[f%7ncaX_8HQ)^K
%1c%n8NAa#`WaNN*0TW'nAL3RXff8.8VX/)qR415MEY&*jY4U$Yq)DYI^?$@dk6<=!f9+^_9[q6@a%"AWj>c)NPX%T3_PD%$8lI=+
%T*-<=cZo0(<?hE'JKD>UqCX=5f>XS[_Rnm45,KAq2-kLE!EX\Z50nJ/-uCphj\(P?Ki5<AGJOQC>[;,#DZ2]g4>.L.h%9^Om%K`_
%W^aR$-^1QhV96MV`n6\BR+?VX=()'Y93r^,AIOD5bB_qohC.B2pMlsX[+0RV9:2=6l7JaFpUfm*]lS;Dpfo:=HmeZ%VR,()o-P![
%CS^WBUY\B`'J3"EE0n>Za&qX)=lR;hD'B/7hG;Y-eWq6)e]NULrE?.#&O.n[rjK$K7Q'n)<G:Zla-Gb@4iO<m_d_T'F"Tg%WsiY&
%1lTtJ)cLs!DItiqc1`4Q,SaXI=lK[UpLssnO8!@i1HOj%;]Ijf,XcJ:&]QC]PAH<V>IXJPo3CfZ(1Y%0;kgL!G\bLYA)j45lbMeV
%Su_5"+QUL3hjbN#S_(W:]cS/VPNF.Rc%B]S]*-jX4/7e.FK/:%9!ulNKRNT7D-tU0;<s(Sa1EX$V:tGea1YJ.fJHnJAg6!=mQGc'
%j=)7]R6aZn?^^2(DptQu`"^76AG$orPU@U.\^IMncUMQMbKqOnD`e,TTUF->O?:E<,25:UG1ESAQ/0SH`W2<rj]uu%,1CQk==KnI
%F_mdDj%M64dNhRASLB@_$[<pkKsdc0rCEE/*up[e^b74A:+Yp;V+Ea5M71h#j#)ZJe^Q=:IrkGN'Q0M(k5ga`;Bqk9epjQ'kVOmj
%LcsV`HS=RXQr[GKB:eF357hN`#tjl:]kY8![Iua/KLlf"W`*GFGB%l;m[ja@*KYZF-X=`D3rC).%X/=nX[`"L?cbW69Cg,PK6A!U
%E987kRC<X:jAPZ-d`)a`8DYacJ/'j?,`@$9:?$,3Vj>K`pm+_hHQr>V6LVMsSC(kD:S?[-mNhs7J:Qm.J+VE4WuDeK@u<')gm!e&
%hMulCJnQ$(C7\Gr!X.0H:6#^VaD%rm:<E.16kgTQq5_QPZ2=i;=/*\`[b0]oW`,+YO\6CSe4B!e89#/:kVG&%8uanFce#=.YXXOb
%%E#/mo92Q\^dZ^#\BPnk]3g$]ESJiro,6"M6,+ke_3a-JJ]#)E0'+4[<i4T$L!u]Z_\<N/F[Jb?o?N$K,$3hUlJopUWN=hAeabXd
%c_:!lZ_%%tgN#ONWQb;-]fgX6QrJu]hBpc)R(D#rTV0%^ZG7qR,]TlFHHaV;L"6<8TI<t!;P!<t3g66Rds8+g0_7ANXV=]KR4E2e
%%g1i#dVZr3_Sa3X"M$<ps56I(R+JmS*X/3'UHXXu@ti%^I4+,.!RiKER-H5Paf'_1]"<)lr&uH<kTSa5;edL:E*HG80hQPkG7mY'
%Ke[qhhd(QLP-p].YP?&c!U',!qCVLVn<e:k\>tEfJeN7P?,T;&6USdkbE_VaE:%abGIuA^gpU#1V,Q't*i2p0]8rFfrA]hQ##i:&
%6.5.E+4oq.hG8U'=?8l#D8hS+Vh'%^jC=3_ZIH"$7$:T@@:BbI`P2.?X5$UlDW2Oh(2*&;DjZgI1.Wr9Wcj)9es/G3)I29mI`j>]
%%9322)+u0ZDU0!@hfaKN/?i@B+nZ@K6&/b5;VbhK&Ncg5DqV;C?=BsMQ!)ofCPfX\e2@fSCX0"OF%4cT!MDmT(YY*#qiKF,<TO@9
%n#<X],d=.TW>=<mIb\aSb(I(,()8<Q"%gJDoAXkN3`U=jdO1,be%`C^>qQoq&FBKDfQ8atB/Z[E-VP+"$LoY/1[hTdb3Kt0M<RE.
%4Sd,I8<2OrC))I<EH:Dl_q:fNr9isKX]2V_a:iMK,.o0T=X2$:e@U'&C8S`B2bu#n1'<gtkDn`B<[oM/LkE(3+U.!!CYqXibI,9`
%ZAiDW#skO"ZR2Q*17iM#<^!^2.ck`RZ0i!1C>Ue-R3N:d*EVqg^bs\Ie0,U@a.bEa8#e/Z8\*m4C@c1cgYS_$223=]r$:+:BR]NQ
%,uh=PeC>$BXp+k[c0;D(A\K=eZ>PBSPJX"BL="IpC^IhpS%m/!P7krN:/9ZsBdZ+F+76WtVrl70m:9qe(A#^&UrD2pqVJ]r?"jqr
%;U=Co1Ih!J^4`aPA$'U]1/5m35101)!/W2IR#r#O`Vk.g2A\Er:M<B+lLe=?&1D+h9#pQa%Huem_=FWCW'ff1Q3[UbjdT'T:6Z_n
%<jD$[+3&$b@"K8ld4mK\oYa&RTU:U(b1YQ+l)U`0\i#i_7`82kT1d6C`=iIA2PUEG%Ug]N0Hd()C,gT?Z_Dg?+jfh4p23=6obbpZ
%^2C*Tp[c#k0i,V>dYj9#NZP[efBL;Q]T_o8l`O;f\'s<^1N"0,#:pfeZkE-D_c:](ldG4Q;0g`U*q/LE3I*rn@9/M]=kLJ-Q@58\
%KB/%B&#O*<GtHi<]K>o[41l\u)#lYd%$=>B&@>XL!3>r,>K:EV)^sbPV[.H%8`U'lf3@%lK#m!NiQ:\E7>H1*;37`32n,Z%Asg.7
%QC8dt!!MU;\)0h)G+Qk3hoZ[%qj>K:gq9.<;Z-%^DX1$PJR=6_eZ80Mpe7%fAk<NLl3DB'a"7e5H>-0?^%].u_?BZ%"7(CppkFW^
%l05\<DpZc"VsicD;A#^j:k;9KX3P\JoqNIr=*/DH5!GS!dNZ\HiqSZ!m@0fd*5.^99$=aU_OS3nD4[VcUc,_k@r)LNVQ/-=pnT]\
%jn`lZ4gXMol3#AemnTECV@oMf25"Ql5<N7ei+R)Bikb/0_`_a6Ce%WHUBDVR;=JKni(jkX>-RG(XJD'D6:Tj<q%ha]9]M]&4R>sE
%8^BYr24=`59(@"';n(]:[;"kdD\^<)FFEn73sa8"!e[*qlU#Hl\c'-YUq%\-)nB#jrG"2#>+K)*j1^6D,a<RWcb=4r6[)0E<[)\+
%#:\oUeE;O4C]%;9X1f6>3(TEs_d(dp]mbu*[l#"d,auFOrEWJN\ra8;'K=XnO<N(%QchBfqu@YjhEmcJ,_9\'N1pE6pq)UQ->g%^
%YXf*lDRUe6<W`n=,ck+t\pW0g7ts;Sc\-"c4a/G<RAX`elD4T/MWq[7WB_uHOmUM\\%,_XYAW]RgdWt*;j8G25h*RHFkA^#=AAWG
%amAZZkWr8,[[I60Frd!6qM+_9)UOk??Sffi(+<26I>KiBWb$5F<_5-^At2RI\V*$!a^3Q]]LV3:<q^Yh(ol^31@5'>o&Xn,XZ,>a
%s)!VU=T_Ui&HioN<NJ3bk@U;61pNs&6f:[Br>0LmMiu1m=XU/F9MqZ`s.sOf9sq-L>A?VUe$sYs6l04-H4r.fBSikiXsX+X#N#<H
%7:-[qXPbPSbfP<H8_XtICjPp=NZ'W49$SGY2bQ1+S9r]'pUCg-9NF&]O<^!P2]*)k%@X0/dVX>sr]@mX<PSEJDGlGi9^f9u;Y=Mu
%1'BBk4&o1f"m'Nd[U7_<YTQ3uU=VE&AnLX3XGU^Q05^>F%ApC*$Vc6Vo<:lFgauYoI:T8uVdt=ZjgH.2a1Gho@0S=*Ltj^IQjJ\2
%jl<Yh%]L&2gMcSYX<arfQgAGmX(q&n')1%N39nTM0A;8hCY"^S`=J.Na^m'Yr[O'W^[#:hMsDQf52g)IN,.kD%Df(KO)Oo-d%lH4
%_ps]!HmC6!kUe'8_7\97j-JLJ@0^PbEr'b4\X<:'00c32^`+P/&?)cKY?u7<oIWS=/hQI9oZ^,"U_J8rT6fXh#M]ifmS=OZ#677I
%&<-Moq`PpBgbr/e8UU6fLCGWg3)!JA^Q(OjQ`pt.h)E2W[KA+M;BuaKF1[0W)3i]#J@3jj\g:P4<B6X&ZitVd=%TF)gGL/_&Xci]
%?&E,PIUKSLNjdobilc=,mqUUNWomR)OGZE;P9e0%,5EI2R-.H[Ve[JQPA->.9n&l(l7'm>mXFZMee&fL'Ghuh4O[G/Na4Lq"WbH$
%Y?NRuA0q3D`2Dqe^-IM*m4u`OZ=N@3PF2+Icaq]l,Qu<@$,jZ($$hEcS[mQkE=>X;dbZO=aJ%OB7Ls@`EPC>kf&Im&WOmQ&gT'!V
%$U\F62_);`KAKQ-Z>jB3Vh_,n26ffjU-34lHX?,W9ok03e^)+-o1ILaKUlCf-Pjm:^OWONf7iJ``l(*Vif9]I/881p4N,^P'c'_B
%/WL1n_Q(/Rp('a%oc`\(%XAr!J"7b?r_7[Q\h5@6ZlWVS5AX=9TU0f5a&nUk7E<h-O''BPkNVV,bp'rGWif!m'!/eeMlM0eUMEh1
%;HH]5mL(E]oVqUK><aP9EdjuqHtksV&1r;j+r+sD(#iYaUW]W5BGC8PQ%F*Xdkg^Ff2Q^9`Cd%Z7h>K5]/i"Ij\Gtcb$%qA.guk9
%GUtm2Y@5o,N5ehObJ@tla%+ZK=;,$8p$s<rd(#?R=MD&G9o*D_GWL8u/*i$]P$(\d_^LoA*><A*2DRr`-JSY-8_%]>7Wi<lS_DSH
%k&gj35S__s-:sSA;`X7GMRAB$MA9jjMSPM"32cKDTr#:Xp"3M0Y3Q=XF'H@p"n26.JW_86^;EO5&>hsgh#uN;$rj6`B(M3LO8Joc
%<&;SP"B+2#^9.__[/?43U>9!cHKZmdmkhfS8eurM8RL\hY#R<h'aX<B2,u=n'PkBO`FIk1S]]Re?s5u+Y-2o?$*7m"HpT@d5+YI2
%Z.(V]8%j%HWNKC'r%WW&"@QQ0U[VM0N%o<)h83h#I,(JC=4b78Gtm<Kq+ffd#t\cmX)s$bl*)3kP7$AMFW@)!6UeD>HuI(1qj:;e
%dHOYWNrp=rE?u-u=]WK(3O1cA0Sl^u3-e``mV([]FOMdKcTl\-'+3d'H!?;t0e]#.EtTDWlcnRP"_JNT)LoejKEe<R7V#0/[4Bk*
%g/>8R4Dt+'<-OuIO6eM9_,M,t@]J1/B8%A4g_mi**%il,)4r8SG7GUqQI]_PnB?d.)"/jiL`dD^/,GI#j4o#Z=3N$"cia_+,fm"S
%R/-]l=96?YDprYL[#i7qIc*LPrTf`OQ:AP7[2_2m7;\]Gl0dnXR48Qh;HNqEb>`WVaf79^^5Gr2B*RVZh[=/OZ2J3U)*o_DDQ-h6
%,k1an]:]8b;d"ZKs*7?/676d#2-I">I-SQu/>5C2q8&CMl5dFBHD=PN4o'\?S,.2@K;2>=Y\"4]B'6')UNA@ZjT7h'_gZOgGk8gB
%EQMOrL7AdXJAmLK#!>CWbHpc]qMg&en3[#QEG>+C`<li;9mhGqP+E3mpK&k@U$W*AI''YO'r<X>gO`u2he]@uU]0*LrK%!?TE"$Q
%pno56nk];WJ,Hd*rdVZ[-Z&fhKsRu_rJ*'+pj`7c5QB44q!VShrI=dLs5h:^s7OG4q*4o@^N&Uiq!oLeniu_q@@=D.<)mDKNt!t8
%=h7TJL6X2hLqFu8W5+IZVLVoKX8JGM\G`"G783eB<=<W*S:Ho9R3pC7')8I7!!^&-YQ4P@NS2p7&cs[X=DO4RO3oYPnYEIrRTBdh
%U]<"t(?,R7^?\TW6_-?q4IKW%e>--*/'EsmB6S2.^K4MF2<p9&no_cH$B9-i=02#WHWKp)h^^CY?FPp^M,"NQ#*TujY*PXb)VJfY
%omH?7]#Ph0jfA1=%F6ZQ@<k;uFD2dO"bk"fp61@s]/%oP@!WG;AhL$GIZ\/JpB+3J:hN[+5ZB*%HL,.hl@APd%#rC2R*9VR<XA"f
%eanrC4_p=]7K#8fo43->O-O!(FtWAM=`P30n94YJrii?iQeWlG^QD#je3T9PN$mBmM.U<T*%ptHI,cC\OZ"lHK@%;^;6l)"m-E-Z
%^]2T1P2Pj,fdI=FP5fUdmb>))a#2!7Eq'@qWJGsYa![&T,I"'=^5iBlGhZH"g8BDoZ@A,!d>lDYc%&ksJr_k_e'h]hlc&](KBu64
%Ou6QK(/./Nl=)\IQN@s<lqSK]fM.JZmI%]ib.f[Um!Q?[:*%gD$!?eDkF9^;6*?p+Yh-B)l8kteB=M2>P)s6gH[Yg5n0!kRpq5X)
%HNlP*,f_Bp,HCq)$Ga>+&*,WBBA!#G@F#*GjYV%q1lMg+Tq'lA5iEXj\_hh.A68QBKiTC`]I4'k/K[HEgSrl>N[YQ`7G@NZ*9.hE
%24.?*Z`SjZPq4MTr0:\o*sk[!"X!9Fh`5X:2>LI.m?\nHh8GVmj_=:drj"ZdptrUe<%)FnB8_'9FT6:s29q.\?n<JHWHVKHU8pU_
%c`W+WjIBt-h;)?_OaX6En#(`?kN^l@s05>607lEf5b`S<`b2:$JV;*RfbGk".DC-jG7Tu'Vqpps`\.QP>G`D$VRgmIEX#(VD7:p1
%etU`,3>Vme[f=!nja,7#[Uj*:pkDQ)I&"3,7/!te@R6Js`s;XK&fR%o0CJXC'a2X,^WUhDn*;(0C6:>+V`lLt@64!4*="Tmmg]r@
%P^Z%Hhl^Ifno(quiNNt/@+seN:J2C?&@YZQND9?uSgkrKFT5g*^5$E\aSe"GZD$FEqKP"s`<D)*b%&a3X*P%4beOt6A/[,mNj\MW
%O5%S95kVLcFEu6g0)3VfqtG?teii%@A`&b[;>,qHFu8e$/*ihm6+DfN(0-O.:SON8gh<,)M\-4WC8aOmIdr.;>T-rJT(rY_5Z+fF
%o6K`S%lW%GqY;2l1tnP#Tn#\s8EG=ZZ(G2k^K)O_Y>jFSMfTIpTC^ZO6^&]Eo<Id$_6Cjb'Vil,h@lnL1.Brm\H][G.*L4>5FC'l
%X=D5UM9r=!m4]XJ9]-!l[]0gT**Y=C.jB$Lp,O8hdQgd8Y20:dK5$1AK)@.+.aqXQMO0MLVnstTK%m*4T4@Od0XX;\_O?s4:qVN9
%6:EqGY1f1QB`.PM*rPF@a?:/imjsASK5YS*5&kC-.ZsmHgRhe22q]MVFZ^KG-2ms`hT1k5K6/4dX!]RC0WZi3K1H*+Ks';b!M<:O
%O`,FOdo)M<7`f,mqV?BpL.!naigTtM8$Z[8+iPib=I8,b=dpK1UIkQPH;,ljTQ5^0VRT?m&=mZ!eR?$AE#OnQ]QehGXIW.K1TKk2
%MT1IN3XD=B'*O5VoDWVucp^U/`QH_YqqE.Tg],P>ma'7V0LoB\hbZ=>n14JljuDi6J!8YA4rfrb;GkkJJj$nb6Gd#B'C'6=WG,e)
%b-lFA!.a^@?)]l_:qbcA5+u/rK_ea25(kUf&YmWFPY=nY_Me8$Q&]t`nuG=`8O%\b:h:^@#dYMnd&I<"a\s@DD@@a:KS=1ZKO%,O
%Qd/^<&Kk-Q]3sR*9YK$fDD_U)A/B4EB@Go3/WFoPR43j`jc$X-J4*,):>A-l)(#a`97`4nWu3qRf3YA5+G$N&lPQS=Qs#&4\u6Jg
%$sWL._Abp0jG(%eaJ<jT/lJR3MQ0(#eD3f?>./tdGt594OR-@I"dgk#FEbh,Cp-p+[dNEZYf\W^7R?-kcg;':]*\[QeWO%jCE8ff
%'%/>$Whm1`iaYqhWqK6]'<?3:b6:T.BW8CSAZ.]%r*AD?a*YdZR!%2#pUHVi4#J??<=M?<.JF)h$:eRfAWcOqpJBVSf/'W>^ZPKu
%VB1Tc?`g\$'Y)li$nHo8hn>;SMu8"WDmh7j`fhl&][4tO,.$PLlBAWfi^&*s<]@rl?ZX#XSLmn?dS@JjnVY1YhphX_0rT9DQl`61
%FD5b1:T>UNENV*k2ck8DgGe!*K]Is!Q2EM]"[\Z\emAn4nl5')8f\2"iWB)#qUpPMo4lk^]%6;r<.:,Ks%iC@(anXu\[i`:T>rFH
%H(\b08/_nlQpu:pm/H_71q6gkqn:>#7H,@hQ$#WR(;:<.j:l"lMSfG8mGbAi]AF]LKOZ/!SOB`*iq!(*R+?YM!C+*Is"t/"a",ZM
%ICJOT#V'3488][SX)`jhBGS)QeHAhBkHDotBQj`cXodtdOK^#sk6[uK/$$;,%jPN6,f_C)K_2Sh"%l41\O$sFhu3`r?C4\]WE3"0
%VYTIaE`=]>A2M(Dc?("$^$N$,?AUf3\Vui!rUS()VUeM7r+`?&_(t>Jf&h>;GK7LKZ3&u:iI'&b*qiV8ebA*4SG?7)\_`q`?'4!G
%\tn2X!rjj]Ng+:"Fm*]W8%RJP_1"6Jds].-fD<:('K4n/A$BQ/I$'BM.@CgQ$3VPL(0#Z;%D;"jKrAfsJJmB39t$p+]Y>&uH*mh-
%,SBGWIWc\5qpWB4+(73-=el]hL8VXCG+^'M5qU:Z+V+KhAEAqEK/D?WC[!>GC129/qKlQ0a$\4eUpr/^<F8guUA"'e;VC)I8=_oP
%+K)($50am8ou<ju2R\=r/0L7d+l3HQG@$u$QJHaBHs*87UH'ilWYPQ.UgpI-.Zl=JCo(487`$%XX&q(C2sF*,0i^BGI&;QVom:M9
%g>C"U1Hn#D`uhKhrGL8,XF&aeed*]#*;4m_J1E(.'qmVOh%&>MdMH)jaeMe7N+j^!hPF)l7q&2-m8.afWmbhe2r-lDX)>Hc(mSJp
%(R2A:9[A,j@)F)3O1\N,IUDAV7TmE_rUOo<K]F9CmS4B`4^ljRPrfK*8>d=_Q]ji+b=s/;@^U<7j8uCupZ^)-+T>Q-7[YD[9E#_#
%!2c`qD)mkc=W+lS&jLI+pSj2TCoP1$M#`pD08P#/`c;@)]qeLUVg#[;mON+_*n,%5=^^@thP`2VD\$)5(l8C:hc>MooB!=#c.%7B
%Ea4a!o_Lk+<&j>Af=la=$BnMOR8hjYnL`[gmOuZLJFloCQu\HaCp#^&,5jb;(9pmp4V/'Ehr<l+_,mfJjAG7'?DHSd>!`YkC7sdA
%OGg9X<Hh@c_OAf`R+%5/*,mmu5G)f\*FDpTQ+iQ_DIPSIa8QNF>W'4niM!MUeKdjp!)4X:C8^cc,CVM,On-ECJ.J]T$V"[h$Oa=m
%K-C=m3D>U.BA%PP#G0(uqU<JZ-#0:(9C4RrI]++SIGsWi-$U5,]>s;$:)Dpf^@:T_^6UkJC@5>tOR+I7dLV'YVg1Jfql+i@3&LR\
%])3kNG'C(th')*=\nuid>-ns:25s)TBaXDCrTsS'5CN)DILjW(k_k^!Ma-!bHB`23M<P?(j0KKg!1q7.k6NR#0>C!Gfges"PRsn2
%iZ4hD5&eoCW8FFq<"Cp%]9\p\ab"o8dZ4LB9>0[hOE`l8PIkL6+Ni,oQ96s=g3;uhZ*N'.Q0Yf5(]=,I`UW:Yp7]Im-PI3BSK7%6
%GfT?cg>`ShWZ"&CK]mru&f3E@oPsMV,T!BL>`V:]4XJfRI/j%;W#QhLff],^H"M<"\IuNI[TtaAWW"FZiWPXgnetM5h!ibtmbEXG
%pZDXT5!?qJ-T&CS$P@1!P:PqVkX?L^`G/=?P*>Q`Mbt4-XRk583iOu:%S5%CT>?+'F\nY.T"KD>`Kp%C-lS,T1?uqk.k$?,KA4(@
%B(Pe3#)';9+*1G-+OLMQp\=^="4c5OGCH@Z)GafPYsZm$nErit;,()g=?T#U@GgT(X2GrB1mG6#(\rMe,As3\W5$`,VrR%l0.!,^
%/Tks..Mad"A`'lE[A)KPO*s#dG^#uj^\Yk0%Ee1n2hit^iqe-ad;MOb7bUdIC<`\R)QLf^<2BH6FQ&OX^DqJCFQ/39j(+DqUm&XO
%lk0^C:LYfKk#Lkm&s9lf+uNlq%]P=V/K.?J!U(>rdU)8R8H2&1,3^O4RKU,!F@*'/]*7"RA;TjAejoOPRVin(Puh+L_.<JV'QDa4
%LhEM\k4Ll/2jMajP="qC?cB=O_0M7KqJ;m!oTNMWYVp]X<4kgTMug+b^,YX-(JXBskZlH<OM8Fb$]D;Qis*H.#LX:)m%RSk7QSA(
%;-2Jt?W?rdDVPL>Z^3>;9lL8/6>W#N_\:roMr9df,h[3f01McM3/f9UAC[5eGPSdPlfXf]M5-cE3j62H7r"j6Z=<4&g;46E2qCmR
%.#P$f9HWe\%m)HlbH8J`B5i_QRK,-F^sj`"K"C&R4or``78%d7.#K+FNn3@lOhWn>m^YG!dP=g=`9s-R=VP,GZTbL]5E$9Cjp?]A
%flHN$6>qZ!;6BCP*5Gb;:FdCUfn:Wd?8jB[X\a7rU;;JpX5j@-4F&LL!5#f^)il9Um8]WrrKLN9Z4\Q0.\k1GP-^dH>YS3kfAZBu
%M%?8iV/C4=B!DJr+?YoSFOe][_h?Hgd//+HAcHk@8F9A5,&fn0[Ek"AA>!`k*7AN.Qj1RFaj*%QrZjN?h"Bq13`7>@95Bqp8%@R,
%E='iaZA_@C2:X0h-uNUtUoN\3kK3Si!I3IVqrUCD9IR$(+J'[P7S`.0Y6Rg8RD<jTLrPD,K/cJ'e]lpq<p3B8Gs!X4,-t#,m_jF@
%,j+9B^eKaE=-GgG>[]!i8[-\`g8uad=HgnHq(t@O"X7%$p=i)p<W-(fE0*?aF<F"g-.t[tmqnQ;8"'>UYqs1gEguqFI/i]lP\n@u
%c?g1EIJ19WB?=l_2I7Ls(+L@"E@V`,40@D)<r)CneN5"lnS85[k=j!P=-9S+5Fg"If:VQHf0Kq=nTc;Q3%.Rg1V8ISn'Nd$[Kq0I
%.A,\DS2Y[bf5EEq9<$3S?%R6`/$!C+=2imWj9h]=-gpAtqYKf%ila?`HMJNTD<K)4i$U_"$LHZ!3>nJ["\G?(6ZLf0[AKSg4K:sP
%fB8?%NFdEMLX6Xe!r\]:#L@MYPQd1L*+Hb!V_+e$>*<8RFUZ;6O*RTX4XK'JZmi^N9fZ(RdXdTS:3cZ9&<R@&p2A&t)0`W)!a/-C
%&qr@r3CsFWT,T5]c1mqRY94TCH@cp/o1GMqKhl6-ajLL$!=`__6s%fh?0`#o6U>754Q;SB)5]b9JUVRdfR4WDR*+7C)$n%\LM5Fb
%]s'aJJbL+c4O/+a80u.%HM@\'^AVokdOEVjAJcHEFm7T;.L7X&Z6cVQ4Cjob%QeWe.\Gh4"'_I"HIgnVV:>1%".)Xn[*1,_ME2XY
%c=2X'C^rq$hrkMr\QJ<C*>S+D-O>a_!i2+dV#tIVc.9s:NNu_j$3<Y%;ao_uh;K_BrfTh41)NgQQBruXp6@G270O19Vp=?uN\r<e
%\?h3u!2XsS@o2VB]1;TNgc"B&Pb=9X!q;D^_B*^\T:h'>GqcfZCA%M!rm%)?dPU7'Dn8l>Q39jl8uok:=;^>.M*s\r$4Cam6'V[V
%l0&[?f/YB)hl-I"*/L6iB#M)#)rCM(-V@U`f22V;L-S"!NM<VSXo#AY5D"cPFh6WC?@-;ud8^]J#a[rrbDSX_iI\&Ugfl#]EI^TN
%^>[5c+OU!$+1K%%Q$eoN]nF=<.ql/ZSgU,Yec0Q43KJC6oZFsAIP*.=3XO=iX[j*`\..e./md&3,LF[;s0rduY\KIA(q!V=@ZPh:
%1SpMLN8ji![;1Dm[RW'iniS0(b@MsRF5b#&,LT1:8>-+`[O&T2'VR3c=i@e7W<en]neeH8)`Xds4tI6fX=#?(<Mu'tnWagShb<h6
%T4It/Y4ad#!TSmi?crIT"`g)7#;WkrKQ\M0d!k1E85,e19GX_iNO/e4W(#5J[H7'>,Qps3D_XhlK\M3jnd$iLd6uQ;JbA^8?3fJ.
%WCHbk6$!VI1Z-8mD]gPoQX"X!b_I?uE`l8<HJJXDl%i-1V]AGW1hH-ZQ"H\QOZWD&Y-Od;jR/=@)bB9RkgZVNd>Ha"(bhQTn[n,L
%au%8I*rfId39+_P(4cPof@hHpkNZi]hq<5Ri-7)!fKlH!@j%-+I4I2/)Ta8%hB:_A\g7WF[^Si<r8#h5.ZHDe"6BA@'5l-%]d)&5
%oera\.`^[RiJ+X1d%b4-">FMrP`fpeg2"%l@lj1X`IW$cYLSn%_88FE-G[O-?_u<kNgm8=i[ZN+<^=Q(3+>YII`fj5Ddnh$j"'RD
%`*#u#QlbM[ln;(%V2eCZEF'<hiE=Hp#i[;!o?+'lI#Y&M>aZ?LjZ5P=%?L1V(.aG!L8[e3VoM3Lp"cZa`Yfc@@VU?Z5[o]mMqD=1
%ObL.87nQ=$RP$(#4LtS"_pX"(XCfR#J$7&>e3l(l;rGg,17N9JU+T1M#2(\P7so9'&]eg-s0clK6#A'OFdmZ@dG-P%Mt"pc7guNG
%SpPa21uIq-`c%F5Jmg5C[W5m#iiK$\fD<`$;!>+^A#0De>2=!fkocsPQ/W>P?VJG#)I*1p43.J!.q-*uB;Hc:(mW%m_$&l%hUhgP
%Sr^&ZTB!U(3!>Ja^Ss+qh-p9Te=h2$,OFo;eZN_t"=D.ibU903_riDt7XKB4RlDH#V09/>O#8^>*OhX,kmb\N!eErLK3u4\UNso;
%^4__5h#:OGJ79c+9^5gBQRJE09RaC0EaU=[P2*(t=:sc-G.UDG.#fJu_7r1"Ee1%+?`^!iF5o1$am3Y2XmGN%0!0"/omW7ZOHcKF
%.!B@r8Z2+9IGEO.S*phD/=C+\d0u9"]Rgi907NlhKdAX=*)Q>%AGlN<c:eof-h89h-9$Z;VkhP-j!T3GA-Gt!Wu&$Qeerm(gn209
%pYhqf^UQB`#HG:/DRFS\K)1gOeGsNl2&P&rc!BSP&Z$jVER`tB;+TU(S^?g>pO0(n:]](@aKub[6P9OLC^F0NRWUkRee(A)YZm[J
%5du7Zj'Z(Z``fHiqibg32DjoHH]r:"h+f2Ra]5q)h!AgprI<j<r;8M>`Ta_7f=YA*mTplH:UC]H?$f0^!i>dRWHG8=lNYZ%#VTVQ
%[#b?Ug)%#r4e9Y:c3:eq?2:]gSch+JG!ok<$)_6$S7*+oG=)n/fdPsuR?'bO(JXk%)W:*SqDd_c9Nlh&\4IuP\.<_orD1-M*P9@.
%^KLljN7%_&CfSr^kKgmsL%EpYMr!7FIspA74rd!dDln_Y\=qIOi@^L1#]l-<=P>Zi=Z:u>f:D=cV7@f+3M5'NV5Tf0FY'lM9#o/2
%ZtmHi[C_]he6*=Kp-_Cb*e:9&S1u!2rG,B6<P1ulRRr5Fa^a0/V9A%s;6(:8[b%kf&5j]78cDA`C#KHV@j$>3^%>Q<8Ef*5GiSJu
%=)$4U7$,LA\%d?RhpQpBU?2cV#(4`]dQ>IlRJ8>I$eiWlLfhjZ$1j_X)Og)]krZo#:,6cE*VpenXjh13g;CY8:$EQl<i^[rE:F>7
%7]JP@H"_^gNVdkY-/\7rD<5D3g<'9;F6.tL%_Q\BQ1?6/!Wk`g8O)s<*j2.\m9-&$^MdgDWT"[Zo1rs=%SHC8:5$@1QBM)rSS[Jj
%rq%17gCA^#M8)+cm(*0q,XNQ#^%:%mD=]FQUur1K7dbp>VT!XfdXF?Ml8l2;QPk&qRCU8[=WL059mRnHISoSjZDRTnQ$rNg=&O]]
%lHCR]hY`._=-cGhe^>A-"g%Xn>]S5h$uSXWTm5oUlQIfhn\MC:$s9O1CTU/`*EH@D"*uEXD0#(I\AQQaEj;K%o`i[>jpmQS\qG%H
%K^qg/$O0ZF`th4R'NDRRY"M0"=\5niCGAu^#+eNE`^nNZaYri7M.RTT7VX!We_7Sr[-`Wf=%])2>K_+SY*:TF$aDjiMjoH]iSU4Y
%q;AEE)K@)s,Tl"6(D@N4gIB@l-&XXK5e6!>UK'Cu\*8\0BT!18*sZ]08S8W\.?^EJhJQBGM#FRClo6d[=:t"no!hk".5_O!kb[f,
%SBL)%pVDo*fj7MWSVV,57Zo"R,)LdBN,QJ#'C/Qd<o\)!k:CE7cgdk^cKL:l<Bi$!X@HJ]]ua^Sp?gqM)Nq>QHZ.6dJ'+%^5=Wu0
%\$S>$e)*em+HO,XPkRIPYc1i\1%C;,$0#,^LO>N$+daf)J^N5-U0HC"gY;$SU"O%8+`)u8k(''\P!U<*c&&4-craEgk\F*X0k9!m
%7WO&phK%61W._+acNb&=Q=cMQ='Nf+8^%`)B!"k++7>f.4?bt><*#uG\eW=3ijuQDL`Qm#GB#jbr&N"M0Tq1&CYM)M;F=WNI@)(2
%:(pNZ`/LI?=L]/I@^XNP.8<X_nuJF$;aO:RET*4*O)$V6m\'_tBX0f:HUj;tT`^3ZOgN8bh;";@PVqh`Cn7Z8R$;KSBu0V;C27Zf
%.41Utic0E.ODrhN(U47?V6"Nk3o;9TMer-&^DmN;78="(D>Kl7WqE*%"X^"i]u?2Q<KF?HX_P6;g$`D_S<AH'^\WA:I)iQHV31u9
%)Rm*Z?4LOt/<*"F?M0X9<:M.tQa3$S_?(Fjrj8m,pi%$Ld$j0^SU%^K&j<^A?mrc$P6;TeVJ.,M)E#u5iX^7r0R<hj)JME"bds$F
%BZ6uM4$A8&`U<U\:#sfe6s'\!'_dl6jqqZBeGbP,8:h8P\uUPY(l=LM]Y:<:%&\rJl6XCB-c16XaD9spcm,XFS#Uf2>6V.Kdp2=L
%rlm3525&:#!%C?S[5l;1QTsi_XO8tNg8WYg5f7I,IU18SUH[n!1eDai8bVPlj_,k.6r"AK9T</Im:SmbY.C[1B%24&3oB`0c*;uE
%9XWb+7U6Tdm+o:f[!WbFMe$M8^t?bZ9f=]>SMtG;iNVr#QR;:--aNVaX'C/A**D\D(g0?1%a)$WVCp,YH4a$lEB7/M]rWBPX3"@7
%mTmrJW^^/':06#A3MQ9X9;5_M'G42f+*iF&"]*sZP#53-2f"r7a6bd-VLh<0"B<-JJ@K%:/2^!lA^8"ZJo+a*U0atE]uLUL\H&A=
%kO*Lb3T(7=`08Eq'A`+-(C)SD&fclHFh=Zn`[`4]dTr#mmVg`hIei:DrXh;<[PocJ,`7VY@&3JP/pt'X)f`)_g$oaq3s1bVB*Cde
%";&doEgWmT?f"niQP_t(Yi5PV@@&RDgjW^G)dV%d".D[WCTePP'lcjJ\V`sg&A6dC7&"S$"R/iP-IjQWm-/WdlB%4^0.j<apO8)I
%rpH,hF+k-alPqQ.l=0Fp[d<gR4^9=PgZkM-0/FVK&gXkC`tb^`k9L(PBQo(ng0+eQZ;G=h4.6kUg*(mPLO+]f!.$!mBHj;H8?`G"
%I3]h/Vmd]X=@or+e@dj'B$HmT'<:&*5/!JnVL5DAY;p6k_54beP.6_.dGGA"+)`=srJ[D8"!NRe/F)%sdBFlsG,-G@Vr1d:9h767
%Xk[$L.SVHK4LO\)TEt_cP<@ai[-2!:&/Y.5.S>DSOKQ=/1PC%#k^fN9,T=A<@e5q%"K)U!Ar:U=g^*iS@E&c+6<(IN$#0b-e_Bt&
%GI?)D8@2jeXc=\*BaLZ%4eJ_\Ha\^I4r-6AgliqSm`+5Cr2lSFDICM_/*9_);i3<*GWM\P[$*rBGg^=G12aC,eiE0^=f]5;'!to/
%#YhU%ZFCP+ZbQAu]QZ$!)L-U>hjPZoC6&EX==^I4dQI&u/UiM#.lhfa7M75I`VI&4*%g2\^9,7q't5iLcLn<*f3&]uMaFJ=GZ333
%mc6OMfNlU_8K_>&l=8J2Ls1i.T2TA:'MUgJQ9IPlgK)bIEi[5^fHIraVDhC"c5o<dB^/M[ToZ6],aW5ie5`L6br^g[)(?3FZ:;'a
%GQl+gWgq'(>G0qL22KPKDoc']hrtWfcJ*5s,trf2&fEM)I[uYr7o?K<=7i"o7K(iI3aTVI9S]J)`i^5%LR<>o.N.1G.SD_b;"Mo4
%PNR@Pj>V87Bho(SVi(\pJ9uH#Ddmk>4IMP<IT^KgmG`r6`FJsNq2K\>3OrP<l'ZX"lLW#/H4=WL2#A4!3se+(")gLoMMOCb4u8mE
%GB\m.X^5/]-ic"gJsfp#%N0$iCC2GN((!gA]!j?J&R*r&9_44Y5+=mOKS\'A[F7\p7QT5R[^5XL7IQngmCK]XV+#C'jJE$UWauHq
%991/`O94_aFZ7Vm6p;1m<?nt16eC^)#S?pBrMEs2SP.r&'<(Sl+)U!1G_.V4.&3ctA6-Y/L4S5&F>oOf$dDM[7THY4gY]n"/?F2X
%OO!/_+1s<\95f?TWKCZ#;8@f?rRGRJ?T!IW;8#C/XE.O<XfFTmM[DH8@INf*i`9;-W]p%)JAirf+-*cm=GFcr?t2=dh2lQ_P!o+E
%dnn5.AZ>6h-`r6A3uf$1a]b"&cAG\nI[1m)6O^87>))@D+ce5J4'&#r)C^kjgT$GF$?Ah3/"1uK2$=/2nO3m'R2]Q91jE/%Kj%79
%#e0E)aNa+RR[T!o#,R)i[\:$Gc`*V\pl\I+fEEfogRiAf"#6hgo9s[F:JV?$.^/0,GH$'/r&C1l^+fu.$#.U7I9`r%X+NVt1ESUe
%q!D^/dd`Gm_PdbI$^2:IDF2Y+I7OV;&o<m'RjZ??K&,63K&Kb9hR7%`#cu3<UG*eY\NOJ92H?27r,n^S$DQZ'iW>9/lmCt*<D@fu
%\D]%^DIUI%K35;u+3cJGH9ltmgLr_+K;E0=e`,R.mn_3/"\?tdR_lkYS,$LfBC/@;<8.L4Krug$Vu`B2.criB@Oku(^\Z__7t,En
%-3ZGN:FPJ(*-2,PMn(T0^)Y0pDom%f@:00&*r!euS"p0=Z%1S\N2*&JF0duOa7JT^9u3L]LN"fCCch<2K$F'aCPnCPC6=HsEO)$?
%C*OfS<Nt3KM&%*M^tE&>k>&7-15reX_&<*MWm_83K$K,QPH-DEQ!c,+mR[\B[?&N&WF7%8'g=.GcR1<cYbi$JP+h<K\s\\Y)#GMS
%/SRO-=js$4E\-B[LHLJuQ7*jf6hMEV)3M):&?0Z?.1OFC8PhZ4oV/U6\ghIbSO!-WEB,UZ=+>G'g%e'_$,s;fW.0b.a'CMf)qma9
%.S1XSF,dd]iB'_qI-/-.1`kW@,1,Y0]iN,4/imbQDA_)ur]9:mr;TSNQVbrm]1mNWq#,\EXJfi;R`HK.R8hlSX3&1'?V.-H-Jjq[
%l*+&cQS.<;]B=+p$U=Kt'/n?6faUuuYZN8-Mq!R494X@/.`g$O;Q[hN9s+&g`mj)HET?Br,"'hZp9uJB?>>![OH%jXdKSrTVRPh`
%Vj&ASC)AG%^]JJl_f`@UcFqbBr"?km6e:uj'%7AkD:5qW_VtPg<Zt20/q0+#_/\GQFBHE>PDO&i.Pqi@;8"uuV$T67=g[TYe1dSG
%)>d:/Lf.4\?q)Mf1Z<?PYVo@Bo^l*U1FVac?P4+#MjDT^U=EoH\*IakA6gCfN!Uh1O%WB^i-gdV8ubdM1(74r3K7"C$)c;DF<k)!
%>VW"4q%2\G&g4j>V<(:NPbqds&uAV"(DeR.l7+MfX]i5=4`X:!H5'.lFgbVV#q@Ed)9RI#Hk\`Ck$O`g7<5"--Z+^qq8:40QHc2G
%E'=oF)j[EOgM_5"kWQdre8DJBDQ@ksX3-Q_mOjoJaR5L]&Cn'.WhN6*fYDXaHk/gTn_&[I?mTHG[%,t\iHr8,jNIY0&cj6*JIr'P
%A'Y6XFHmJr<&8)P(OC:n*Xd<\$*!>&>?'jgh,)t,SXs9l_==eQ9RX7/M?H"J<bQb.\_S%Eo!;F*7*6Kq%nr^`K%+B]%=S'[iLhSF
%eVZjpK31[0EnPolaBL[F80)eZ?:'tN,,e:e:o2bHD."jC]2-rnYq3!=VGTe)5!8M&h#-Au9\("lCSKTP+r3gDrZX-g=odEM1>u/^
%CT!\p.Z':E,>E'#0)D$J\T1KB:e_=WoM-?'#U]e/%'63bjK[P;9nTB=Dj"3El.$2jS1"OOWVZM=]$*'rCdn)UX.F8t$5F%qVb/'X
%bY/N/pu-B7N(_\eh$d9&+^'cE7IPP&bc%6]SR3GpBZeRsITBX2Q+$3@&10'`27BKEaA>RI&hUNWEFQ$AC/Ki>RS6@+`[(dh$j%#O
%?T2')F5g%O[Br^^P^o`Ijb,oTN!`QBM?Yu$26rhg^PcVnZ>5`gX\.HIIs1^k+[/(Z2?V*fs(;$&PQO6gIAkeNS"I3!IopXL&T&M'
%iHD'J+l^lP!gcRiI>:eFNN"PjY(\2iC22q5Qci@4*iYoLj*ClYI_j0l?il$8l695KpLe'IitJHe"B(Uc$Luf?AU;GT@ZlnY^6UfG
%jg-Ss1pUIf^D=ADF5#,ZL."+IS)$4_aS:tYjA-IP#lu^hTq746hQ)>uRTT@/coUNS@i`,C$HVN8eXXN%EDdqjZqtCYjL1&798>op
%+0eil?SpE%*<nRG/m4DASk;e]IEu//"_=/U!X't^]1YKp\Wf(g<u#_ERk3;e%h_'De]bDdg0^4XAZI,m0F"8:623".OVNS[f3*%V
%bc!X+)t_QY$&1<jW?Z'=f)hUudZb#)aVuAIjFua$54LQb+l1W,O`9><%Y5]=(D.sj-/tgTj7fJLE3\["bhF:<JD;<[3gQf"7_&_b
%\M86'T(I+qh;m'7dc$EiLIC9cjc]ORoQ81RG_"h(m&55+acQ:o5#UgQ7.X]`:U_$rA6\^m*pD'[ZN=pKd],fVc"55heKu#-@(KYb
%JjT3d%Hbe;qclq*G"dgbd18=us+4U,or5X6HNfd616j3h6[`#j\T8KEglZs/AXcf/N4gFsI:3Z`%apVd>jaEs=.+N-'[pa0i%F8H
%M>,8"H^=;da>f2$^\Q>1(R5A:<FZ#9<o0MaO/#jq0D6EqH\#3hKW1O?iiktS2RVM5AsPs0VraL/@`$Red>),`T"?50RU=*2b6k5b
%4a\U7D2kM@*9_SM@1\^:@OVI4;Zf0#TdjJS?>8*9%;3e]9WlAYO:A'1`frsYG^O9#'(A;o3#<;dDJPH1&gmK)do/u<E[Uc-I*$Ns
%Y5-%"O)MR>`\,siqbbo5-Sa%RPA9p*&n@o]Je5Or-K10DJkS0^)9n='UZ-l*."_DQPrI=,QDeLt+dka+r,L%g=U#u61U6c-B%(/<
%PY"WN^=T^fqmnR*YtM#!Mq%.hrXYtP?XUhJkj*DLQk;s?hU(i'73WWg`AidpMM]sVRq[JK<RhnZDFoJ2$87G]JFi'?(n7s&19%KX
%[g[?MDI07)j.]bS!"$qp[kJNh]7LfHgp+SYP<P?L0%TJTY`G'mFDm7="3Kpb1pN;*9<cBG=cfTRSRZO4\>S/N=P<`,Ia5TEo[KHk
%cV9[?L$bUp+8,oe3u#k!-SMiKPBsIa4,HCTe$`?Km`*`^BMkIpU?4[Y'enTXZEEA8:DR5<:4o"]C&b:_:?5#/E3.?d.YrS]C;FK0
%5!ribX%oP'ii1!6rS_gQ!)os+U3tlo@/lIWT0)a)Zjr>02c+pT.YYAkpfsbJ.TYHLM%`q3S_rb9)='ce;BCUkA-Fd7cS`*=_R/d_
%#\KaQWXs8U9l>9.LWDc)9l<mnhqHnAn[e2SC5DP5JDkK"&Z8%3W\mP=3(5$*[?H:E*HYM`l`MN<GHPYq55O[LX,=c:TK6Rj)L_q/
%R>g$ETE_4'q+2uq++0CCD`u;<f8!X[oF1/rpK6oUecM=5&)q/g+@5"H"7L^"p%<G$P'+//Sf]t*1c8T"YWg7>I,(S.d`Z^oI0l(f
%Yn\E(9HL]Gc<Rmn^J[oGkLK:<(Hq<mn?F:dU;2;M9qK%a1Ghm"p5D2kT2=)KeVCXWpBKB/!=r#>me;1MFmS(#3`;VQO`s,Z<sPi\
%dq&&H/9:/U-T,;M/I+9kI@`(35(mU!7>R(nir87JpN2S`&;W+D(7B546/)&]IB5I%oeidEqNs9Cl@ZA`g7Mc!loNa8hA@iC:A<qL
%?[+nFOn7YH<TV;EgcQm\c>%'9*@FaqNmfC4n=3EGrr(XXDXY*b^nB#M.gmW^r`!G\PN:7J#nG.28?552LDH43Q(F="B3pLs2DD,h
%D9a`0A@a>,JmpF:C:16#23jNm4&XS"O4K7?cmK8"8aj3kI.0U>[S4lfMJ,$D0*&t\4FOA9ok71U>96KUG%oC$)1Es-60m<8FTXjs
%1q;%Q;4]3q..PBnL;FFb,q13Tg&T5lV?^A(H@`ljO[HQ&8f24*d1/NsXqFR*N*7d<m@IBd'TR:CQ<U'nb<mF2>OIfb6kpC)=TUT\
%q4p)LX_O&um+V03^s0o#T/qo(WJ9V>d6L':Ws)_0\<9:F*J%R1\uJNmKNpP_,"qVQf_bdK@/Db0@.>YEFjp]F_Rf+Oc;B4@Ircok
%%3<p:A4?MnNEMRLrGaP%etE^OX:O%OC>l'R#39WEE'P_aHb_Tel$lgp:#3/ZY7?k4`7uE93eNo8d@*-eU_XTh.j<Rp#'4/&k2oQ>
%;dKME[o>)OPaFTtJ1n)=;N]gn&j:Vj@M('"<?\Sc/!t^OVLNJp]a.G;-!;BZF8%qlf1-kn/,FKp`F7>YdSNMUf'8J]`:V*.+uO,4
%[0fr=/jir1jA)AEa%^j0d*_OX-kMS[['\VEBoM*GOB"R9:dq<IWqn"JpD_N_2Oan:[k<B>Ysga^Jm'rX;uCqU'eDC$%Bkd4M&p?7
%D$KM_E1EtZ"6C-F6gD0)k#NXoL7"s@Or:`lj&+.5j&=J?LOh:]+]U<>&MJm+ck[4TI%@j4#hXi)K^"Vb#H#ePWgg>t!b<U75'"gi
%8F>I46I07\=LBuO6sE=['9=YImgm15Aa7]EhZ@Tb8^Z$TZO_PHD.Ys_RV<+p`6FX%C=T*-!28-E9oi^*lK&$ZWIh7<T$9=Y,=Asu
%o7W"^1mNl"Ji/mT.q6<Ye>4Kr5d*$]k\5^G5q$;5>upAQ-AeO<J'^o<:p7=/Q0t/4FReW)6,Bmh8K8XB")LYtc(+iXpNss+-SbN5
%b$]4s,UtREYH-aP?:u?;GSlMDp<HYsl&jjd]<mAD=g=EVRgQqboo]GG<tcfPcao*5(J4+[LI4s@9ucJDimEN"/5G5I1-Hcg@NG?9
%ql6(gjGRd\[e^XJ/KWdJ0cfh(?_,NqHff5(;p$k.DHX)bA9'7'Y@WadA#1s-o,P-)W;0[)iuqj6RPi9Y5jATl4N6%K]YehncI0#p
%==!is8U.IopF(lm=;R7\?n,,5;l!U9CE9`klR>BhHPP5"(sFbI?!Fh8(=dQc<(BJQ6O;)5>\YUT[b"8e\Xk9(D\tp`]ft\Oj66R*
%V-F+hj*Z?>'4:J=X$&,;?Al;@pe:uWh'3_<:[9gU<dplqdk)(Sh6WY"#,0)E1P-mg2/Em2XRuUJPcm8p2_Wi@$Z7t$`'9_JgG"o)
%[bP3!ChP$bj\;WXD]a7Ue^pY<XsfcU\#8Co.>_ZGemE7&b(Ie]%[g=$-']_>\f`gT0K#B"Wh]RL>t*p>Fm?S%&s\PI-#gE[T&0<D
%]4+K;+l[YVNn%;0]&2iSkC</Z/ra[c*D='KWB+tX51sGM"03:`\m!?_YqmN)g0Ut#m9')u<Bm0MX1=%X6ZE6Aj@'Y"\+arg"]L<`
%n;/BeDN4Bir<?0Y:R0R(<6!*shO_gOVhm_l8N3gr2.F"?B:rTFCh@BY(/l:k.k$0HihtLPlq7f>[5)<c5SdJBNjU>/KrJfA?ia)e
%Mc%1#acZ`#B\lS1r]/C@F-hYPA_ret9oemd6'QI7I8rT`Vqa^E)`k'28<M"c.gQmg.;:bC_Ek8`\7%Hrs!H2kbR'P*!J:_.::LG7
%IGD(5Y"h;3C/ttZ-"jjBd4rnsP?-m+-OSsUm4^htY5T&k$Z$\sYskC>c'BC('n5[M07.8/[FhD`^=a]XrHnJ*kFIerH7NP'SWhFG
%TQX&8mRp0WN:Jf-Vd&#rXYS#3a&Hu<m6+_]Y/aP[*-]L9!^n1FEM6&tbc5<$^ZWo!PHJc$[`J*rr66A,_DI_%).?6"pDjZ(I=04D
%F'K0"@?;kFWPm<(p/7D9DV-b*m]T*+SNGM1hiY]M\->>Z$:ArR8_9MYh,C`OhE)gld:5`pVmaE!C'#P9GK<n>/R?2N.a*(57A)Z1
%q/ZYNdF19FJV:ApA>-HXh9r:\S$f'mXJX9:+*Tj-#&e6-U/B8_RSU>J8;,,Z$$b-LS>;ura^PNU]?V[Je;I+NAB0nX_3'70gt_#'
%46?r!n2hd0TeS_.FdleEF^J2Y8lTY`ZT+2ja>hm8Q2;u[d9KN^GpQ&7]JX!W'@RjAe*?9b\n[]\;q8r@h&I3"C,3."]pUDr2\SVs
%PJ.9IjcotPKQk0Y#*nP_%Wmb:Bu/lcE])#dgg5Bi$0BjhBEkRSHets&"gBX+rC.nq-i$qO)s15UOqhZk`t_7Jm>o]+&/"O%c!Hq&
%an[/EUZY(TSkgf`QUq^sP;ODN;>8*GcQ36;VEVA_U&Hs5m3qa/3`S/i9h3IKj2r?,-]I^&>!chLo('H>4X+NK*U9.;_1e?pPG!b^
%Y/Sm(!Qs+KrC+,_\WqB="LhV>'f1-Jda,JeWlMcRlH!klV9TAAYc6^=IZeQ6d)i[f$r%NM]2;p?3BHTr,QU`F+FR$#1IaA@HJ7b>
%-gk*_RG6a6-mX$pQg!QO/Fs(q<M5g)+<H1frd?X^WqX^lr:X[oERQ?i7-AS43KlTPl!o[o6]@1_#D+&%LiZB,:X.+?fu=slg,fi&
%jFu+Y,t]/>I*i;_h2<9#Y$#M5)V1!$4&+P=^uakq/c4-&\iLk]58qTZ,Plf'dW4XDJ0jMbdWKmea3LVdUYg.I1U<rQOZ_-UkjgC<
%gL"$_ep8Z,aj4C42e@?%QM?p:R@8u(G!&2hB"O<^c`lP:WKuhZB9t0MB?KCHd8(sm;/2TF@JUUIj2^Zoe?b._d*qka#n3g$WUCiV
%97H>M&'-9.bN_L'XU#QD58,K<Y6G[7W8XClk,f/A_XE#u+ah]5*4T'3q+kajE`m?^mF0BGGXss;l=T<t(#2d5I(_,17V?;_GucZL
%3G48Lm;5+q2m;V54IceKT)Br%g&M6)gqu-anV]t3/bL0uTCmRg'U_OM17F]kgA4Q3<qoET]b\]9'!XS4s'NY"*D(1>Bc:9nfn21:
%DZH`Qc'Bl,,%Sl_46o,T9<g?;rPe659&r>P"G+-pAV*9Al$)J`fMKpgPhTibBEI7O]/Dd!OA!>i-,G[\_;@<#MZc(1YG=j\;VASC
%a]!aFDT;H6^@/5F:`0RISn<B/1"`1"l53?NJr+Sb?r6@,E#ah"WMn7^P;?gnZktg.bWZ0q`AQ)2)C1rZ"Dha?*PYj4+]RC`IUge(
%-,Q[=d[R7j0_LplZ04EfEi/StBBA`[L.W:$!7\M"f)eW:*oR;H0C&Jjj)o!"!JQko(KFl+"!B7GDN8a-a:A_[[!d+k#kqLU1m9%=
%NW>@r#d_K)/r#>o?do3X//Tq2&`%n=30FV1XC@K,#>,:(Yd\Gig.>EV':BSC@P]["^G-/g4_!ZL"p4,P0ID%)?j[7+0_1B7kbr#$
%44VWXF*HmbV_kTM@R,GXU<6%6!l/NQ_U3/T0oB.I39e3ISqc=P[j0R"WF=\AAD<Wg-Ak:Y%>"U1+"#<5^>Mn[!Hg@Ke#B$&?fZ<h
%iIh4<Q[TcI/`Ka"5&3]O5#VN8kZiriA;baL4mmpqflRq!L$i8FBidRS]CZZS.ZCr<Gu5+-F4;/7n--p'KZ0h\TS+!T>m?3_.VVgS
%@2WK:VB!986t]OkgT1[-e@,T(1ifA,T(aQO0m]Yi/&Vu^>jEO^3->nSEG3:d,>9J<M4oBq'kXXQVJ,@V07XH@pRA3T+hcUi^_`Mm
%lW'=Cd;9<uV8>&;+eZ,>aOJ->cN(.;NE(95-nG`n$UN@k)+?h%`/lk!/$rg.b5)=Er&SMk"%u-*p"nfj-sobRPO4]&?UkbXSQm$'
%N1+QV,:Va$Rj?^aI_n1D0`7`P]qX$>j/hJib&5&Yq&5Sm<GX3O(Ek/>oQiU?&,O,\j$4_EEcs8GoSEhnBF(&EF7ab4ah$o%cc./d
%YM3'+'u.ZWXb=U2>jmV!1;j2<'gSY#2YI-Z#O77!(Z;'ZJZ3t3#GI`J_X)TD8gIShlG,j)9HH`MB4*`c]F6(`/X_XFgbCE:PSC5i
%H03atn`Mi<:`4<]Wi$9bQb"7U?QD3Y@_UfEPA/?8LpT?@/PSmM:Et5RidkS">Kn)A>ae!m5sWK2d3rs&e8[h`XsdEIdXoeq>bj.`
%Ws0*bgB+0oC0:rZWg5FsHZIp=Ml`cSTr/dBi*4Pk[)e?.jF(V/,%55]!-C0=)*inH2i_ZikNGE1^5Cr)V5TJ,\-X@fXUG@*OC&!!
%_Zi+lHJRq]+!>q8"!R'NoIP56fiXPlKoS8J`.M)lY`'bnCmq<HXr+i(GGH>oit)3W:\f*!`o:#=e#^Cp/B*d7Sa_jfg:-VQ8.8pi
%FlJC.AH^mX6+u_ib0&eJF*(2UE'M?'H^*tR2#sB\qikqp`+]+qi<U(GnmjFt);D;kn!&Vln!A5ePK?l\4P)#tqHZ-R9;*cjmABFe
%^:37V]b0e`Ucs<@$6#PK1CQbj!(Tt2l!Ai?KUKWO;uq>/(!';eS'AlFJ>/ur-X0*Q77s&:DnD9KcL&f,a\?+[S:d'Ep?pDean8$R
%=%8BVj=Ak>g[R&O(KH!S3rZZrZM0!":MQ;.lY&NU>pQ`o>dtq22X!&r(\m$OnRr^=G#jaf(G;0_)kfbg()<O@nD8W;lE1SJj7">p
%7kC!mh,el8R[tJ68>fcA)Z?kdHVhC@>99HorAr*9dN]oBP\9S^pK0#Q]6N<_DO>9nWLV)+?4A2Vo\pF_f8%,.1N42JU>?D``APLM
%%9DF2d;"1.'+@kp9k!Z3%sp;:F$LM"3RMJ(fRm/($VNf?bne!%!e&Ojob.=kZlQEP:\+5<W.7W>=_D<J=>rV9AK16#]M[FM`3`5H
%]mnqqUcFmYcAb*hLTJ#nhjn_D?s7V5[FcqlL;ks!jM6ZnG.Q5i?`OTe,:^P9Y"'PlMcW12#U;0%hnC$ReZ0kb84aJm?hFTqUX!,3
%cE9nX(+FKjF=0uTmCeqCQ1R(9mDJnIl(l`19HC"mX;]QY5*od[:/c#jFuWYaS2+RD(8fq=l*^,s]rt-6M*<6<4@j=^Zj2b`=FD"Y
%+Y's#.h]6sdlFA^S8h3EF%TH+iJ&]>VRK_;IBLq"G[*(OF!<VIKq=p`AZ+:&fOplM(Y3=O3q1d1M/#M3P<_J@-qUf-W=o[.8"B>4
%JL!&c<0A(9QnmGK2:1OFqeZCWdj_dF-b2p,^qd5J;i3h.&fPG?m;\h7+#X9\qnI7r>rc)Fc.)LLH^TY1)>Z\U93*S;8G!qO&$-R(
%c-!"O\MgG;[^3pqlWf5<+?r*icpr?9$%LL/V2sodh@]DA4]RNl#@M;Uk454ab-MLJDuc5Qh&PpG#g:@c[Ndf11V-Xj3[QPC&6KHT
%g+$4F:9W"`%7FG`),Tl%Jf"NhlkPm_BN_N6fHL14aTP(k8kj,VK2C+`6:D:C$oG.`?/#47YR[P+/h5h>%*u07Y@6MN:%)DHKm3M?
%\rh4LaAZq#*c])60k/69/q5^%H=(e.$g%j,!H(EuL5C-8%X#uJ#h*M-ED=HJ+Y/D'#Q%[3#'uV8LgeQYZ;(oO2m7*9>p.JKqch,.
%XKr01L.ONE"/ug@!!XBkV@fVL*'^_*W#8'^I=&3C.QgZDF]OKQJ?,L!S2GUEF>G0J>T,aP%>_iTVBJ\"(n*XphqF7j\ct3Z>(`\X
%L?VdumRrr>]!9.O9TAWFGR'87^0Af!#VW1YkfC-/HdF.,0Roo<9.*E6-KDFKKR3TV9#bsOj"RPt$4KZN"Y]qH>*0RM^T`fgLWbu5
%VEAigf$&lk.!gR]9&M\ECVFb5SC[hTqJ7OV&q8hYp%tY?fr5_LVKR"YVsCo#TbT<g\4hiF")N(?.CC%D4qh1<GeQ#(JDr-,=2B"/
%3f.MYrAc+U:a?j`(:h?h2LD2!rXWGi?"56,"&(k<oBae(+TD_LW)FS_,q&#6DWT+-@:Xj79[a7Kps7S(ElePd/2rFjiOCJ%0Qu5+
%qIdDbeBT?WaS(mZmoWBX\Le1eE7!>e;trAONBranf_"Reqk'tU<]'m#+\\Y,#Oca']'4Z*E[f^X#M-Mh\*Q%rQoZ-IM\F8u[[gUZ
%Ptt)^F&orlY7Ck!>'.N>Nf*BHKY4-9]031='GO;J_e$'*ZlMk^^+SuY)h&R?l.mEu<Sm7+hO"eQ&O65)pN7,do)KK.AJoJi.P3jj
%ZbQ44R&>RNY3MQi2E&I#_=Vlu3J:oD5t21g9:I[W$TECL^ms:s7d#9l<3ubBNFPAjK"Cbi7?QLYJn_Z8O6@UU.Ke4EQf87=+$bd)
%ZFaL?6:7-;n0_*mHl4cPdX#l-OeNphQu,hC11Ua2Ep1c,l0BNd^R\Yc![')B*&hEt]3l@=Q=VQ05s"$$2J2KXOinVjeeDQXq^#i?
%Ibn`2ef;3/+Do0Lj#Fo2h[]S!ejAF*9F1u?2g,0PWOOQOYIiR]dZ^L190J:)?'K@[&nAh>iNn(gC8F]$e6!rH0S_.C2$\XU9V)SP
%eENQs$/ie/i)K4S)0[^MdP8'W9tLLC?e<lBiLrV2GLe*b614;B#I[pQL_L+Gj%^[TcjfNSNgilT83<gH$;!%]73Dg'I#JZX)op%s
%5)42IK+5nS6dX>/b)i1?6,ZULBBJ:q9F)i\@!jeHS=>-AVUFumqWV<*-Lrr4"0f50?TDIW9QQ62@\?k_]J$fX?$c)I)0A8/d3a$;
%R#Yh+!5;.YALR)83q11gF0A^KYf61g>8m^nAB8&n7(AE^eeH"a-fF3BW?C-t0i<!gPqn@U-?F**"#`>Dhnnl6:#@S/+5rIL\QpO0
%(+:qK=.>i&H#p/nfA3P9IdAk@C"t35jkT<,*G7I;.%UW#e#NBA;N@0KXm1l$jD>n8EEt/S`H-S4?,",Y<BT,Dk*r[1Z_!L\Rs$;/
%;F"%HC,7brX^:tUei_bDbVcM(C(%Fh/pr(mZ\D^<<l_Y8@<07o"ira1;HD_kj3"ru.YWd%>&8C^p?PgX!`gcb.?b.^(7IuEG6?_c
%f6ui.aj\^SV7sRi>nl27QI3]pIU<dYBbCQ;U.S&rXs9q1VeZfXf9QmP#UPK7Ag.6GXu^][CCOd!6X)o02PA\.h$?"E$W1VfJ3n\0
%Z#rnMF5I]-h^,UU0-VbW_d./lYACMcdKnZ&D9m'!%;(6g7]o8o5-=5im(^9ss'%c8W?C&gG,47G<&.;mZO7%U/CEu7.*ImH!0j`k
%@L1L^IkXg6\?KG#isQ%'IAUldC0kdW^s4Sb+Z?3u<?[Y&r*`=-X'4#!Q,FdL8$P7`&`'=mW7^?:"O]'$OT$D7gSI"ZR#<L@'M<;K
%nVAaYf"8oP4ETdH+utO+lEqco<B?*J6MT9C\`%6k*t2$>J-&h8$$*C?[:Rk31I%ZIfd+[D5cXX8Zl(f2H0eL6^0O@@2Bs#/Z1l.^
%Xe]^[dc4\"<N*Z;#>=uZJOO&&Zan&*K./<;P-J",UQpg`s/+-L1bC.Ir%M_:,8L5:^@JH,3YDl[`+l#ql/DJJf)>AOf>19/""Z?O
%@,:W1SOkHNP7S8*GifaI]c(V/ZR6Jr)p.JFLRrUs9(12'$9"V2pU]]klBMW:DRCE'94GbDD+&t?1NeYal?07VgpOEAo]no2XW+qo
%h8]_pHN*>p1*`m%A.O18F4qO3C`,8l]'/]-*\&-YX6gM5hemF-np[.CC.`mm7u_OY$88+j*;HhsZM([Gf2?Aa13hD7%(L;KVhAbs
%[BE(MM$*(&q'OHTk=2Z1i'qDf->q3$$JfBYOCC89Ao%1k@9VZ@+_B/EX"YEmLCk(209!g*"DMQSO6^_1P82,sDHRT!e1a=:0$#,)
%Kh"CP_)/Pe_!R<I+(SL9RkP'3T9jM?QrP9?MQg":6Co1n"CR\cg-c6@R.`LgZG,C7_g5h[Eh^V5=S5f"L&-"LFTK-N8<_T6hsLVQ
%,"@+I[,ubn6'7eC;,fPp]n\WKq7b0oq`<io3&-p?lllReBtd0NetZ!r'UYVUNX5iPZuf]e>lp]^:ioN)dt6cOMok]PB4]H#.[l&9
%c*ST$g\$eF(fdRDO!;PH!6tFYc/E_+M_97W?oi2DL8kq5CpA$75k:N8=CY5$m7#b5kVGp70B;lT;B(k]n.X]!hG]2CM1GL)oaji!
%WA]@4#>L?$h:b"C`XD)Q:3'+&97fhqi>umB1t*_//unbBbc@s/3$gfKdCF:$W%Yk2kLh<2iPT^#ai:?`o7<^YhgUT(Q!2]Yp\37!
%cYIOE-SV"A)*+4&4(n]JJRa.U&K:]h5uTE@K\#jDl;j&J6[Ye<XRJZ+&]iqXPSGA0l_,Q^;ls#U,(\muo!1YtA""*2?i^W!Y&K]+
%2NI53GOs^K-Q-o]6(@0hj:D3T<U!>Y8YBuBEmRM`+i#n,lj?Ys*_l*%rN!/[!hFic[/*+Z\n/2Qb3Dk9KenZ7l:9X#61ED]gkeZJ
%'W5/^ED\t$;hS?!gQFt_k6gMe\N`,X;9?hL1Kp8J]aY?_@u1k2#CSk!&]_=3.<%8M=)B`Z\)E^-0JO;^K+beNko?1Yd)0fIRlkaU
%T7EWNniZF^osFHM8gG#"F/Te0'&$h!EX]"qSacX+Q%dh0kB+a96i)LT-n;ru')//sq7R8HfL5rMnE]e5e>*?Oo7g2*B;lh'Qj^*b
%M#FHl>1@peWK7<=%TH)QptIiZ;;aQk:9I4Z3d:JLA-KdY[XI!Z)4Nfa5c'b)?(=obUD)@hR$g72Y)en[D>.o2-QucoNr>^TB,8i%
%-o"hIl3C0?`97>I`F0:iD:-*%WJ&afCPg"VQkWHa*sc!CTP<LG1:!Td^uq;iW>&6(%V>tRhO'de37I8V`Yu\',0Y![0m@$*2TM\H
%'HAjiL=De5ioPkO`I!,195XfM^t3V1m"Sc\:E;D`l[T)bf*p,qinl#dm?!br2PO(9P`MH6]/e%]aEQ[)`EY\,$)N==ONm$]HV,?s
%1jX/\::u';M.]fbif$fgB:2T)q@4O5mLl("#bmW3L&nHP$gu);H)KOPHXZ`e<uP78/eQA92+"(%Y\2Ot.RA#OJX#GXg#iMPibCR1
%%ZNIB[u>2u-8te4&D3_1ejXqnjO;dZ*HKGdZ6V+rach/??q>k5\k<i4/RJ<B_HdVg/1kY*#AJXC>.9F=!N):*rUfGmJr*2tCbK.<
%igh8<!(R=GkXi<2=kM"+9CuiF\8!jTPp0UFN7ag+0=,:F4g2pfo43BFmGa[7Aq$3Z+9AhH>=V-3Fiaj*45&G+!Z-;0n+TkP40&U8
%MSh88M)_r9Q/r:?*_1D&Pl3Qe)A'dX\Z-fofJ,BHljA(/H;G*..:P'G_lg!^?_^g'd1?"7/M(%[;2:V3+dOLofu*8o(bNk^$6+E+
%Hs\/=5dBON%oa2r%KrNo^XLI<ji5_pc-X8QoXCoI`ME$OaRF1Xg8h_,&eW8N3maTZ*1c8$2KJ$[,t>["8J(mj>eX.82s)P_k)el^
%Jglt\3)e'j0Wi(FY.b&ZJ8lquJ^I5NhJ/Df(#?E,@G(dj^=Asd]YeSO7b"BlOKV1r-cK&d97_@,l9H2o_!\:FF)EYU'\e@V9$RG#
%G%=m-l9KMt$Hrtu4C5KK,LSY7e,Rg:=>#FNhl.bYb\+5LS1Y5)5Z'ZcjPG+UKE]d*SJjZ%3i'2E)O3T.es*o.W)L;rn#/gBMf8>&
%kCf2<<].VFXcJuT+CCH4iC3WoZ5QDPDY%1bj:dh.jUurD6hP"cW`h4t4Q8"@T,1)!4GjjZnW+A<?sW1++KYUR8Tn:g:cGo4=;ApN
%PO9b7W:RfH8'^k"4QCRE[!LPbTQUB=f;WV4^k3-d/r3R5`"2o3^m(R'\a7VmWc4>d\!9AV6%X_lI1cOX"mLd&IkETMi4@Pg>P2H!
%YV![*;;LUU'm#bngYG&P!"64l%"f'>0cMB1ZC<Z*7`==V[1Z`W;Z'q69cl'kX$@9Q&11<-@W9.hMhRJoA#Fl5)X7u=lBd13g#p/K
%Fu37^W<!_>85in7o=@^CQ6Sh3Pe/4cKs2"A!DF"epBI"r5>GaV<-6(Uh0Ie5JJpL!.7m*U;V.,*&+rXNoBj_1]WXK"M*ff1o1p#U
%M-TLmJ?Tn9.3q`!e;#CeUdRgANC*,UV1t!umPWZ"Gal9C^*+O_3q>)9O52#4_fMDJR:+0d\LHLSiML`5fDKb!'WoX1-@2Rk,iI?H
%$"s[#%BN++X1]5O"!E3;-uINgVWs0Jbe`LTQUleE8`c@?IV0Jo7C(iK@sWZ#^d[s'B)3^snfQ]4R+39H_PAGoIslm)gP0F0,D+#M
%-<O*?3cZp7C=thcH:-!@NNT-b_4?^UB+c<".*L1u66T%fU`lWfh#&FUGVq96Hd-rSY2rJTrOL6L>r8#`*uIZQT/TBKn]m8>'-/CW
%)<f@<JM]Mo&k2"0J056O!FQeK9#.cQ+r$#f.GHT>ItI:sVI&Wq6\8%c5DU-&T)HkgR)WED0aK$hIel=9jp%QubMO8U[N[I0;!)]P
%bFB:R%T!_RFMo]``-drjR]a6\XMI!Ke;K(i4mnlsAN":3@-h>:n\d5I4aMo'MC#c"Q4,FF`MjUe9SI$N["?WkcG*nY2;OYR:j9^n
%B]_\=W149b`_K<\A\-D;.]Sl=47[VfGh-hNFCKaqklW/:,gaYO?d(_2?`7$pqU8e#&^6o"G4#_2<UIVE?VZs3,:n+jZHJM=PZQRS
%SaOQe#7&+!P-V(!KgM0KYGsZh@L'1/X@P^7ZO7KZbR&`\;V[p3nah(sh6tk("h@Rf-V:%m;aiXT+T1TnEIi%d-@ec["];2#4"Q--
%Ft5P;0WjgsPjk;R3N)Sc/m\a`M+Q)l#3Nu^ELHG'_[k.q&m,IH%`E5d;]A.76ajhGFYEVmq]pue;VaCJAaCRF+X?<hk04fq)p7Xi
%3TMmEU3Q_hOXXIrQAhYbm*G>CJIpC_f$ob_=+n7+V@\Y@)>%/V5\$>;+IV:a^@?CW0LiZJl^:SG+fkOso4krp&/8k:gY+Q=Np3,W
%?d@4ET#PRtn[?2pipnqodk-Rn.@)*_@(h*oXp:hLe$"YE:>aS>h0[cFkoAPDl++0li>TP[)g3gY<Q0U:H-//%a0U8dC;=)0f0sjn
%]U8e?2JB"f^=ItD_@L,+SfL?,s7ClC*'4eUKk,DNdCF!Uj(l/9"]mBr`p,0ah&^m(llS6EH8QM7]XA%#\mlK]%Oo13H@O[:\n6<0
%D^q^($c._EZ1!sZ]&<SoV)gcA>Eh4+2;Ff@5]&3V4oK*3isJi5n,(do%gH'Sk4=3gI,R^Bj>9Rf,lH/Cm8dRfU0boJZs/,h#nL@!
%AFTj)X+JI0h^'<@rV"4sqsI0#Y$Dradh07kQ?DZ]45"S^:psFK;47L2(&q,cIuHVG=?6tO>I"7Y*_a$0LASX[;F`OEgJqtK2"B*p
%jEqnh'Nek/r4:?F+*T-A9D,n4Ta#b#?qPW:0\Jk;goeP3ZbiL`>RWe@VZKO;Zqu;_)+Bpq>/YrL5K[[?d*VBq(4]j)/-X<[pf;n0
%W4!'`5E`YI.8_1'fMe/-=HuOqFY=q-5(k?#l0_7$h:Mn(4(I,nN,H<L3$)2t0mKI\G1PYq3>2hkCf;krHl]+SR6:[,jetqe_iL6T
%JFr.F+9hJL4jn7m2o"k58qs/qNdT)c@TAmAOAtbdI7kOLrtj/1@79asE!ZRWnc#9BT8(&\,DWfEk]^o5_1;+>:E?t&lQcGFWiT#^
%`%XA^^d#ES9.`NE8f!%BUR)+T=F_FVibbFZn_I-jJCjKM]5lo$\!<l7]@LK;C:cfQS(@M0^5BpXlN]Oa<KHND[2haiblJ0$8uW6N
%W]C@D4:/`M0ll-%%]-*DmTkp80TcP(P,r2e"/@!4aEIRH1kQ+%#\p6\m+o^6NkrBB=C1/>36bna+(0\IY+[d>?BW8m)'g)fa!$[Y
%Wd3?S3YV`8`=Xa#M'bV\8D))kj!6Mj/j,F#WdMJZ5-ROd+Z$o&SSTESHgr",6P;J58iK%!8FCXAH?6bj+"88ii>N?([Z7nU#5/m]
%"(<.dGK@<F<5iB0Y1%t'CnG-%Wi59ZIQej"`J+`bC3ShA<tn@7+u3j-=E72C*Le*l2Kt6Ro?YfeI.;Y#B?ac6:IF.s6d)Xc<(Qj\
%+\*5g-)!i16Yj[\5u%6GMVOkjqb`XOjjq"F#,3edBs.4))Y:D-/l4,7l(k`qX@21smZI90gm/._&.T['s4(e&dFF:/,-6Chdu%Ft
%VD(Ku1789/QptK;!dFi>=0>u3Cf'1+6=7H+6gds;+inj_Mp;[AiK#W^mf,]).=G7oBat1.8>I]5#[8RMDTR!=<_[_]@k3(MQ.!b#
%CF(B(!m'kld+MiC2n8oU4BmAU/>:%*PVqAUD8T+;6`G`>A-[#BCk,q)<ouKY$2_;eGf*&L7&%Z&#C<(VD[,";7IY[ef5JIGh-Dba
%(*mld/T__)-=(*Y+;tWQ;o5fTNnX@#5RdCrcLjJsN[YY@!Gl0.AEiG%e^Z8D/VdIbE_^ZI<&i<kX.%BMlQrQu9?ZmZS3mQg(b4ju
%b'\ib3mT([Q'jKGR)T_kD$$ubS-t#_UOF"),O*OAn53;?p`plkRP8=eDFE`A-5=F-K^0daD:729^#3rE`!kaXY$G^MO7]`%eJLk.
%SgU&KScArA3ip68$5;!dWMUC`A>Ba1HFB/+;YG/FV7<U5/_.l>r8:]l-S7<JK]Rkd0j051'!JCcKqu2l<?jt^M"8q'g7al/N)Pm3
%[@+d@>tJp#Y5ESMTnK<93gh>`mf[S2nrd$OLGFCW&[>uPX>5Y<YTasf3ma^pJ@=r7c!2>P]u_Qm9bOpMXL60+*jKF.!fBjlM@EMR
%HX]*Z>Grc_5:Yn'BEW:cqm.USVl`A!=)ps/]$^93mq")qp>"KrXWi`6>L=*EII,a42kVkn*$6r)O!B\!EV4boPRG5I,3gM4!gfO-
%a[JriG61VG1YF6=%>B,2pip/uCDBXlkuTR"hUC]=Gl^0X4r\XQ@/peJ!HBK)]qrrWo7I&3mQSf'I=;b=Oj`lsg)dQ.5jPjYf_;.Q
%ITT+4L3.9L\f@kZ.FL/eN<qa?*U]Z_i:/FC(b2?UZGnM_QQ*q)K/K^ae`InLNOr?$)%B.&<)]sXr**N?Jr;0P1hX0MC*Hq<Oc[b(
%kSI&O53?"[9AW^4o6aN)29Qo$&CfJ,b*uq]D,(C8DpDB]J8$fQ]tT3^<X<XQ3,oK&i\_alNOg]Pmts/=!m9I4DpRkNO(1?+"RksL
%^4Rf'l1I3[R\k9j.?=[6GpCC0Non:``PCKC)m0bqTKgskdCi+\24EY=_,C&1.H0^.&?EY=&gsYrda\?KX1@GjEHd(Ye7O<f<Z6NG
%LX=[U$*Rn\XL7mlX(H.dA(68E]l6rqA3N?;pQW=ZN#)Kj8K;0(77gcF7@6&V's>4,[B@j*nd$PVg&n2PmlZmY<*P+b](gunoA+Ea
%JKl%Emf4GV$^[&32n3@?cmLh((t4P,8qSUp-qC,CBODKliP&;!_N)+ZE^mT6]04!7h"3q6[c.9%[@cC5`Su[e7*c%,rWM/5g]Gug
%#&Fbr91E8H$umG[JQWsmpVqYGdC46JQ*_/&r5=/Nri6sm_/Z@YgP@J8]/kLLlGGOd%bAbQ3l:U#\NC6F]Rcr3&&+NRPlPa;`?a7,
%[6K5@lVo]"e0Hd_Q'Gpdp$J*`c4LN2;N$,;%41dOr3_`=IboLs!]QJ',XbrbQArM#g]giZ/[70e1pUhlq`&?KoGp^u%\*,BPeElX
%%H4"OrcCBCA4O>h8u?ZC"YRLp0k:"e=TnR:;3fQ$c[B<rp=5o*(E:T#hT4L+g?CAQl_c_F(Hr<;C.,5SN1R@<d:WAno$,k!7BjX=
%aZ]/]*j1c'd9dK"#F/2U?7)G]kRA*aFtV_TI0neFm@kq&E3R\XSB&8lc(H%9k*a0sEj[2JkSCQ,Z?*^,GYk*`$CM7d)9Rm+!5T5N
%<"8u,o+5,8,<Q`1W,N;,VIpMu5"78Z;8M!17mGUjXk?.iK(+Gn6e^hNau@+MdkFBd^Y$-[9B"Fg#=Hi"'Yhu\oa>!:&KKE!'FiZg
%<^!ct6#9<T#S2*^obZrQW\2u=*$HJ*X@YpN0GO_t4oFQYpeX:FQoD*km_?$!il&sA6e*VDTG3=kJOjl=*QUts5@Lj+nT\R_nf9QT
%l3ScuOOjq0U3h9Bd(#9FOkX_i(VY]+)"duS.>\#PicHD>HJ"Br*V/s`.Tm"))GO,o^iGIHVpAXc3J5#,BS@n;pp3B12q>fJ)13l;
%F%m@-9pPRkj+c=L-Fl-dlF:h[&TK#l9[bWmo*OBe^O>&6XYb95[*5K>g-"=e</d6=*`]>ge]5^:*\Z4'OO9^db75>?RZPR;Zq,NQ
%%=oBk\'VYpfF""CfuS\j'b`2)DcQbJK?][V4KELo55!/!qC;I(Q'Lcb"*e5]I6,#s^`2>CfX5%&!MMJOeo=?"@KY_V]#EdbnSrM#
%c>1lshSZ[9Ap;QSB+dr%Qj=W%rhkg`9IY9TY,8>B$qY"oou:YrmgNDX/`T4n3-;%c"IOZ`LM0Z!6K<6i;_;F.ID=J+YHLVJkt.h'
%M0W@uq>Q[;$4FJ-#+gbnp8n<*UYN@^Hhtsg_Ytf2@/';%qt[$AoJ'I?XZ/#:]j-G"+e9+_b?KekU"g&MBp(C@:1r#ietl"GWqa.m
%'F='RIGR.^>)8V9k\,8EM3dV0?2cb]64,t)7k=lq0.l0o@:Q^V/8-%MAA42CPGr`;L1Jh1+*bePi74T^rAHWj]'9$407tQdh&M_]
%06gl-jS6:@MkmAa#%676j2QERh9G>`78AG_^:.2jhU0820\$]u0D/JS((VDEP+egV4#H%I@)<D9P>?@a]Pmt;mU7THhGqTH?2/<_
%]X@\1U@G'[6gguO47SX.JH_sn_>+e!UsHa&R0,nb,X*t$!'V";::8tY$>#)IN)kl6!04+t[Zfr1<9'fPd/XcN*-eale^(d"l0-(<
%-;q'Bp##Q$crfkXVrhpe&0g)soN>prYU=P@<.-3\)e-+lZ&"hm<dc=G1gTsB6LQRugNur?OA]Wb@hf(Pj*>d"QKa,h`^FpX,)P&f
%DkRDXMS4oLnAJ^=rtGL#E4M0TPr-TM+22W[UC"k->sC9RfZ%qnaoJ9MHhYkfq7'I+&,bQ@#[BYtZ34Pgp&a,lO)?^#375+3<?BCf
%86u1q9@RCs&)jW]Ipasr-'K_F=c:b%31bmjO<4,+9\mlqeVQ0.Gei9bgBbp/ae>&M#H9Ab?=Y/.Oa,CPTiYB-Ecg4G[I.&,^$':m
%[!:%lm0G.+!<4[*LB1KZB@VDJnW<bqpg:,hTH%7O@r+f;3JB&=L/e^>\hD_F*0mRm.4H!8Ds8<JNm[nW^:<>(>Jj1)eEBHZm/SQ:
%,%p>iKFTZej:_Yt5O/s$Qa+o7`4NY!<&Y7Bol!'J![Y/-A'LY`6LDd*%R'ii%o$D=6KW<lRQuLp+H:F>d><NElfQd_=jTDqb&l*7
%`R*d;.TfKIY#-H]?s+\C5XQk<i?W['jE,#po`pShh#M8p9pZ]"F@63O5VP(Eppar5951]$"WJT-%SQr?YsR;X=oERTj>7hef^XC&
%fGk[OJ^<f(>o<nM?lEr(]lap?^tO.35M*K%#?$KU,JO*?1u9^!)fG+$SPnu#=mb,>McnaTCl@-q't!5B\`2G4!YeWX\Z`B/a</XX
%;[5eAQZ1kWn9JYD5qQ_c74M,%ReUTWQ5'S+\?KC&6=Q#`g#t<YZ+e_iiKkfHN7cU@mDZ+?@1298Xi8;(0&cI8,4"B5)5Zq!)?H5L
%Tem>Dk'QO,`IZXf6GQ_rX]lG;KdX#WUEnW<K/,hEgbt*p4D-I;+1fShEi>O^<k#Z76k6FJcFp9-&JR*Pq\N>fRV3Y98Y8%$[[0\f
%rn+jm1*'E^_aJ5:[T-3D9Y;Q+JuP#G<VGSf-J-Yn7QX*'dOLe4OejWN(ll1i,?57.XY"H3pq/bW`pQ^=R&m^D\r&-mZ,P'H9*(k6
%?V-Hi.6`SL>@h(D('Pql9]aV+@i,,La]e<c7$-i6LpfS>6Hb?t]tb<Q.=*GojAO`iT%Ig;#nUe'`S#U"J>ML:mfIdgHYT^8dSLNS
%Y=$N*.))Z]X]K_P%U9p<AK!*VNiM,.f'A%K^l,+)'`E6j^;u238uEE(AJGYR(C>sm`<(GGNr%p6NSetVD<7W"ef`hTP;7A%9t1%7
%!d]2Y.m]DEf>Ve->Lp:fYF/cHUhPMnA-.rAP8V.^2(&EffXk79)t@04pC"0b':F)GeOg4(U^t4FC?lUZnpY"^-=Q%3I:[-sEUu5D
%S>Rfe8W3A'<=O*FZ<R;^bFi%ZWT3abJBPZ_3NSnRq"NM8%bh"H:dO/e+'sI,d?Li?b*Ig_H`;e>!WgL;e#"1A-@ZCPY`$Q)[3B7!
%n:`\!7@cC9-FubR.EqK?G,mM+k1MTXb7j_ak`lVQIk2Zlbgu)4a-\/LcAQI>Cp*0QgFk??EqM[6*YOJMj>PB!s,UgC/k3AZ?5B!B
%/Q%7&0CmTIo:uL8F)FdIdZ0*jhr_*K=WUb2]n)Z->j5$)7pbUE:1_9X042EM0oTl@m\EUK3prhY?ANl(F<llNnOD+8/*lOZZu,ZT
%QS4D`*%$_)0PBEpSEn!\jJT$o*+g?\UT'%55/p845gRWjcm4K?e*?%UmA<`pVbD=#>Lut_HZL"i2B'rrSCa!KV?UCS-P,9Xj&YMf
%;:b:,74SuTPdP3C`B825'N'nL^uk))M4F7C_rn_c8Pu`Df9/7:+"+L;Cliee't5oI(Ed(RqAUK5b?@]g9Jsp%$_#">_7,J3U&RkL
%Dr4.J482ESn;%%PFggQP6JaS)a<k_?1EQf=]kZ:K&\p&j).retn$dDsf\HQm!6MT9.gi!;8;\Z\cB;M0B4:&&nGIN=>%UY,pN,2L
%p8gU:?G=&Np-,-HKU)mf88QX[eZ!T`>*IOJY&OlE&"nf/qX-tdATp:*81g63nO<Q]=q+WLH@['J-s`7cF>?OfGghBbggLqpdi(/+
%OL[h*WC&nJWZh]:MS4O@_Qc)A8B9+7e!UT\059-YkNfkN(bGCjZ5[!!?$EmC/gmuhi?CL!b3eZEn('UN)Y-8,aDl-$U7]Zi-U&Un
%3;k+pk2&=kPS9;%_sDUK$Imt=DE7$!_uQY>-H0ukR(<.=@9m[;pHTe/b`5>M"FfL;c<KpeLGaZTR7^Pn&`LUbFtU!jC/:^,e6s&(
%JM.4k<B)<iR7V[*K/NMPk=TM3:A,]Qe1tlR"Xhl7rKqO]881[U>$&C\75rlBBq"aW5dj"sDFTW@^>Guorec;:)=eol2]r]l8'^/:
%j)ipsB,H*dNZ,IW7^),%`Q!,a>5)aF'uh)>#g%D@\dFTTlRc<!!+Va]*g[;6Nq>O73CQ5s!*\^43U8iHZDlZ+@8?=-C@PrL=(H\e
%Z<f0?^+KAVG$ZH14eJPn87L$)ZM#5\ga>2bRU203Mmj3q>Le$26[FTrR]I@-A,,*bopsR7G=PgMVK7YQR8$uE<<bXnKPVPWAMEe/
%F&!Lder]6c4:pi:d;%#m(6@hbA(m4%@(2n&gmQY&'i,(995'F$`I#N*?(aSh>[0"rRo\0`L37l'Vq6bOf//*0(I#asf<Uns[UO;K
%gFei>UtE&c)DagT_3`Z2V=+t"Ud\gnP\o6!B(W<?59SuTdi=CL2V\>%*:Li6^!=inIbtstZS\ZIPe`Na+3SA"HC1M!7Vd)'bMIOt
%EXKuq=$V\E>,.D,`;TDKeFOThZ"P5W4T\k)^Lb[f(jZnW!-/fTLjh'bq.Ad8Zf"sL'\8Q$4M6VN-S]#n6/DH0!#DVDNnV$%ZZ[D>
%K.i!Fg/fSg69Hs@WSk(9MmqWVN']B10PnS49V7<$h3cQ>or*S)$GOV(lu2epDUj5Y1[J#%Y6-aE_$I6)1U\gjYn`Be=he\SR]G9&
%Geh8:#aDhu!X;?2qCO21f"J0P+^Pjd8Ys:Tc[%rP3Uuc%97+V7rQDBbcZ0X!nqP6mb"`^%R*oA:-CU"nAltVc7i[Is3_WVc@5Q(i
%higM?jBfg2QhY`3MG\)n"X*.r3j;-I"UuSjF>oJu5+Ua)TBYOHnhu?SnFR4[Mp^OZ<uAArhLql#QZF1p$;IiNXo^ApfW0A\J;\o?
%Y+YW"#+3&;Eit*f%uh'l&pq9_0YBK77c?!J)CGi$o@F;gSTrK:f%gWY:s%d<MB85NO.SIpK;Sg6ZBT(R08?2V>5'cUr4K.\nb<;[
%h9"tTR=g(E3:G\9!A>*a1sIsFMJ7OB[(/#B<WqRFNLGUDM?4j/BHB`Fc!fkmH0s"[]Rqupo#ohCYH9esLg8O)fWT$BgL_JaH]sO0
%'<.u*4(aTc%Soc=D6-@>@LK([?@"\_f(Vnu0s,WbpU[7P)%"'FI[ZW'(JXBo.XFR$3@a(V6pe.beGp!3:3KmQiSgLmjsLX,B!9q3
%8I,:^36r\E9$&3!`.<R>n)(-9rZ!j.e/5bj\bCSm(m7e:KksS\DLMor@oVT3Et5Ro+G*3sUB#A[[BT0!in#)AZ,Q#`^2:AO>2^BX
%<8=\o>G8N'-I6G9/t!9+Y]U2\g3'Ne/,G[5jSLD;hs=Ci/M3WpP#Yl_+n5W4f^\\p?HP(,$[kO)<)JDZ&f^SW\9&ad)]QM\`Luss
%$E0OX?Aj3>J!t=,`50^nFPo4SN<5a6QDW@$>c]I5EA!EZ]4=RC;"q?.b8f*r[qTU-%'oU`$"/&`B9u2!A'YJbJ<*Rs'4aiGr5u^?
%k`0`l(HA2hQmjQ52NuGR78pN(X=4nc>+b\EWRT.\k\+DiF8]gi\>7O>Ii\l%K5"H0?Ch=_@PJZS)c8We+.UI84m#0+[/GUbGshOI
%c;-okS1./m\@+QLDkc3bR12(D%_qf<IXMbSDfeN"2+r)C9B%g4gWTSQB`_5Y.UjBB-o<C:JIq(.\0'&Qh<1O!!R$n2(o"b:S?ZQ0
%cUCe-VRC_g^R8ID2\531H2V4^gnZXK?4'K+X1h$'YjbUE>!>cIqP^>$Ru.LggP05LG-IY-"gSY)).CciRUqk#G`HsJR"[4,^Gci]
%6Z[3(56eSB0:I\@2h`?NpY?4md1[+bLS^/.8%M<s/kKS^D[KecW/,PSEmR:7"jloS\:-sSnm&Q;/8pa8EVZ1._8oJO-^V"K=RW7b
%>9o?N<Dh:;*OX'>*e8<JW@ubXUL*Y?F.#9$$_N@#hD[U"7M=GAR9hlNpqbOY?,gM?h_]JLZ(P24Ou)3b7C#R!Ra^7?[W8_g827nj
%BI"M2oAeVrh$4u(__dYY%Mh;J'[Yk$Ut@I]=h(qh\")^h_Gc+F)0!9$/"G:0!b'M6rm8s@Ar38T,B2l_]q^W7:FSt9&i)^=+<-#U
%]6Ib`E9F,"jDMMHnc/h"bM#r-Aa_`T>N#iDZe)At'kPe$P7_``/]M!.V=%Vl`F"8d'mkR,l0f/cW`*^'=e<?!p.X(5.I3eaOZTmG
%6Gnjmh'aSUMlJW%0L<FR22@i$?"7H2@P=r"S%P1m#;*W"GeC53Rbk$^/83^<lgG=\e9Nh7%A)cN9blTiD:5NA+=^I!:g&:h3h7n\
%b.Qa2(FG%N#Ngdp(/ulpRuQ+!(Xf[)V3OF7D6-#0F;(oYr9ja+e=.FH^$%CA9FeGd0UQT`P&.S1O'@FEa.J(M6l7l&E.d<tL:]qI
%&r-0K^F0[c@McXU#@L8M;A,,$pnM]9[133@%DmWd4Bnkl#RH=]#SAdb>lmubTDbV.%K<:TD^j[`2XqSk]2*o?I@=i1W@[d"El_8f
%Rl!OARu>F2)Jn>)h?p2eaIG^jDQ5"\ceZ)l9r^,Q./NkX;l.9#G[bdN,#D"SF_XelHaq'Fjf%c*Z<,+8E?8B]Sc)M#KS[]DPYr:,
%jO@bVI9i\dlNV[Ll7<7CIFP76iDnl:KkTB@.oM71TlV`496Oe,f[O2T8a*DfdR4-=KZtE8;RMQEMO?=3[f@W8S9cJ^+\.VVf8$aX
%k6:Jo/D?/`\^trR)l;uUc*.K>>19;oMG:rEUJ-MtoO^sK)L]Vmke"M",s`?Q0;pCRT9&fqOf3SCb.\:u!)64.DG\RT#&ecuXdU,?
%e3*$,m1!LCj8I7%6*-(W))Cbh^=Z0%gRF@ieLIlj9tJH+bKU\SS?f;=/AD2g&M+WGP%F0s2;rX@eh;9lpiqMUrGts@T\lR-gCpn*
%3F,993kT,EWuSu/XXRF"dR\gL*Yp*18"'eT!(joJ?(5+77G`r[V*OF@WXb4mb@/7p2"g1>-OZ]qD45?]ifF1oaYs;#LhD'</4%O)
%C@o*pB<Chr)^%4sBqH3MK^(doWkWSkjllctC]=W1k(.M]>Nbll_8/NGqmQA!C@7f:,[\ENX5hd9mup"/Dho3$!eh_j;SnnsF4JG@
%2[;?eF^e2Dmg2s$>-AiP!grjXPNoU5bGW7bB]SQ#8V/he5>7j^>X%o"$3\2\m3-;W%^/Hq\cLnM(F%e`qcskjalWV9L\$&19(s9'
%E;SB+H_E>h7!7=c8c[*>P6D6Yp7<o8`7-i[TL#S\NfGgsagR5.DQUs!Kd!Q@M.H1>C%pXo_W`NFKUJN5<XYn.06W2?h63Sj(R@)f
%NR-#bK6:@r.`'LK4ReaoY*)JK!n.nX!cREt\Iq\3,t`a;Rhg39d:3X7oX25HKb-_brF[=V"]Oi@=TttLHTXaZGM6/ANs4<*=,WYf
%85tZ[q22OP+S5q5n4P!PDn7F,cq;3LQ]O5)%<dJ=EWE3"9%a=_$g18Q5h32&&;oCN_<eFR6EH-4S_\6c()/kb1TMUNUu-X7f=`VT
%N:1O^-&gCi]Z_C7f*T*2Rd,NEG7pg3l%tdbf9>R1GF4Np0We"b0\Fh;LR[<>E-(m2>MWO#R580B<A`4P6fZ?>[Np\$BFqg;j80':
%T&X:=bE=WZk@qq+DAK4/<CnCn9\T3@X=!AFWm*)0fa`d8'WCciV'[-JVk]""71%g[TR)o=4PO"=kFb!i8)T\g^sC<ddbR.u,)D!'
%%/MP*:ei9i(H%Dcj6LA#A(pT(_fRpnKm+qa[!#`!CZQl>AFkaG.Co'hk>gOaT=L<8ar4_uH)<=;PmYKh=;%KK0d/e9SmbfqAQP'[
%[MhNjOAb?km3Id>r)plJBRB=U=I-KA<>,W_'tHB,er*Q!i].LrAbu*c6,DFk[2*qbiu*KPfj/'T0f[kQ8ZG1/=UA#_i<HK+*8`I8
%g*K/:i*\/QXBPkYf[/5<EMd4@)qmei4mFkUD`*np6Qi1Q&'/b)&2_FDkJ.ono7]lCV#R9/==c0?cLJ'G;#p.VJn>C7^0S3dEQpFH
%.#L]l")jJ@E/1+5(]20qD'U7Q<l,I%e5V\9eh.m'6V$bd#kg<8N!0g2'DB;-SU=FM9#;GVZdEMAh*QUp(M]*Z9W)#(Yi95",HILV
%M+p8*LX/0RdMCRB6nXMV4'uPl/5,r$7l2X[OIkM?nM/:s[E+7jMte6)aTZ^W)2=Cb+>Ro(EJmACPY]&9LXE/BD*Y`8O"CW"H]nY`
%%e8qbW,=&aKCq\i=Lc7KdL@ht\cYM2R\\<Qk&7HgHgC.8`,o&+LP9o@d<:=`M)Xk9()[>6:[]#3[a)L^`_00PK]!-?Xt6p_d;Uc[
%2dp'YWq>kNYns>8(!*u/MU1Rol'CRu8J4>1YHR<Lh,'"-Tim`@cR!Qo(dZ1ei`W^?4C9%%]s;M\GTrO+4bb\%/X!JA6#<:F8COQ/
%LIsihm5H->Q0cF0[TuGFU>]2WY,?KCCSI_\%KX]*,9jk]XPadMBYr`AX])gsN1l\5&9ei2!<lJp]2*9$l*n(Zhc2lO@o\oAWPTLK
%>BuGOYQr@=UX!.l(9S6$4u>.'HmP:oh-=Y[>t(l2'5l_tW]BeMaScV].R,[Vb?hP#[W@hU/@kY1NtXafjT;](8gW5)QU-kI[5EnV
%n-Qnb42!RH//g`qTT@g9lO(mJB#)U\<X$M]87]YWn@1?a1J[.D@[5!6_YGs%n[L"/YDsm"I]PPd(Pi@d&D'5@I!t$<W^R<s+ZAu3
%-:fN%#VpfP``G=kO/N`b+R*S>&Tt5[?YDDc9r.VoR_=.^1C9@GagI\2q[:R9iF"YG8:g$4E#a1dC;@NA;.E+b;4bBg1o=*@Xs_,J
%G[6&!;\s+nOT0aoe0Q#I9sZj%NG1(,_U#)&kbgEbS5!Q(hXW8*"Z9BOY.K8Q?-.#P6@H$k\[K`8,98=;45UU'&miEn9INRTGs6&j
%m[e^;KQc=%@n4H/hQPpR?EP:;@FFPEA@D?2acc438W(aX;H2`sF+,C4a!>UWAsrG(8C"^Al+k^/CK`L$;,U_1\Z3+fZs?(C?qnJO
%RqnII"BFb@p3&reg%B?"`C%)t\#dk\&>_3@"!OoF2Jr,\9KoQje`DRDM+m"2%4'^.D2KM'rh!4:fWaO(CB!!T;1Tr0e\X#1S5LYj
%!gU,OB13c"pRqLIWcUbe*F&7i<lB0+*DG=1n<i7tFkg?.("N+$pNRinE^52_aBEuUOl`OS3un#0`_d7fN4pXr!\Vp,(iqXFB\^b2
%aLUTpg+A)'*H-HNSTtA`\NBTFc5uu]#&qA9E7a[\",X<PG]0c3I_=!=QZeIb:XAQC&d)Pe9kN>aI80SUQLIYrOH*Fr2fh2(KOGDI
%8&Z&rQ<tVNEngK1imNWU#^D)p!ORG4Fg]R>Zp7Fa09+.o.);AP6?R!ffk*qK;b'9W0"$FjbaGn@XlQE]s5SlZX2/JWiuF/X*)(YN
%`jTpTg]WY0!eo7o$LO6D&?$^)Z`EukXE_u`TmZ5rS_*M6+6L:CJMd?#F"a1$0mU]M/)b9hnrZP+"/-KW8f5eMp;ON>rVnHHNQm/J
%o8TYu.mma.km$sc<dBg[FYfNbL$[;MVJ\bd!B]29QY0G538'9]6A<eaH'A?M`l'FlQ<Z2U^UZqOH:p<o5fJYa#=O5?=c)=\;kL*C
%3`r'_Xek!D6gKLEI&@`0MV)35i_fbiIeqkX$F1'mPV?n>C5O8X/)5kWUW2aXH$$$l@>7o9#b:cgg?Bn(N+rp5@Pee_%W[JVR(pch
%gCGa[:"K$**ZQNUL[H[9&*E&Afl3X*bIR^PNjkgBdCb'tcW'0ba6EYp&MFr;ruj_"!7HnCHBq:n[.P8I^9Lb/$k(ReK:Od0PNbN[
%\O_`59YSa^ai@<="Rg><=&fTJ:d"kd!R'6H1Ed,soe.i"!ot-PbhUtLh\l:N%lnE?c>rVDp::X&!UHC*-SS=$kfI3:O&HrHcU\3B
%S+SZj7hP[ns,TM(^$@DUb%K6'-=n@'Z&o(MYCV;l02sa:Q$\.`*Lugh8Xmn=W/:io!DOO];J?dsiM_A6AfV.Y2O]O=IgPe1aicT.
%MH*_0[9!Wl_KSKN2UBm`oBP*F%go_ena@o817uYI!RB`F"n(;Z,<gYt!:PMtQjtgd/D('=MkKig]p,S#.@dsu(!-.!;GT?1K\M,/
%o)$++0&i@Y3:@;B%A/1DF@bjDPH#pb.^%eP@C:&jQ'7OF`0Z6^dnlb$;(To,P\7bJ[Z1-aYQbGe<6lSr("*sl'0)pOZWY0]2ulug
%Z=lBD<Y)d<HYE7,e/VmXffXH_W+<X.CLJd1""uo,OoTA@^:>i8qe77(2oG9o"qWB3M1ND,hdT@k_W,V18I?G5p$U;YK>PK`&imT5
%\ZW[`8[BN#,%hhTX/nT]4reb0UK<+,p?tH1h"d+pHf$sNP,=hC4;,[/WNHO1]MDUW(07.)2rU0Lj_ts6EjaTZ##-uWUDIim?o*7M
%GG14eeqGCUVG,5uGU)D8kK&pnRD\BdcJ;[%W.i>dF>e*ra.D*:Bj+VWBmSQTT?/5@pcs_cZ,3(.Z(N3nM%G\;j8a2u9;ds9Lk@Vt
%0a0Wmp[j\?r"XmREP7(Td]^\.N-;V7DIBe;@,%Hco6_fE\$PO]e$bfRk>$Q_o`8Ca<W`E_(Y_g*$ds_"Eus\uZd^lO=*;^%I&7Ct
%[J_*GRN09FE%c`Z6T]GQ'/"QfZ/WSUqsi[8f\0bCJX`MOkIkVbDAZbm?hH)mTF!Be8=RB[p22`_BK<_srbZ[R5h7L(+&M0U.Aob\
%Ehj0q[=JH]lT@k^93;s57JU.=;A+`9CJKCRfZQ"RM_OAf#6C`,_op189_VZGKUJ?u>%e09Idd@91n0Zs)6:i_!>S$fV\#\,a,-=`
%M9$^)->5MM,0'7^MgMA]XB5.Spln]+p=A&:1c9]d\p2n*DSp8R!LLrI=d_)-*!f/>.Y2VUH,Hoi09p6bm^8nLM??Z(]A41SVNduk
%^p?a-moq5FY$te$q6'%,9RXVCZZY*gmh*XX=*(rHe-u%n]9bJ)d07k`N;L//6`$+3Z9GOm+VI\T`-:UV)hjo$c"YVlF*$#)kDjQL
%\?Hd/f,_`fBj!l)OM]RZ1!i)hEG2][?eo!;kN-bhDQd!b*T<US8V\)*^7\F4:Q93<=D[`1r<CJJ>e2VKiEQNm8*C1ET<RY5L:/QI
%/aS,jE&ZksJiT7&QfrHmpel`!->*p[J1V$lVV8DB!_7Kk#lWHY@n=sga>?33n?*7:VMkm#**S`9,R12WP%1.'?P#"`q4=%=lOPl7
%[RRViCP\jA:8jgUg3rBEF^S&=SqF,Q"Pn+Mc2rJ3&3Q>W?7m+Ac[4JC$nm?a+LahhdL/Bo!dlAc]B.Eu&RbFi9-RG@Z0@%P'Q9(i
%r$tdkR1Z0-e\m:DZ/Z^c!)t:cn[00Vd;B,5Y\riAgDZj.f$<\(X^>F8JeBap^f!LXfMb!>LWEh!bPK&(lZ8K;VijK1^W+J89U*'d
%\86I9V5>ifGeT<R4AL5TT=RX&%*(*5c6&k+oEZb"jF^P9r_b4Ro1H"dnhEW$r);WI/<ijjS(=RfC]A!]_G<8"%QlOhT]6bl%[AVP
%2rs9bQ0iXbh:3H-;,LTlLqMd)J%3?-6GVMneX$LgTR#R9W*+-UD8RmA7=eV-Q<ldkC$uLl1$q+79$WLIa.S.KC<=*%1FaVBZka$g
%md`:bJ'@g[g&b</5^E()XA^/+n@5m5]JXs&Hno:b\`*YQ`lmWd"7gQH&)4L=;^gtsWhJMV1/)n,S3H=*hO4uja7^8ii6oQpKO$3G
%s51U_+Au759JrUTl$,&SC9n!)W!0j:FiO'Vf$IM3`512n!j4A9a0.4h_n,@YBM_JpFSZ-QEFuiX?,/<*>\RpS4P.s\J.&'&mG-LB
%TPVUSd$IkJ35T2.g[#R_Io,X][(N0AS1>ZW4#g+DUk$t7'a+iqPQ_e\*S/>HN-k]<n6s_5eL8seBK;V9#FHOdoHjp*>&Irn!Wd1k
%7icE@As*C)b8?:0Kalhlfj6joN':0@G/!KO<Zc%er3W_GEJs9QUc#mSobL%tE"2?#In^7iCe6oFcm@-\?DH0Z12Wj74$5m@B:X^u
%S!Uf]GJ_%5]XN9LN[$G!QcN#NP*U.BON3T)fSXfZ<G^:/Tr,@FV/YjiH"?3Pp,pK3I+Nb'I;Hl=i/MRAK+75@*2h8u]s[Yj`i0-F
%F##<'0uZWD#Ol.(4FZ%f!S[j,e\k0r*sBaqcgA+t:2hQOh%&Q=Y%W!-H&MuLH>l?NO)*QuhEXRC05qW^2\?MsdQiLN.4"oN"2d8K
%4Zmn[!E9%_p?p`<WUZ$&p7C@J2ajD9/`,Rk%uM4?KqS;kr1BUiqdYjXc&[*pRpfP:8q)$6)T.SG@,G/E/ps<l+h/Zh_4RK#>Qo<-
%b*^#Yc@h9jRh+("$Nbi'IVc.Pc"$HrlDcYO,IRns)((UKP\T0DLMjq2R>eb)?1qD2][._X.:HtUGb>;&jW2+eqWkr+I.-j[R^c3j
%NSsCf!*fW:/7c"Qi?Ycs*#&UmY2/'.,!\OC=4%;f_4^o)[#EW5%SV_n/!QF>Fb%@W$fd]sfm`/YXs,:Ui)qh5f;)`u)P3&;HRrlf
%3J:<9.1`[o&lHsu,j62E1$b#+gd8_23]u>@Tt0B_=":3m7PGP?^1@sP+K=,Xn=%a$eAHiaQVS$-8Qa9&-ODq,qZDBiifk*@3*lkj
%NZHM5^B>QDMS7r;eqrQrD_2Ef##(MR]3UCWr%4Z9@:J&Ok?cd'2XpkTa2jc&cNd9YCiSgHZ!Y'm5U0"qYm8mBY72(LgG:'_0hks[
%n2C/jb?O;r?uMfpM7UB(J!,"BZ1tH;ACS\AQbn6SnZ-A!P$4ERKllPq1J7>e-]CR%R:e#6IPKB9nZ*m7p:1F-L5,:>LVYK5<l>PW
%8rlS)V&@mL?N@249W)1:f_B?(JPFoN>O^d":E@,/H'$Nh78:gpc%$2%iU:tOM!nX)om1c'F^UhH_08SN8%F8'<taR;h(i9B9#,cM
%n[[\!rJ)l1PJ4ughu_T#TD$sL<k\2j*ElgQLsI*&^2'AOU9?tT<GBk5,&G'DAoEriK[ZBgZ8?omaU+P3e62?n_<8e<Y0$sq7=o0B
%W#fl(C`@.2J'RT*7LCkm=eJ["a<&1F@&fb"e>Yr&pM!rYD*lRLi]]W1;G0qlZ\ZWE,Zmr5oubf/U5l-XmRGR*3+?3EPr0mH8ctRe
%b9@pq?5bNb0]c>X#Ok-4Jmdu$YqJ]QfU6\+9-5#9(sFibnj%:\[*gD.OXte4bM/tZ_6hmGZ\?WgIYt3!FZ.#*?25"_IsHD)4Zfep
%Z$?tZ;<oC;o6b:#5_;-N9@phU%s'a+9=,D_b-u/H-Mh](8*L#;iS6`A/Zo]8o1]o&A@S;On3pRHI^,1J?+'C7k40(45NDrtj/Kf>
%g:C`5EnQ+X`[[=)@dhA8\QMe_];d/XV@%ALMJkKK=m2/hAM@fC1ufqs*E*Er>XXCPTsMk200US'_d\T!k,fc(&?a&sA3,!A,ir$%
%h*Pi8\kH5434Rqeo4:QgL)gL7cd(R62EFB`hS3/h+9f6PB4k_7Xc_>4c==*p[TPDaZQ0u3G')Z*kP?NG`2tg3"^03n0suU<_jj74
%!#hDq,\T16^s97@1_(dt_^6]CCE=f5amOPZDRc__aK"kPoldJrVa`(l7d28/&lLp0=ir0V=,pjfpDb/tV@Nec%O\\?3`lBD2>YW[
%iUp\)e"jW0iGi*ek*C=T(19U0PJpL6Rlc]^5sVm1jM&QH$"K0GU1iV5BbRW-IJMLa>L]1V^?2^C4O_"63%R=/8/!E[RGnG!(FJF$
%.R2_<q?ng9gYA(`%0el\)'-OLVrJ7j!AZ^?=k"I[ZoTDGBJ"jF3QfD'He^*M[@YO(L,W.<Z]uW&@$#o<O")*3R?f0'4\S=9S/p/U
%O(:tXlRM$Q/Yf=K%7NOLL6Ec[736Tl<#&Kk'icei7-G9[8Z;6#kd5P4U&'^o46$aQ4_+^AI)%?p)\DKU=P_<3UN?X)Jp"3]SC9eB
%Mj#O*A\$l5dCros'm"XaF^0t.4'nS&gD'DlX#[s0\Ql?*I=%d:eQRe?cu`uB?Dh467"`#!lJB'q>gK<"Yt,$6gl9\0&B?+c39Z6>
%"Efj^=`qtVknM](60>#iA9drHE16_!bGd.Pcf$&nJDn99PD$mF%5mdho<,Em%%EqIRMX]Oig[%sbHcTK->co\e'i`?U.@3O9bV/$
%0bIj?A>6=`BC2'l1NKLqagN;$@?\'8[l/,NhjC2hbVk3*\-P8OcAZBN-!<'j_Irj!_,'>iAE8TR]\Mk*B6K+lU%=ZeFo4EH/kN"A
%^Sr[46jdKL>rbL,k-[<kj.*FA\`I#ZXTAm[8M?aQ(j$rXe[u6li!?+;jCPTX%Wb:k<W3G:;803T5RuM+XJJ^ieXb/]=5]b>9^XkW
%.C5%A4*cfMg&P(;1Z?PIX$oRWKHGn('`^#Y$GFnQ`:h;X5Neq'<9h?\U?GCIarF2n4ta1EE7(a%m$L`,L#_POZ"6[M(98(o%7A=&
%KPg!jQY"uRfd8Za5'<$0K?ho\_MH49G+<MdW:fa*5(]?f*#(KUqC"iAj2C@7q/W-/93larcJ@J4X'<$]#G`WR2`*R0HUEUH>,a]&
%q&TMA]9'q(;@s2[0!]V5Za.m^ILJE[&9jb4cf(Dqc[2f>c%Ut@!3@3DMB!t^s7<XF'j+?&-%\n[0(&5/9cc;13/n;1UkC,P!uF9V
%5=\Jo2SEJ%EJnX7(]V8Cf#+^FDEk0`^f]k5d><+;>SusO$dot*9-4@N=[h\F1>opRULJPk!%*'E$?,uZKZUQI])K4t#,JsSILNk;
%g\^:rB%/.)lE@X;K3O"]q4`SH==@]bHVo@H(oOBf)V5hA?K2+5+u_?mh,u_q]@ZVHpVAT$3heK>M^'I&A+'?+7oa+:Je=W$!1JRp
%L^/CaF7?3VFja1(Q=ca]btbGDQau=fX_,I/gr"o$'#Jc>`4=iJVnM,ks2RPp72;JCYf6a:/QW$gm,@.38GIX^>QYWW7YRt@]IHer
%?d(l5d*7SOn#V)Q+=?;a$#%LSmS0)2?J\s(g)FM-^_5?k7t#2=Wb9-q#Vq,`%Cfl*k,#%-2'+/(0"lA^N<)%=UO6YlRORZHdCo]H
%*Pe*_[W7%+jgikLoskM@ehG(C')Pf;W]*L>]<8cWTk_43,FL1fc5NQ<%IXZe:Oj:eX*=dK,K%"aLNc53!Y3.%0;hu$d'PL7f;i=/
%NouQ+5ctgp55\NPl'0h3h#k=jZO5?G=7]a@$TpZu+c/qQiJ+?_'TD\RmCg0X@<UY4M*m:0Bs6fHQ&9)Z6j6^)WjOPn%(\$Xep)0r
%h,k6$8]<'pI<`9cfukTT#f1L[CP@`lj/:f/N@`D<Ba3@s?4`$FHkl[LUG[<;Fj\l.G11NA;&bWT*;V]=DVS5<U:;LUmpS")5?=FQ
%4GS+OWJk2'l<MK<K('J2`m&qXgDttWr$]Ipk6Oh/nnb5t=Dc%hRD*fZCO1cP)dY&\F3VZ+]+B!2P9H7-a%p7mmLYHNY#I%,guSX3
%&RfF*$#uGbFUaR\=?&[l_I0WQ/dbP4PRZHXU(=2fMQKk9A<,-)0FEL;]Jshe-\h`K\M[0DKY,$ILT3AL2+`*jDQH$hQe`%9AbI#%
%,+^NHMktkTe8If^pK2RoPO)o`_`.F3nT4!<!%f=/;nQ[bcX?e-&shLc+l<*3<F)'CjM:q8;-Oc+eD1>I2_!]2n6-sn`RSD=Kku>m
%j5-)&fWMY<5AVlGh:>S]i^NZK20O"TKbH]]WJ`&c7Xd_((k5q(LVCO"F9?L2*+FNcSBm\o0)\?o/REC-=XM$F`,71RoTgifDVhW/
%\p\tZIC+3]pdQe6ET.L^4JA&?$N.uYdp_@8HMGo8`e#B&:Ilr<*cU3?o?I,9500#9h)S#IUjuaTZ:FBq7/Mp*RXN_]%Umul7hm@*
%]qEbd]>t,R^<!.r<EDtd-'*\U5[=_o8Ji[GUt2Yh]6l7g!Fj_M`tB?k6.-7'.@dufF%"`+<u_]lF@(%t@7uA%e;K=nO,aX9RQBL^
%0GI9h6^<<6jcE/j]Q?E66]sp*g`k&`5NdNZNO\HuSP5hU[-eE,(@9XLD5X!l4?lkg.W;O57J'QnkUCe%&7H3g#*[+;@3VKT""R8,
%F:8S-)!Ik]NpdUbe7V4Xat):F2#4s5/tI>W.dsF<##9nIe.c=`Vu@5U!>^7,RcVYo\_hH3_SUl5F.??m?hta(;n0;<C4QD\V`1PU
%pTFE9dfpL`=35;e&)+Z2<oIc(ph]8fLV1>TJ/53Ce:A/3*d'"0#iL-@+Mi%hT=_qe_i&(#CK=4.:o6_uWghT".[pPMArR2_/H'u-
%GbR$KC5GUThCkh`mSA&%@a>/,,(R><7ZZ7PDQ<f<iKpFk*=@n>BT,;Nb`5'^g9c&"CVItoOMge#Jl*Z\YOCi'\d$`N_kMg&mMI"&
%Dr@a#,XZ9n"OrjVf^YNt\\cPY[+m,q1j+eOH&!Q\6)?U-F/4Eh(07\&?;cT(PQ>0%rW98@:iW)-#5(@ClM^+.7B0BAeD[8P6:9p!
%="j:9\GN*I(XH,*+Ut^/"!Io5#b">+e@^N'4`N=)e;hH[9^<\Ee4*]T"9lD]M<d,?/af2PW:=_q]B(&KDKVDF;YM#C.lde+19V?C
%K*_J$lL_5A%N]-?"gHbMigi&_JrWV2`pa!]"I*:Ti_mEW;b[2G+MJaemTEl5d.GW5(_.g&IukUnqWC`ed8SdUdM??,G:XnSYURr2
%K=n%6KrL\qbnCKu@\16.)Lp'Jqo;./!PAYB6UW#hqM"+WE?Er9oePnX&+%>cb[a04Y_un6V;F,2W>-'%q1a45WjZQAedO;g#JB",
%^S\&TC$T&&_tgWlQ_>coKA4or#SCHOB#O2H78]MIN3[4"KBp?c;q=g-I)E>;nma`-H8)HWm%D^Bp::,bO@!UXON-Sgc)ttX.R\*L
%>LOf#O"WV\a\NApmH*/G<-c7RK^.=/Y$(.$jH'9llQ4N/V`'PNPW#^$@cR`E.IC>HXnQ-M>3n20k5#D&b-dkVThpDbVk<+)lZunZ
%1pW--b=cX*[^%/OK@ani*6.<9.D\+b\+7+3$I)h8eLs:idEpn0U.fRG+Nh*9.oY:5RDCH_7u.KP;a1M4c#/n"q96Jk&"tJo2r:s7
%J$ca+n8*-'C<PNZ!aKO83NI,#Z+Ns.1q8@E0:1^@J4B:NRnpe;3?7F2*3&6PP8'K+j;tIJbc$X*>=$*!p0IChdM>B(E*CHekMF@E
%T=!`,T651`KM,NO&S@^IMY7c!pPO_9#n7>-)'Heje!FK^fk<kh,t>Cf161>3E#@+M8@6V37Dc<SDmk%^aI_@T*3'(l71[R[=U2hS
%28).[*#>N!gtnCi,-[H*_E[DVf6W;IE)CL-/A+5%?e;t0<b[pj^M__<_iRKle#FT(N"h^!WT"I_=HY[q<0[\4l],2UeC]L@dXW8I
%=>=>Q*"dWCC:F_+#6q;>D]K`!@.4t.S`dRL84?DURNCIs&N*e"Q@t_C3.K#Y7\C"mO^YgkSS9,'goX@>bUjf3>lpk[E8QYi1^(AJ
%C*PgfIVGI\(XPX>+.1c-452I*0*9hlkr@9dZ:dIo-clG^I6gl;FHR&S]4aKJG<;QW$cN>5?%!4(?i_p2;b:,j>=PO8(K7?rg(oUN
%&5bgm9)-eFoHjlA]7+12,>bqaU"ri<O=1^.?mDVMQ%a&WM]mS0ntSk_Z^?9]K6htc8_iBC0P=YsJ.Ak"R#]a?Gj$Qs"@s`-cc"j(
%=,9s`d)*f>>O#H\=U=8RM'Z)c\ZUSN95iK)Do;Dk'N0:a0Q=AN!\OmGAX]-l\V)WGE5mV:Qji%#><Q="4`B^AD0R;$>Il:A"kB4f
%iI0gS81;TT@X=E0E3!37<U3ih_$50NO.0]=)A/,Qm'fZ&%g`I^__sOmIdh-HhV;F;CC2%42q_/g"g30`Nt_F1^-`T<k1#A-8L?m&
%\u66.>Q%i_G@qI*Kh\4O%%!;#*sU*UMn[t(?0k/\$K$n!aM]3;Na;;FXZ3b9@M,:,iTfYM]H0gET<>G^6&P9N=[IdaG!Ze"[PVgq
%Z9\N[p80dpL)uR44s>>Y8XdWd<%)Z(X9AmCZ5\S:/g$5im-+YPPX\N->h.[C7Kq6j<#mcoC\#9CN$KPG=B]FM_o_3&G(sg%Us*p4
%"=?F`f%7$PqT-$iAbr;T5-PO/-'[so*Z.APZ$D`Q`;o2U]ldq&]6Y6S;GM?5T3B64=,#nWCQ_^XK'd<)fYFV%A,hJ=du=[7X/:B+
%ICD<rV"Q.Zm^"Pm@rrq0pCdZ"U0Ct9[ZfB??1\6Af\q'$d6b/lMD.r0[pHtaV9Rs)Y<js&+<1)\dApOW4ak!#j4?>Hdd86Q(nPA9
%Cn]fnog'XD.57U\nPE;=?Rf,Q\ZY.K8[</&jk'bb"9Ds\;d\L)WQT-/,jA`O>;]q&7IeuAorF8!XSK8!E@32N#Ci9L^/2Da[tS+3
%flVuH)r=mo0+R&-oR-><+r:ZGOb>!s4RmFV0e3"9(J6GX'F^$c?SYV!pm)1GXj%6s7S@le\B^]#6oUI(J%4TW/4m[o8rd=?jZqUA
%5R"L5EVpl6B=E`Xs'=OYF\/K8<#9+09tOhACk;o/A.AlfFQO0uMh`=_rOg)%p2COMf,EZ5VL[Jm>uZ,:C,1RC478jY5a<nL?S"rY
%[4!Hia9$AkAm/>?OR!)%,MAi`7L2kF*F$a9!Rc3ChfW\h=a``k%ER;P?G%I),g!4Ym<VSf=9mDih/RrF63Ws,a/R&,2mU*a#d3DJ
%7K#b&&N8[fnfM&hi1aWQYk,4__:hk//kMY'D?`1Al![a_S``P6*Ej`dMD\euIHo=Rh5/1&clMSnbM<q,+\^]_.Vra1eNiN'ngUOs
%3-GLi*Q`S:OO#E9O('2%p;*&i)5)W?q[m'8CFTBeQr:R:[IX1LTdgbfF80<Cb,H7+Q`)5YFjlBj^VdFo8LiL3JW4B-8Gj21$+$AJ
%`;]=+m&;NRB?LSL.2rF$rgHKB+=[ZP1(\n3>qaOtX`Fg"XO%@q)Q=;*mcd-G=Am,9HmrfPo3C?%6H5&a,"]Qj?M1Vqf+?o=1BJgn
%oIWkfb[?dIHJ"@7=+Od8g%A4-fUh-:B]2ccq&Gnce<J!rE7#:q*g.YHq3'-D0emY,Z1;<[(`$:3!T.BO.buGf"5e!*?aCFL`07P#
%Wo'@[GAj+@:3JXKNXq[A8%&?)i0=#D:jDq(pOGB4+Cd>b/fD><;-:*V-i9Km*J#(cR+0IcMlF6pbbtf+BJ,[L^;oI&Y><a<LQB$e
%j%#DujdAe&[Uc__W]gYe3,%Tbk>)\#^prMaYmkuln7tDG;Qp_*43:H$NhX37..IJ[=Yo$U,X9MO=;>a.nN!]05)2u"!6;@$;FZ[0
%HTCZi<1`c7cS^W#JM5pDp:VK#PHG\QkY^k.fre3iN[`Ga:(@ShhO?NECjBpq#d675V[s_jguVI#.(0N>MmXh2c\d?;i.!+?+kOD-
%_][=%>?J$MdWW_jg*/XgFXG4/Q?KCY9FWF7,VR:V#]*7f2XQne=U)I7M!ejI\7%1mm]sK%?aMf0e>$'bnP2RfN_imCesmq9:C\NZ
%jdb/53,K4:I.7r!s1`6mjsH8/9sk@OYhr@A>Z!]97KbX$"`hDT&%5n/Sch)a%>NbEm3?]FOtT*"(pWf<IS9eL@/7ibJ(tTCJ.#4t
%FXe6$fs=4'4d_e3'cVj3K/*tc7h_\J=8DIuF;N42_B'-fO=3$n*N"aT$X;=Q(Q[de0*0<YF/fG_A3WL[UU[p4Cq7=m:=7L,f5AB6
%Jl@dYSFmG0+.-<c<>S.r0W!E\DNT$dRk<cdh8KPZ*rq]r4V9l);rnETqg>9Z(2Sc[JICXL,Z&ju5e1AW+3S#37GRN:Qo&.CD%X>?
%L8Br,VijPl)48+!N(b]%G;!V9'%A1cOo\c!P$pO@3Ztdlr'=7.S^km4!riHT#X#RU?B>=+:"_<c;(/@q:ZS<c"["\,s6cQblY#NP
%DRt81)QS8X?iK^+BPP&LXHW2^DkM[X-\(mi:JIHrU0K`9$4[/Of9NI<:\)8L'`B0Oe'1X<`e@Q4=M7->2[LDa64ri(ot,c=/YP[r
%b7H6L-L?]6!,e"L4\cJLFf5&WM+K3Ec#TUBbR=_Fk;;&lO*d6rXN(3\^VK/s>5hm[9d$0Op0nZT8s6k9D9h["SYaZj0/YZNPSFME
%o8295/?uOdMY$#=Qo:GAnKBRi<V\7@)s)P=l)lL-XL0Vi$UMet+=@uX,X(.-(-U'dpVdL7lRO^<BAN[4;uPp95_$s<<A^A__D<MX
%%3\n(iOGO3!Y_p8b&J<]%CNM+6B>"15:#&%ibH+Wp5Q?b[0J2`2C;!d$&p,TP/n%Wk]F\KY2V]Yr?SS%%!,T?$-=g);'4rh72F&f
%-Gk[;o**-l&D^bf#6UQZ7taa(l'LI&055%t3:Q_!o@LcB"B.j[iNS@=?1Of6Sh<\E9Hb%?]5Ng%=o],R);E.r.*lteYk`9E-M9U\
%+"JCcSB*1'H20Ar29;1JQ=n;K=]VIsN?$Bp]q[in`2OlVYi`%8l+-,fp3"NhV<]8;A6P;K).jR*L*k\![^o`D3\[`C(UT%D/klV[
%r!>Ej9tlL^BfGhtiJ#@1M@+iq5)fEDG1!F62(:-RY7+2=,$_FO2COpC,VHo4(@APUZreON+fdZZ"2b4%ECqIt)8s/kpF<^tL+KEg
%j,jpU$#>QE>20J5$R.C-21VL4lCIf^k92L]a;4b[63buSX!nHM!hNrDP@P%8*tDlVE3&%5gPXZG86JbH;2Y8Sjm%c'!>-uGRSM<O
%'Jk,OF(M0u"%6'<qB&,c$d7/V:GpqK#jZ3\l&dj3%Wo4e[!]bhM,p:1f(qA6]pSoj#/`9m=;\$'!L'iW>?Gi>(ppbRY>?1l0,EV5
%79[g>XGhcN(FL#$@WFt9m`$Z`\)##=9C'6NeJhgW6OA,,!N\+0[s\'iiDrkO$FW_sJYiP$U8rq3*3,5G"YOOd5_Z)]"o4Q6:%4u(
%6e"7\(4I$rYs-JXkSK685L#o/7NbEHBRk#?3MS`MRo#hTZ;cJNX-gKNU\ikpgH1BW,kJqb&MP<c`&ekiegUC[&?lItq+IGsZ>UUL
%1P)[IC6<!BAG2BHGrF%['7.ZB%k3k<HI'AHd,]X#XDm?gPY9WXCi6J0W@?HH."F*a;J0=R=0JNSOpaJ[HLdE.2/q<Q0s42g>;B>q
%A_mh;%K1sS^BM2c;_Xa9@am(qBX!t9#rPt*b,L)/MuoE(Foi'1giQ*'_NXk&Q+LWSPo/sAlO_l$;P;)Rn1&Y3fk:/4[nZaEM4.^%
%"tZ])X>gp)3R`h'/9A%/?_T"fT)4iYbC/JGmXTC!VH[8R@Msi57<8fLVNM26;sMEf7tuNE+j(C'IH!(fEQ#;\hll]_cm.7N#,QZi
%=kbN(Bn3>kV`R0IQC2S9*YF6:eOE$dQS((Z_*Q1T=c)<$83L(5Q5#p.pL8.-"-q'oKZ4pp4oieu9FFckZk,7]MLYX'7PC`?5-OUo
%Ltld/#JAg!;<g;fjOj2/*JPe2,5*dWILHTU8&!K[&0,`S7U(phoba@Aq_Y\H+DD-.J[pL1-!@D+%FX=!0RI2:r0":Eq!)8#NS_VS
%-Hk?*L7jS_35+Oe)bN7W[uXsn>)+A]7!T+CHmh%/Eg\VrW3lmnB]!IV:II)PVF-.GcJ8KP_.f&J&58>Hr?^n^,lS2plD9Cq8\lT1
%1Wn33F^4L>Mdm`FmM&;4UM(4(rhBS9Qo36mqngh0qq6EREN]r8QBHrt[>,oB)h;6YE""fq</$*Ac3j-'&tTrRh,!_$f33ORm!N.[
%RQ_bM2/XRcK:^D7[6)`!9"?tC!@24d0DB_/!Zn=JYI@2l?p%,SMjP&ml87=`%:H-j7MP(8(YN(K/'6I_XcNo0^9(92s8>j4BWLH"
%\JRs%!RR\BD*i<O=s"N^N5VQiP;SJ_g6dtuhVE3Nl'I:XDkMU2eeZej16K4U_Qgg3$fSQJc=rSGEn5?DWu<+[7YVjCb.(=J%I41[
%B]2.M&sD>]dL4d9JR=%D#T?C.*Oll?>C]@OU`]N;d,m_LI[*eu]\HLlk@V1<XWSL^5,(;rK[%9olX_XH>_d_L<Ecq+oju)tb=Rl4
%4NBiL.M@@sL2+1c+-o9`>HP?@;W!0,#um6'MQ7VWA44`[:6UKCr`BY5j6N=<6bJ<,bFM::YP>uaBuGBEIh3p#jbi/W;IDqQUham2
%].6JeJVfM[OAQ00\JpdGL*1bXF?)b**`lo5W8rOe1jRSA:USsI:_7`Kdm_FcqZi9#-=>2.pkXo%;e4R0gdF?O3j1n8(19_,I-XZa
%a7]dqM)W_<Y1k#edF=''NR;<hSj(J7L1]>qUD-eUMlL%g^'Ro%<[LA)"32OP'80j28uE#oo8IlDSOEKI\0gu[Oq21)<"XEJZp&DL
%Mise3<e!U3?G'Ag$3R\0Ye#u]NG==`<*b*Gi%GN@UjU]a$CtO[$k\b.repfih3KtUc%LPJ?kCb9WMrphA&s(3Tcf5+(0bYqZOS"X
%<FK_#17H3)<7$V''tg=P`u89N9)Ae<3T02tV,R+LY$[@nL^e3Bp]KBLI6QdN.]ps-Bk;,M\"J";o5)NE45r5e7J)+6Ier&EMVn?h
%T,^%@q339`4>0Z]Q>'/__\U1(>[#aG3\mHoiCg[%n_0oFr3/6T*DZO>FZitPB2K`j0Tsf@7F$lc!9P*9\B4YjS0X_Epu4=^RD_0U
%#>F4(31d7/Q7!_"OYi`Q6H)rFAOor6THhB_jC0F26@CW9[3"IWVi0\]7+u69Z.4A=3j#hd3(;'H8\t@g6;sj5e@\:-U7Cl85P0l:
%iaZ%0b$r`oFs&=m[`N%^cpeB;eGo^49kN3i1SGMkZDD1QeM5?Ui%9e#G:>3,O>t4bRK&,/*B*0=U+]&F&HpWUIgRR?j)U,-,4OuF
%#NFuSDVe(2G#kO;2PWQpfE9Q)8hi^8GkRtA+J$lo;qBEdOWXt3T?:WPO:b$lcs\ifJ_Wu04mZ8935Z<+k;+D/;HoGLTDe`g0C)eB
%)[CuQh;EeP`Q,bV4>YE*'+tQf2MVjrdiqoQ/-J&U-6[lRWiBq]ZIef/1t1#<]">Nl*_X<i1<F?3ko&$?bZ@RF$ed>-hYfYm,oVT;
%W^McA"\[U/JAos2&Z=*?jbc*BmrGeqRuTtN2s[mdM6kZ4&(7gkW1434Q-+j3/>9(16P-YE9i(0kJ&4iHi'sS[Pfa3DP<a%s#jlX3
%7C+Ht-L76M4:btBeK)<LpBqlt!0k\O.0q8.C<f<T@ikMI8V6Rb16,'C@k"dt*2&,/bM3Q<Zl;iZ`<ILkQDe+)Vh#4\1O'<9>=+Rd
%ADX8L9]T(DUsd#%;LL=-%_`S>$7<?cDjmDkL2<AP/9@kT"-COfY,m_d@4KAfX>S<`K+gMj*1E`42W:ln+[WPo:('eg%Rn?*.4KDO
%dE_HP,Uf9G'`\8=*c>6p2.`R._;"[8Z?$*+<!69?Y\CGqfHDRFs#F2WC9^<%!60nFrY>pC6Q"+,Sle_9fOAh+^_/R/'CH.W2[D)%
%e3Y-L<\>+W;_pp2_Gt(qU9!RGB&%RKd$'S"UbED-kY2.A`#j;7\H4!YEX8C'3$]gn"G5#hbOaX.BPS9MlOB@_8lZiUk@Su>*IuLr
%Zq`^'$j8Wq$3L4?L&QGOX3dO)K4.Qsd8b&VHPUr0CPCs?a)/eALs,al1&0DUeU"ZAHA[rPNL)?,)Pa8Wg?KrC\@b.mP=iXk&j1Ze
%&-XRn6r[@[*U6k]BE)=`BRdX#D1=[6htP/Uqr)=\DJj(&p1ZLFcdVCXD4K1X_g2"o2oG01\dXqqIK!r%R)\aZ1l\!rlff&qFLlYJ
%DXW'=XB5E%"C!gF~>
%AI9_PrivateDataEnd
